<?xml version="1.0" encoding="UTF-8"?>

  <sect1 id="Geometry_Outputs">
	  <title>Geometry Outputs</title>
		  <refentry id="ST_AsBinary">
		  <refnamediv>
			<refname>ST_AsBinary</refname>
			<refpurpose>Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.</refpurpose>
		  </refnamediv>

		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsBinary</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsBinary</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
				<paramdef><type>text </type><parameter>NDR_or_XDR</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsBinary</function></funcdef>
				<paramdef><type>geography </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsBinary</function></funcdef>
				<paramdef><type>geography </type> <parameter>g1</parameter></paramdef>
				<paramdef><type>text </type><parameter>NDR_or_XDR</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>

		  <refsection>
			<title>Description</title>

			<para>Returns the Well-Known Binary representation of the geometry.  There are 2 variants of the function.  The first
			variant takes no endian encoding parameter and defaults to server machine endian.  The second variant takes a second argument
			denoting the encoding - using little-endian ('NDR') or big-endian ('XDR') encoding.</para>
			<para>This is useful in binary cursors to pull data out of the
			database without converting it to a string representation.</para>

			<note>
			  <para>The WKB spec does not include the SRID.  To get the WKB with SRID format use ST_AsEWKB</para>
			</note>
			<note>
			  <para>ST_AsBinary is the reverse of <xref linkend="ST_GeomFromWKB" /> for geometry.  Use <xref linkend="ST_GeomFromWKB" /> to convert to a postgis geometry from ST_AsBinary representation.</para>
			</note>

			<note>
			  <para>The default behavior in PostgreSQL 9.0 has been changed to output bytea in hex encoding.  ST_AsBinary is the reverse of <xref linkend="ST_GeomFromWKB" /> for geometry.  If your GUI tools
				require the old behavior, then SET bytea_output='escape' in your database.</para>
			</note>

			<para>Enhanced: 2.0.0 support for Polyhedral surfaces, Triangles and TIN was introduced.</para>
			<para>Enhanced: 2.0.0 support for higher coordinate dimensions was introduced.</para>
			<para>Enhanced: 2.0.0 support for specifying endian with geography was introduced.</para>
			<para>Availability: 1.5.0 geography support was introduced.</para>
			<para>Changed: 2.0.0 Inputs to this function can not be unknown -- must be geometry.  Constructs such as <code>ST_AsBinary('POINT(1 2)')</code> are no longer valid and you will get an <code>n st_asbinary(unknown)  is not unique error</code>.  Code like that
			needs to be changed to <code>ST_AsBinary('POINT(1 2)'::geometry);</code>.  If that is not possible, then install <filename>legacy.sql</filename>.</para>
			<para>&sfs_compliant; s2.1.1.1</para>
			<para>&sqlmm_compliant; SQL-MM 3: 5.1.37</para>
			<para>&curve_support;</para>
			<para>&P_support;</para>
			<para>&T_support;</para>
			<para>&Z_support;</para>
		  </refsection>


		  <refsection>
			<title>Examples</title>

			<programlisting>SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));

		   st_asbinary
--------------------------------
\001\003\000\000\000\001\000\000\000\005
\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000
\000\000\000\360?\000\000\000\000\000\000
\360?\000\000\000\000\000\000\360?\000\000
\000\000\000\000\360?\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000
(1 row)</programlisting>
			<programlisting>SELECT ST_AsBinary(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');
		   st_asbinary
--------------------------------
\000\000\000\000\003\000\000\000\001\000\000\000\005\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000
\000?\360\000\000\000\000\000\000?\360\000\000\000\000\000\000?\360\000\000
\000\000\000\000?\360\000\000\000\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000
(1 row)</programlisting>
		  </refsection>

		  <!-- Optionally add a "See Also" section -->
		  <refsection>
			<title>See Also</title>
			<para>
<xref linkend="ST_GeomFromWKB" />,
<xref linkend="ST_AsEWKB" />,
<xref linkend="ST_AsTWKB" />,
<xref linkend="ST_AsText" />,
			</para>
		  </refsection>
	</refentry>

	<refentry id="ST_AsEncodedPolyline">
		<refnamediv>
		<refname>ST_AsEncodedPolyline</refname>
		<refpurpose>Returns an Encoded Polyline from a LineString geometry.</refpurpose>
		</refnamediv>

		<refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
		  <funcdef>text <function>ST_AsEncodedPolyline</function></funcdef>
		  <paramdef><type>geometry</type> <parameter>geom</parameter></paramdef>
		  <paramdef choice="opt"><type>integer </type> <parameter>precision=5</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
		</refsynopsisdiv>

		<refsection>
		<title>Description</title>

		<para>Returns the geometry as an Encoded Polyline. This format is used by Google Maps with precision=5 and by Open Source Routing Machine with precision=5 and 6.</para>
		<para>Optional <varname>precision</varname> specifies how many decimal places will be preserved in Encoded Polyline. Value should be the same on encoding and decoding, or coordinates will be incorrect.</para>

		<para>Availability: 2.2.0</para>
		</refsection>

		<refsection>
		<title>Examples</title>
	<para>Basic </para>
	<programlisting>
	SELECT ST_AsEncodedPolyline(GeomFromEWKT('SRID=4326;LINESTRING(-120.2 38.5,-120.95 40.7,-126.453 43.252)'));
	--result--
	|_p~iF~ps|U_ulLnnqC_mqNvxq`@
	</programlisting>

	<para>Use in conjunction with geography linestring and geography segmentize, and put on google maps</para>
	<programlisting>-- the SQL for Boston to San Francisco, segments every 100 KM
	SELECT ST_AsEncodedPolyline(
		ST_Segmentize(
			ST_GeogFromText('LINESTRING(-71.0519 42.4935,-122.4483 37.64)'),
				100000)::geometry) As encodedFlightPath;</programlisting>


	<para>javascript will look something like this where $ variable you replace with query result</para>
	<programlisting><![CDATA[<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=geometry"></script>
<script type="text/javascript">
	 flightPath = new google.maps.Polyline({
			path:  google.maps.geometry.encoding.decodePath("$encodedFlightPath"),
			map: map,
			strokeColor: '#0000CC',
			strokeOpacity: 1.0,
			strokeWeight: 4
		});
</script>
	]]></programlisting>
	</refsection>
		<!-- Optionally add a "See Also" section -->
		<refsection>
		<title>See Also</title>
		<para><xref linkend="ST_LineFromEncodedPolyline" />, <xref linkend="ST_Segmentize" /></para>
		</refsection>
	</refentry>

	<refentry id="ST_AsEWKB">
		  <refnamediv>
			<refname>ST_AsEWKB</refname>
			<refpurpose>Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.</refpurpose>
		  </refnamediv>

		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsEWKB</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsEWKB</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
				<paramdef><type>text </type><parameter>NDR_or_XDR</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>

		  <refsection>
			<title>Description</title>
			<para>Returns the Well-Known Binary representation of the geometry with SRID metadata.  There are 2 variants of the function.  The first
			variant takes no endian encoding parameter and defaults to little endian.  The second variant takes a second argument
			denoting the encoding - using little-endian ('NDR') or big-endian ('XDR') encoding.</para>
			<para>This is useful in binary cursors to pull data out of the
			database without converting it to a string representation.</para>
			<note>
			  <para>The WKB spec does not include the SRID.  To get the OGC WKB format use ST_AsBinary</para>
			</note>
			<note>
			  <para>ST_AsEWKB is the reverse of ST_GeomFromEWKB.  Use ST_GeomFromEWKB to convert to a postgis geometry from ST_AsEWKB representation.</para>
			</note>
			<para>Enhanced: 2.0.0 support for Polyhedral surfaces, Triangles and TIN was introduced.</para>
			<para>&Z_support;</para>
			<para>&curve_support;</para>
			<para>&P_support;</para>
			<para>&T_support;</para>
		  </refsection>


		  <refsection>
			<title>Examples</title>

			<programlisting>SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));

		   st_asewkb
--------------------------------
\001\003\000\000 \346\020\000\000\001\000
\000\000\005\000\000\000\000
\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000
\000\000\360?\000\000\000\000\000\000\360?
\000\000\000\000\000\000\360?\000\000\000\000\000
\000\360?\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000\000\000
(1 row)</programlisting>
		<programlisting>
			SELECT ST_AsEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326), 'XDR');
		   st_asewkb
--------------------------------
\000 \000\000\003\000\000\020\346\000\000\000\001\000\000\000\005\000\000\000\000\
000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?
\360\000\000\000\000\000\000?\360\000\000\000\000\000\000?\360\000\000\000\000
\000\000?\360\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000
\000\000\000\000\000\000\000\000\000\000\000\000\000
		</programlisting>
		  </refsection>

		  <!-- Optionally add a "See Also" section -->
		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_AsBinary" />, <xref linkend="ST_AsEWKT" />, <xref linkend="ST_AsText" />, <xref linkend="ST_GeomFromEWKT" />, <xref linkend="ST_SRID" /></para>
		  </refsection>
	</refentry>
	  <refentry id="ST_AsEWKT">
		  <refnamediv>
			<refname>ST_AsEWKT</refname>
			<refpurpose>Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.</refpurpose>
		  </refnamediv>

		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>text <function>ST_AsEWKT</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>text <function>ST_AsEWKT</function></funcdef>
				<paramdef><type>geography </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>

		  <refsection>
			<title>Description</title>

			<para>Returns the Well-Known Text representation of the geometry prefixed with the SRID.</para>

			<note>
			  <para>The WKT spec does not include the SRID.  To get the OGC WKT format use ST_AsText.</para>
			</note>
			<para><inlinegraphic fileref="images/warning.png" />
				WKT format does not maintain precision so to prevent floating truncation, use ST_AsBinary or ST_AsEWKB format for transport.
			</para>
			<note>
			  <para>ST_AsEWKT is the reverse of <xref linkend="ST_GeomFromEWKT" />.  Use <xref linkend="ST_GeomFromEWKT" /> to convert to a postgis geometry from ST_AsEWKT representation.</para>
			</note>
			<para>Enhanced: 2.0.0 support for Geography, Polyhedral surfaces, Triangles and TIN was introduced.</para>
			<para>&Z_support;</para>
			<para>&curve_support;</para>
			<para>&P_support;</para>
			<para>&T_support;</para>
		  </refsection>


		  <refsection>
			<title>Examples</title>

			<programlisting>SELECT ST_AsEWKT('0103000020E61000000100000005000000000000
			000000000000000000000000000000000000000000000000000000
			F03F000000000000F03F000000000000F03F000000000000F03
			F000000000000000000000000000000000000000000000000'::geometry);

		   st_asewkt
--------------------------------
SRID=4326;POLYGON((0 0,0 1,1 1,1 0,0 0))
(1 row)

SELECT ST_AsEWKT('0108000080030000000000000060E30A4100000000785C0241000000000000F03F0000000018
E20A4100000000485F024100000000000000400000000018
E20A4100000000305C02410000000000000840')

--st_asewkt---
CIRCULARSTRING(220268 150415 1,220227 150505 2,220227 150406 3)
</programlisting>
		  </refsection>

		  <!-- Optionally add a "See Also" section -->
		  <refsection>
			<title>See Also</title>
			<para>
<xref linkend="ST_AsBinary" />,
<xref linkend="ST_AsEWKB" />,
<xref linkend="ST_AsText" />,
<xref linkend="ST_GeomFromEWKT" /></para>
		  </refsection>
	</refentry>
	<refentry id="ST_AsGeoJSON">
	  <refnamediv>
		<refname>ST_AsGeoJSON</refname>

		<refpurpose>Return the geometry as a GeoJSON element.</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
			<funcprototype>
				<funcdef>text <function>ST_AsGeoJSON</function></funcdef>
				<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>options=0</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>text <function>ST_AsGeoJSON</function></funcdef>
				<paramdef><type>geography </type> <parameter>geog</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>options=0</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>text <function>ST_AsGeoJSON</function></funcdef>
				<paramdef><type>integer </type> <parameter>gj_version</parameter></paramdef>
				<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>options=0</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>text <function>ST_AsGeoJSON</function></funcdef>
				<paramdef><type>integer </type> <parameter>gj_version</parameter></paramdef>
				<paramdef><type>geography </type> <parameter>geog</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>options=0</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		  <para>Return the geometry as a Geometry Javascript Object Notation (GeoJSON) element. (Cf <ulink
			url="http://geojson.org/geojson-spec.html">GeoJSON
			specifications 1.0</ulink>). 2D and 3D Geometries are both
			supported. GeoJSON only support SFS 1.1 geometry type (no curve
			support for example).</para>

			<para>The gj_version parameter is the major version of the GeoJSON spec. If specified, must be 1.  This represents the spec version of GeoJSON.</para>

			<para>The third argument may be used to reduce the maximum number
			of decimal places used in output (defaults to 15).</para>

			<para>The last 'options' argument could be used to add Bbox or Crs
			in GeoJSON output:
			  <itemizedlist>
				<listitem>
				  <para>0: means no option (default value)</para>
				</listitem>

				<listitem>
				  <para>1: GeoJSON Bbox</para>
				</listitem>

				<listitem>
				  <para>2: GeoJSON Short CRS (e.g EPSG:4326)</para>
				</listitem>

				<listitem>
				  <para>4: GeoJSON Long CRS (e.g urn:ogc:def:crs:EPSG::4326)</para>
				</listitem>
			  </itemizedlist>
			</para>
			<para>Version 1: ST_AsGeoJSON(geom) / maxdecimaldigits=15 version=1 options=0</para>
			<para>Version 2: ST_AsGeoJSON(geom, maxdecimaldigits) / version=1 options=0</para>
			<para>Version 3: ST_AsGeoJSON(geom, maxdecimaldigits, options) / version=1</para>
			<para>Version 4: ST_AsGeoJSON(gj_version, geom) / maxdecimaldigits=15 options=0</para>
			<para>Version 5: ST_AsGeoJSON(gj_version, geom, maxdecimaldigits) / options=0</para>
			<para>Version 6: ST_AsGeoJSON(gj_version, geom, maxdecimaldigits, options)</para>

			<para>Availability: 1.3.4</para>
			<para>Availability: 1.5.0 geography support was introduced.</para>
			<para>Changed: 2.0.0 support default args and named args.</para>
			<para>&Z_support;</para>
	  </refsection>

	  <refsection>
		<title>Examples</title>
		<para>GeoJSON format is generally more efficient than other formats for use in ajax mapping.
			One popular javascript client that supports this is Open Layers.
			Example of its use is   <ulink
                url="http://openlayers.org/en/v3.10.1/examples/geojson.html">OpenLayers GeoJSON Example</ulink>
		</para>
		<programlisting>SELECT ST_AsGeoJSON(the_geom) from fe_edges limit 1;
					   st_asgeojson
-----------------------------------------------------------------------------------------------------------

{"type":"MultiLineString","coordinates":[[[-89.734634999999997,31.492072000000000],
[-89.734955999999997,31.492237999999997]]]}
(1 row)
--3d point
SELECT ST_AsGeoJSON('LINESTRING(1 2 3, 4 5 6)');

st_asgeojson
-----------------------------------------------------------------------------------------
 {"type":"LineString","coordinates":[[1,2,3],[4,5,6]]}

</programlisting>
	  </refsection>
	</refentry>
	<refentry id="ST_AsGML">
	  <refnamediv>
		<refname>ST_AsGML</refname>
		<refpurpose>Return the geometry as a GML version 2 or 3 element.</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
			<funcprototype>
				<funcdef>text <function>ST_AsGML</function></funcdef>
				<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>options=0</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>text <function>ST_AsGML</function></funcdef>
				<paramdef><type>geography </type> <parameter>geog</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>options=0</parameter></paramdef>
			</funcprototype>


			<funcprototype>
				<funcdef>text <function>ST_AsGML</function></funcdef>
				<paramdef><type>integer </type> <parameter>version</parameter></paramdef>
				<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>options=0</parameter></paramdef>
				<paramdef choice="opt"><type>text </type> <parameter>nprefix=null</parameter></paramdef>
				<paramdef choice="opt"><type>text </type> <parameter>id=null</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>text <function>ST_AsGML</function></funcdef>
				<paramdef><type>integer </type> <parameter>version</parameter></paramdef>
				<paramdef><type>geography </type> <parameter>geog</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>options=0</parameter></paramdef>
				<paramdef choice="opt"><type>text </type> <parameter>nprefix=null</parameter></paramdef>
				<paramdef choice="opt"><type>text </type> <parameter>id=null</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Return the geometry as a Geography Markup Language (GML) element. The version parameter,
			if specified, may be either 2 or 3. If no version parameter is
			specified then the default is assumed to be 2. The <varname>maxdecimaldigits</varname> argument
			may be used to reduce the maximum number of decimal places
			used in output (defaults to 15).</para>
		<para>GML 2 refer to 2.1.2 version, GML 3 to 3.1.1 version</para>
		<para>The 'options' argument is a bitfield. It could be used to define CRS output type
					in GML output, and to declare data as lat/lon:
						  <itemizedlist>
								<listitem>
								  <para>0: GML Short CRS (e.g EPSG:4326), default value</para>
								</listitem>

								<listitem>
								  <para>1: GML Long CRS (e.g urn:ogc:def:crs:EPSG::4326)</para>
								</listitem>

								<listitem>
								  <para>2: For GML 3 only, remove srsDimension attribute from output.</para>
								</listitem>

								<listitem>
								  <para>4: For GML 3 only, use &lt;LineString&gt; rather than &lt;Curve&gt; tag for lines.</para>
								</listitem>

								<listitem>
								  <para>16: Declare that datas are lat/lon (e.g srid=4326). Default is to assume that data are planars.
								  This option is useful for GML 3.1.1 output only, related to axis order. So if you set it, it will swap the coordinates
								  so order is lat lon instead of database lon lat.</para>
								</listitem>

								<listitem>
								  <para>32: Output the box of the geometry (envelope).</para>
								</listitem>
						  </itemizedlist>
						</para>

		<para>The 'namespace prefix' argument may be used to specify a custom
namespace prefix or no prefix (if empty). If null or omitted 'gml' prefix is used</para>


		  <para>Availability: 1.3.2</para>
		  <para>Availability: 1.5.0 geography support was introduced.</para>
		  <para>Enhanced: 2.0.0 prefix support was introduced. Option 4 for GML3 was introduced to allow using LineString instead of Curve tag for lines. GML3 Support for Polyhedral surfaces and TINS was introduced. Option 32 was introduced to output the box.</para>
		  <para>Changed: 2.0.0 use default named args</para>
		  <para>Enhanced: 2.1.0 id support was introduced, for GML 3.</para>

		<note><para>Only version 3+ of ST_AsGML supports Polyhedral Surfaces and TINS.</para></note>
		<para>&Z_support;</para>
		<para>&P_support;</para>
		<para>&T_support;</para>
	  </refsection>

	  <refsection>
		<title>Examples: Version 2</title>
		<programlisting><![CDATA[SELECT ST_AsGML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));
		st_asgml
		--------
		<gml:Polygon srsName="EPSG:4326"><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>0,0 0,1 1,1 1,0 0,0</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>]]>
			</programlisting>
	  </refsection>
		<refsection>
		<title>Examples: Version 3</title>
		<programlisting>-- Flip coordinates and output extended EPSG (16 | 1)--
<![CDATA[SELECT ST_AsGML(3, ST_GeomFromText('POINT(5.234234233242 6.34534534534)',4326), 5, 17);
			st_asgml
			--------
		<gml:Point srsName="urn:ogc:def:crs:EPSG::4326"><gml:pos>6.34535 5.23423</gml:pos></gml:Point>]]>
			</programlisting>
		<programlisting>-- Output the envelope (32) --
<![CDATA[SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 32);
		st_asgml
		--------
	<gml:Envelope srsName="EPSG:4326">
		<gml:lowerCorner>1 2</gml:lowerCorner>
		<gml:upperCorner>10 20</gml:upperCorner>
	</gml:Envelope>]]>
			</programlisting>

		<programlisting>-- Output the envelope (32) , reverse (lat lon instead of lon lat) (16), long srs (1)= 32 | 16 | 1 = 49 --
<![CDATA[SELECT ST_AsGML(3, ST_GeomFromText('LINESTRING(1 2, 3 4, 10 20)',4326), 5, 49);
	st_asgml
	--------
<gml:Envelope srsName="urn:ogc:def:crs:EPSG::4326">
	<gml:lowerCorner>2 1</gml:lowerCorner>
	<gml:upperCorner>20 10</gml:upperCorner>
</gml:Envelope>]]>
			</programlisting>

		<programlisting>-- Polyhedral Example --
SELECT ST_AsGML(3, ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),
((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),
((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),
((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'));
	st_asgml
	--------
<![CDATA[ <gml:PolyhedralSurface>
<gml:polygonPatches>
   <gml:PolygonPatch>
		<gml:exterior>
			  <gml:LinearRing>
				   <gml:posList srsDimension="3">0 0 0 0 0 1 0 1 1 0 1 0 0 0 0</gml:posList>
			  </gml:LinearRing>
		</gml:exterior>
   </gml:PolygonPatch>
   <gml:PolygonPatch>
		<gml:exterior>
			  <gml:LinearRing>
				   <gml:posList srsDimension="3">0 0 0 0 1 0 1 1 0 1 0 0 0 0 0</gml:posList>
			  </gml:LinearRing>
		</gml:exterior>
   </gml:PolygonPatch>
   <gml:PolygonPatch>
		<gml:exterior>
			  <gml:LinearRing>
				   <gml:posList srsDimension="3">0 0 0 1 0 0 1 0 1 0 0 1 0 0 0</gml:posList>
			  </gml:LinearRing>
		</gml:exterior>
   </gml:PolygonPatch>
   <gml:PolygonPatch>
		<gml:exterior>
			  <gml:LinearRing>
				   <gml:posList srsDimension="3">1 1 0 1 1 1 1 0 1 1 0 0 1 1 0</gml:posList>
			  </gml:LinearRing>
		</gml:exterior>
   </gml:PolygonPatch>
   <gml:PolygonPatch>
		<gml:exterior>
			  <gml:LinearRing>
				   <gml:posList srsDimension="3">0 1 0 0 1 1 1 1 1 1 1 0 0 1 0</gml:posList>
			  </gml:LinearRing>
		</gml:exterior>
   </gml:PolygonPatch>
   <gml:PolygonPatch>
		<gml:exterior>
			  <gml:LinearRing>
				   <gml:posList srsDimension="3">0 0 1 1 0 1 1 1 1 0 1 1 0 0 1</gml:posList>
			  </gml:LinearRing>
		</gml:exterior>
   </gml:PolygonPatch>
</gml:polygonPatches>
</gml:PolyhedralSurface>]]>
			</programlisting>

	  </refsection>
  <refsection>
    <title>See Also</title>

    <para><xref linkend="ST_GeomFromGML" /></para>
  </refsection>
	</refentry>


	<refentry id="ST_AsHEXEWKB">
	  <refnamediv>
		<refname>ST_AsHEXEWKB</refname>

		<refpurpose>Returns a Geometry in HEXEWKB format (as text) using either
			little-endian (NDR) or big-endian (XDR) encoding.</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>text <function>ST_AsHEXEWKB</function></funcdef>
			<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			<paramdef><type>text </type> <parameter>NDRorXDR</parameter></paramdef>
		  </funcprototype>

		  <funcprototype>
			<funcdef>text <function>ST_AsHEXEWKB</function></funcdef>
			<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Returns a Geometry in HEXEWKB format (as text) using either
			little-endian (NDR) or big-endian (XDR) encoding.  If no encoding is specified, then NDR is used.</para>

		<note>
		  <para>Availability: 1.2.2</para>
		</note>
		<para>&Z_support;</para>
		<para>&curve_support;</para>
	  </refsection>

	  <refsection>
		<title>Examples</title>
		<programlisting>SELECT ST_AsHEXEWKB(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));
		which gives same answer as

		SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326)::text;

		st_ashexewkb
		--------
		0103000020E6100000010000000500
		00000000000000000000000000000000
		00000000000000000000000000000000F03F
		000000000000F03F000000000000F03F000000000000F03
		F000000000000000000000000000000000000000000000000</programlisting>
	  </refsection>
	</refentry>

	<refentry id="ST_AsKML">
	  <refnamediv>
		<refname>ST_AsKML</refname>

		<refpurpose>Return the geometry as a KML element. Several variants. Default version=2, default maxdecimaldigits=15</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
			<funcprototype>
				<funcdef>text <function>ST_AsKML</function></funcdef>
				<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>text <function>ST_AsKML</function></funcdef>
				<paramdef><type>geography </type> <parameter>geog</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>text <function>ST_AsKML</function></funcdef>
				<paramdef><type>integer </type> <parameter>version</parameter></paramdef>
				<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>text </type> <parameter>nprefix=NULL</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>text <function>ST_AsKML</function></funcdef>
				<paramdef><type>integer </type> <parameter>version</parameter></paramdef>
				<paramdef><type>geography </type> <parameter>geog</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>text </type> <parameter>nprefix=NULL</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Return the geometry as a Keyhole Markup Language (KML) element. There are several variants of this function.
			maximum number of decimal places used in
			output (defaults to 15), version default to 2 and default namespace is no prefix.</para>

		<para>Version 1: ST_AsKML(geom_or_geog, maxdecimaldigits) / version=2 / maxdecimaldigits=15 </para>
		<para>Version 2: ST_AsKML(version, geom_or_geog, maxdecimaldigits, nprefix) maxdecimaldigits=15 / nprefix=NULL </para>

		<note>
		  <para>Requires PostGIS be compiled with Proj support.  Use <xref linkend="PostGIS_Full_Version" /> to confirm you have proj support compiled in.</para>
		</note>

		<note>
		  <para>Availability: 1.2.2 - later variants that include version param came in 1.3.2</para>
		</note>
		<note>
		  <para>Enhanced: 2.0.0 - Add prefix namespace. Default is no prefix</para>
		</note>
		<note>
		  <para>Changed: 2.0.0 - uses default args and supports named args</para>
		</note>

		<note>
			<para>AsKML output will not work with geometries that do not have an SRID</para>
		</note>

		<para>&Z_support;</para>
	  </refsection>

	  <refsection>
		<title>Examples</title>
		<programlisting><![CDATA[SELECT ST_AsKML(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));

		st_askml
		--------
		<Polygon><outerBoundaryIs><LinearRing><coordinates>0,0 0,1 1,1 1,0 0,0</coordinates></LinearRing></outerBoundaryIs></Polygon>

		--3d linestring
		SELECT ST_AsKML('SRID=4326;LINESTRING(1 2 3, 4 5 6)');
		<LineString><coordinates>1,2,3 4,5,6</coordinates></LineString>
		]]>
		</programlisting>
	  </refsection>
	 <refsection>
		<title>See Also</title>

		<para><xref linkend="ST_AsSVG" />, <xref linkend="ST_AsGML" /></para>
	  </refsection>
	</refentry>

		<refentry id="ST_AsLatLonText">
		  <refnamediv>
			<refname>ST_AsLatLonText</refname>
			<refpurpose>Return the Degrees, Minutes, Seconds representation of the given point.</refpurpose>
		  </refnamediv>

		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>text <function>ST_AsLatLonText</function></funcdef>
				<paramdef><type>geometry </type> <parameter>pt</parameter></paramdef>
				<paramdef><type>text </type> <parameter>format=''</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>

		  <refsection>
			<title>Description</title>

			<para>Returns the Degrees, Minutes, Seconds representation of the point.</para>

			<note>
			  <para>It is assumed the point is in a lat/lon projection.  The X (lon) and Y (lat) coordinates are normalized in the output
				to the "normal" range (-180 to +180 for lon, -90 to +90 for lat).</para>
			</note>
				<para>
					The text parameter is a format string containing the format for the resulting text, similar to a date format string.  Valid tokens
					are "D" for degrees, "M" for minutes, "S" for seconds, and "C" for cardinal direction (NSEW).  DMS tokens may be repeated to indicate
					desired width and precision ("SSS.SSSS" means "  1.0023").
				</para>
				<para>
					"M", "S", and "C" are optional.  If "C" is omitted, degrees are
					shown with a "-" sign if south or west.  If "S" is omitted, minutes will be shown as decimal with as many digits of precision
					as you specify.  If "M" is also omitted, degrees are shown as decimal with as many digits precision as you specify.
				</para>
				<para>
					If the format string is omitted (or zero-length) a default format will be used.
				</para>
				<para>
			</para>

			<para>Availability: 2.0</para>
		  </refsection>


		  <refsection>
			<title>Examples</title>
<para>Default format.</para>
<programlisting>
SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)'));
      st_aslatlontext
----------------------------
 2°19'29.928"S 3°14'3.243"W
</programlisting>
<para>Providing a format (same as the default).</para>
<programlisting>
SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D°M''S.SSS"C'));
      st_aslatlontext
----------------------------
 2°19'29.928"S 3°14'3.243"W
</programlisting>
<para>Characters other than D, M, S, C and . are just passed through.</para>
<programlisting>
SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D degrees, M minutes, S seconds to the C'));
                                   st_aslatlontext
--------------------------------------------------------------------------------------
 2 degrees, 19 minutes, 30 seconds to the S 3 degrees, 14 minutes, 3 seconds to the W
</programlisting>
<para>Signed degrees instead of cardinal directions.</para>
<programlisting>
SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D°M''S.SSS"'));
      st_aslatlontext
----------------------------
 -2°19'29.928" -3°14'3.243"
</programlisting>
<para>Decimal degrees.</para>
<programlisting>
SELECT (ST_AsLatLonText('POINT (-3.2342342 -2.32498)', 'D.DDDD degrees C'));
          st_aslatlontext
-----------------------------------
 2.3250 degrees S 3.2342 degrees W
</programlisting>
<para>Excessively large values are normalized.</para>
<programlisting>
SELECT (ST_AsLatLonText('POINT (-302.2342342 -792.32498)'));
        st_aslatlontext
-------------------------------
 72°19'29.928"S 57°45'56.757"E
</programlisting>
		  </refsection>

		  <!-- Optionally add a "See Also" section -->
	</refentry>

	<refentry id="ST_AsSVG">
	  <refnamediv>
		<refname>ST_AsSVG</refname>

		<refpurpose>Returns a Geometry in SVG path data given a geometry or geography object.</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
			<funcprototype>
				<funcdef>text <function>ST_AsSVG</function></funcdef>
				<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>rel=0</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>text <function>ST_AsSVG</function></funcdef>
				<paramdef><type>geography </type> <parameter>geog</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>rel=0</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Return the geometry as Scalar Vector Graphics (SVG) path data. Use 1 as second
			argument to have the path data implemented in terms of relative
			moves, the default (or 0) uses absolute moves. Third argument may
			be used to reduce the maximum number of decimal digits used in
			output (defaults to 15). Point geometries will be rendered as
			cx/cy when 'rel' arg is 0, x/y when 'rel' is 1. Multipoint
			geometries are delimited by commas (","), GeometryCollection
			geometries are delimited by semicolons (";").</para>

		<note>
		  <para>Availability: 1.2.2. Availability: 1.4.0  Changed in PostGIS 1.4.0 to include L command in absolute path to conform to <ulink
			url="http://www.w3.org/TR/SVG/paths.html#PathDataBNF">http://www.w3.org/TR/SVG/paths.html#PathDataBNF</ulink></para>
		</note>
		<para>Changed: 2.0.0 to use default args and support named args</para>
	  </refsection>

	  <refsection>
		<title>Examples</title>
		<programlisting>SELECT ST_AsSVG(ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))',4326));

		st_assvg
		--------
		M 0 0 L 0 -1 1 -1 1 0 Z</programlisting>
	  </refsection>
	</refentry>
	<refentry id="ST_AsText">
		  <refnamediv>
			<refname>ST_AsText</refname>
			<refpurpose>Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.</refpurpose>
		  </refnamediv>

		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>text <function>ST_AsText</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>text <function>ST_AsText</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>text <function>ST_AsText</function></funcdef>
				<paramdef><type>geography </type> <parameter>g1</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>text <function>ST_AsText</function></funcdef>
				<paramdef><type>geography </type> <parameter>g1</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>

		  <refsection>
			<title>Description</title>

			<para>Returns the Well-Known Text representation of the geometry/geography. Optional argument may be used to reduce the maximum number
			of decimal digits after floating point used in output (defaults to 15).</para>

			<note>
			  <para>The WKT spec does not include the SRID.  To get the SRID as part of the data, use the non-standard
				PostGIS <xref linkend="ST_AsEWKT" /></para>
			</note>
			<para><inlinegraphic fileref="images/warning.png" />
				WKT format does not maintain precision so to prevent floating truncation, use ST_AsBinary or ST_AsEWKB format for transport.
			</para>
			<note>
			  <para>ST_AsText is the reverse of <xref linkend="ST_GeomFromText" />.  Use <xref linkend="ST_GeomFromText" /> to convert to a postgis geometry from ST_AsText representation.</para>
			</note>

			<para>Availability: 1.5 - support for geography was introduced.</para>
			<para>Enhanced: 2.5 - optional parameter precision introduced.</para>
			<para>&sfs_compliant; s2.1.1.1</para>
			<para>&sqlmm_compliant; SQL-MM 3: 5.1.25</para>
			<para>&curve_support;</para>
		  </refsection>

		  <refsection>
			<title>Examples</title>

			<programlisting>SELECT ST_AsText('01030000000100000005000000000000000000
000000000000000000000000000000000000000000000000
F03F000000000000F03F000000000000F03F000000000000F03
F000000000000000000000000000000000000000000000000');

		   st_astext
--------------------------------
 POLYGON((0 0,0 1,1 1,1 0,0 0))
(1 row)</programlisting>

			<para>Providing the precision is optional.</para>

			<programlisting>SELECT ST_AsText(GeomFromEWKT('SRID=4326;POINT(111.1111111 1.1111111)'))
          st_astext
------------------------------
 POINT(111.1111111 1.1111111)
(1 row)</programlisting>

			<programlisting>SELECT ST_AsText(GeomFromEWKT('SRID=4326;POINT(111.1111111 1.1111111)'),2)
st_astext
--------------------
POINT(111.11 1.11)
(1 row)</programlisting>
		  </refsection>

		  <!-- Optionally add a "See Also" section -->
		  <refsection>
			<title>See Also</title>

			<para><xref linkend="ST_AsBinary" />, <xref linkend="ST_AsEWKB" />, <xref linkend="ST_AsEWKT" />, <xref linkend="ST_GeomFromText" /></para>
		  </refsection>
	</refentry>

		<refentry id="ST_AsTWKB">
		  <refnamediv>
			<refname>ST_AsTWKB</refname>
			<refpurpose>Returns the geometry as TWKB, aka "Tiny Well-Known Binary"</refpurpose>
		  </refnamediv>

		  <refsynopsisdiv>
			<funcsynopsis>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsTWKB</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>decimaldigits_xy=0</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>decimaldigits_z=0</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>decimaldigits_m=0</parameter></paramdef>
				<paramdef><type>boolean </type> <parameter>include_sizes=false</parameter></paramdef>
				<paramdef><type>boolean </type> <parameter>include_bounding boxes=false</parameter></paramdef>
			  </funcprototype>
			  <funcprototype>
				<funcdef>bytea <function>ST_AsTWKB</function></funcdef>
				<paramdef><type>geometry[] </type> <parameter>geometries</parameter></paramdef>
				<paramdef><type>bigint[] </type> <parameter>unique_ids</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>decimaldigits_xy=0</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>decimaldigits_z=0</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>decimaldigits_m=0</parameter></paramdef>
				<paramdef><type>boolean </type> <parameter>include_sizes=false</parameter></paramdef>
				<paramdef><type>boolean </type> <parameter>include_bounding_boxes=false</parameter></paramdef>
			  </funcprototype>
			</funcsynopsis>
		  </refsynopsisdiv>
		  <refsection>
			<title>Description</title>
			<para>Returns the geometry in TWKB (Tiny Well-Known Binary) format. TWKB is a <ulink url="https://github.com/TWKB/Specification/blob/master/twkb.md">compressed binary format</ulink> with a focus on minimizing the size of the output. </para>
			<para>The decimal digits parameters control how much precision is stored in the output. By default, values are rounded to the nearest unit before encoding. If you want to transfer more precision, increase the number. For example, a value of 1 implies that the first digit to the right of the decimal point will be preserved.</para>
			<para>The sizes and bounding boxes parameters control whether optional information about the encoded length of the object and the bounds of the object are included in the output. By default they are not. Do not turn them on unless your client software has a use for them, as they just use up space (and saving space is the point of TWKB).</para>
			<para>The array-input form of the function is used to convert a collection of geometries and unique identifiers into a TWKB collection that preserves the identifiers. This is useful for clients that expect to unpack a collection and then access further information about the objects inside. You can create the arrays using the <ulink url="http://www.postgresql.org/docs/9.4/static/functions-aggregate.html">array_agg</ulink> function. The other parameters operate the same as for the simple form of the function.</para>
			<note>
			  <para>The format specification is available online at <ulink url="https://github.com/TWKB/Specification">https://github.com/TWKB/Specification</ulink>, and code for building a JavaScript client can be found at <ulink url="https://github.com/TWKB/twkb.js">https://github.com/TWKB/twkb.js</ulink>.</para>
			</note>

			<para>Enhanced: 2.4.0 memory and speed improvements.</para>
			<para>Availability: 2.2.0</para>
		  </refsection>


		  <refsection>
			<title>Examples</title>
<programlisting>
SELECT ST_AsTWKB('LINESTRING(1 1,5 5)'::geometry);
                 st_astwkb
--------------------------------------------
\x02000202020808

</programlisting>
<para>To create an aggregate TWKB object including identifiers aggregate the desired geometries and objects first, using "array_agg()", then call the appropriate TWKB function.
</para>
<programlisting>
SELECT ST_AsTWKB(array_agg(geom), array_agg(gid)) FROM mytable;
                 st_astwkb
--------------------------------------------
\x040402020400000202
</programlisting>

		  </refsection>

		  <refsection>
			<title>See Also</title>
			<para><xref linkend="ST_GeomFromTWKB" />, <xref linkend="ST_AsBinary" />, <xref linkend="ST_AsEWKB" />, <xref linkend="ST_AsEWKT" />, <xref linkend="ST_GeomFromText" /></para>
		  </refsection>
	</refentry>

	<refentry id="ST_AsX3D">
	  <refnamediv>
		<refname>ST_AsX3D</refname>

		<refpurpose>Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
	     <funcsynopsis>
	         <funcprototype>
				<funcdef>text <function>ST_AsX3D</function></funcdef>
				<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxdecimaldigits=15</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>options=0</parameter></paramdef>
			</funcprototype>
	    </funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Returns a geometry as an X3D xml formatted node element  <ulink url="http://www.web3d.org/standards/number/19776-1">http://www.web3d.org/standards/number/19776-1</ulink>.  If <varname>maxdecimaldigits</varname> (precision) is not specified then defaults to 15. </para>
		<note>
		    <para>There are various options for translating PostGIS geometries to X3D since X3D geometry types don't map directly to PostGIS geometry types and some newer X3D types that might be better mappings we have avoided since most rendering tools don't currently support them.
		        These are the mappings we have settled on.  Feel free to post a bug ticket if you have thoughts on the idea or ways we can allow people to denote their preferred mappings.</para>
		    <para>Below is how we currently map PostGIS 2D/3D types to X3D types</para>
		</note>

        <para>The 'options' argument is a bitfield. For PostGIS 2.2+, this is used to denote whether to represent coordinates with X3D GeoCoordinates Geospatial node and also whether to flip the x/y axis.  By default, <code>ST_AsX3D</code> outputs in database form (long,lat or X,Y), but X3D default of lat/lon, y/x may be preferred.</para>

        <itemizedlist>
            <listitem>
              <para>0: X/Y in database order (e.g. long/lat = X,Y is standard database order), default value, and non-spatial coordinates (just regular old Coordinate tag).</para>
            </listitem>

            <listitem>
              <para>1: Flip X and Y.  If used in conjunction with the GeoCoordinate option switch, then output will be default "latitude_first" and coordinates will be flipped as well.</para>
            </listitem>

            <listitem>
              <para>2: Output coordinates in GeoSpatial GeoCoordinates.  This option will throw an error if geometries are not in WGS 84 long lat (srid: 4326). This is currently the only GeoCoordinate type supported.  <ulink url="http://www.web3d.org/documents/specifications/19775-1/V3.2/Part01/components/geodata.html#Specifyingaspatialreference">Refer to X3D specs specifying a spatial reference system.</ulink>. Default output will be <code>GeoCoordinate geoSystem='"GD" "WE" "longitude_first"'</code>.  If
              you prefer the X3D default of  <code>GeoCoordinate geoSystem='"GD" "WE" "latitude_first"'</code> use <code>(2 + 1)</code> = <code>3</code> </para>
            </listitem>
        </itemizedlist>


		<informaltable>
				<tgroup cols="3">
					<thead>
					  <row>
						<entry>PostGIS Type</entry>
						<entry>2D X3D Type</entry>
						<entry>3D X3D Type</entry>
					  </row>
					</thead>
					<tbody>
					  <row>
						<entry>LINESTRING</entry>
						<entry>not yet implemented - will be PolyLine2D</entry>
						<entry>LineSet</entry>
					  </row>
					  <row>
						<entry>MULTILINESTRING</entry>
						<entry>not yet implemented - will be PolyLine2D</entry>
						<entry>IndexedLineSet</entry>
					  </row>
					  <row>
						<entry>MULTIPOINT</entry>
						<entry>Polypoint2D</entry>
						<entry>PointSet</entry>
					  </row>
					  <row>
						<entry>POINT</entry>
						<entry>outputs the space delimited coordinates</entry>
						<entry>outputs the space delimited coordinates</entry>
					  </row>
					  <row>
						<entry>(MULTI) POLYGON, POLYHEDRALSURFACE</entry>
						<entry>Invalid X3D markup</entry>
						<entry>IndexedFaceSet (inner rings currently output as another faceset)</entry>
					  </row>
					  <row>
						<entry>TIN</entry>
						<entry>TriangleSet2D (Not Yet Implemented)</entry>
						<entry>IndexedTriangleSet</entry>
					  </row>
				</tbody>
			</tgroup>
		</informaltable>
		<note><para>2D geometry support not yet complete.  Inner rings currently just drawn as separate polygons.  We are working on these.</para></note>
		<para>Lots of advancements happening in 3D space particularly with <ulink url="http://www.web3d.org/x3d/wiki/index.php/X3D_and_HTML5#Goals:_X3D_and_HTML5">X3D Integration with HTML5</ulink></para>
		<para>There is also a nice open source X3D viewer you can use to view rendered geometries. Free Wrl <ulink url="http://freewrl.sourceforge.net/">http://freewrl.sourceforge.net/</ulink> binaries available for Mac, Linux, and Windows. Use the FreeWRL_Launcher packaged to view the geometries.</para>
		<para>Also check out <ulink url="https://github.com/robe2/postgis_x3d_viewer">PostGIS minimalist X3D viewer</ulink>  that utilizes this function and <ulink url="http://www.x3dom.org/">x3dDom html/js open source toolkit</ulink>.</para>
		<para>Availability: 2.0.0: ISO-IEC-19776-1.2-X3DEncodings-XML</para>
		<para>Enhanced: 2.2.0: Support for GeoCoordinates and axis (x/y, long/lat) flipping.  Look at options for details.</para>
		<!-- Optionally mention 3d support -->
		<para>&Z_support;</para>
        <!-- Optionally mention supports Polyhedral Surface  -->
        <para>&P_support;</para>

        <!-- Optionally mention support for Triangles and TINS  -->
        <para>&T_support;</para>

	  </refsection>

	  <refsection>
		<title>Example: Create a fully functional X3D document - This will generate a cube that is viewable in FreeWrl and other X3D viewers.</title>
		<programlisting><![CDATA[SELECT '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN" "http://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D>
  <Scene>
    <Transform>
      <Shape>
       <Appearance>
            <Material emissiveColor=''0 0 1''/>
       </Appearance> ' ||
       ST_AsX3D( ST_GeomFromEWKT('POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),
((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),
((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),
((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )')) ||
      '</Shape>
    </Transform>
  </Scene>
</X3D>' As x3ddoc;]]>

		x3ddoc
		--------
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN" "http://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D>
  <Scene>
    <Transform>
      <Shape>
       <Appearance>
            <Material emissiveColor='0 0 1'/>
       </Appearance>
       <IndexedFaceSet  coordIndex='0 1 2 3 -1 4 5 6 7 -1 8 9 10 11 -1 12 13 14 15 -1 16 17 18 19 -1 20 21 22 23'>
            <Coordinate point='0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 0 1 1' />
      </IndexedFaceSet>
      </Shape>
    </Transform>
  </Scene>
</X3D>]]></programlisting>
	  </refsection>
	   <refsection>
		<title>Example: An Octagon elevated 3 Units and decimal precision of 6</title>
		<programlisting>SELECT ST_AsX3D(
ST_Translate(
    ST_Force_3d(
        ST_Buffer(ST_Point(10,10),5, 'quad_segs=2')), 0,0,
    3)
  ,6) As x3dfrag;

x3dfrag
--------
<![CDATA[<IndexedFaceSet coordIndex="0 1 2 3 4 5 6 7">
    <Coordinate point="15 10 3 13.535534 6.464466 3 10 5 3 6.464466 6.464466 3 5 10 3 6.464466 13.535534 3 10 15 3 13.535534 13.535534 3 " />
</IndexedFaceSet>]]></programlisting>
	  </refsection>
	  <refsection>
		<title>Example: TIN</title>
		<programlisting><![CDATA[SELECT ST_AsX3D(ST_GeomFromEWKT('TIN (((
                0 0 0,
                0 0 1,
                0 1 0,
                0 0 0
            )), ((
                0 0 0,
                0 1 0,
                1 1 0,
                0 0 0
            ))
            )')) As x3dfrag;]]>

		x3dfrag
		--------
<![CDATA[<IndexedTriangleSet  index='0 1 2 3 4 5'><Coordinate point='0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 1 0'/></IndexedTriangleSet>]]></programlisting>
	  </refsection>
	  <refsection>
		<title>Example: Closed multilinestring (the boundary of a polygon with holes)</title>
		<programlisting><![CDATA[SELECT ST_AsX3D(
		    ST_GeomFromEWKT('MULTILINESTRING((20 0 10,16 -12 10,0 -16 10,-12 -12 10,-20 0 10,-12 16 10,0 24 10,16 16 10,20 0 10),
  (12 0 10,8 8 10,0 12 10,-8 8 10,-8 0 10,-8 -4 10,0 -8 10,8 -4 10,12 0 10))')
) As x3dfrag;]]>

		x3dfrag
		--------
<![CDATA[<IndexedLineSet  coordIndex='0 1 2 3 4 5 6 7 0 -1 8 9 10 11 12 13 14 15 8'>
    <Coordinate point='20 0 10 16 -12 10 0 -16 10 -12 -12 10 -20 0 10 -12 16 10 0 24 10 16 16 10 12 0 10 8 8 10 0 12 10 -8 8 10 -8 0 10 -8 -4 10 0 -8 10 8 -4 10 ' />
 </IndexedLineSet>]]></programlisting>
	  </refsection>
	</refentry>

	<refentry id="ST_GeoHash">
	  <refnamediv>
		<refname>ST_GeoHash</refname>

		<refpurpose>Return a GeoHash representation of the geometry.</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
			<funcprototype>
				<funcdef>text <function>ST_GeoHash</function></funcdef>
				<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>maxchars=full_precision_of_point</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Return a GeoHash representation (<ulink url="http://en.wikipedia.org/wiki/Geohash">http://en.wikipedia.org/wiki/Geohash</ulink>) of the geometry. A GeoHash encodes a point into a text form that is sortable and searchable based on prefixing.  A shorter GeoHash is a less precise representation of a point.  It can also be thought of as a box, that contains the actual point.</para>

		<para>If no <varname>maxchars</varname> is specified ST_GeoHash returns a GeoHash based on full precision of the input geometry type. Points return a GeoHash with 20 characters of precision (about enough to hold the full double precision of the input). Other types return a GeoHash with a variable amount of precision, based on the size of the feature. Larger features are represented with less precision, smaller features with more precision. The idea is that the box implied by the GeoHash will always contain the input feature.</para>

		<para>If <varname>maxchars</varname> is specified ST_GeoHash returns a GeoHash with at most that many characters so a possibly lower precision representation of the input geometry. For non-points, the starting point of the calculation is the center of the bounding box of the geometry.</para>

		<para>Availability: 1.4.0</para>

		<note>
			<para>ST_GeoHash will not work with geometries that are not in geographic (lon/lat) coordinates.</para>
		</note>

		<para>&curve_support;</para>
	  </refsection>

	  <refsection>
		<title>Examples</title>
		<programlisting><![CDATA[SELECT ST_GeoHash(ST_SetSRID(ST_MakePoint(-126,48),4326));

	 st_geohash
----------------------
 c0w3hf1s70w3hf1s70w3

SELECT ST_GeoHash(ST_SetSRID(ST_MakePoint(-126,48),4326),5);

 st_geohash
------------
 c0w3h
		]]>
		</programlisting>
	  </refsection>
	 <refsection>
		<title>See Also</title>

		<para><xref linkend="ST_GeomFromGeoHash" /></para>
	  </refsection>
	</refentry>

	<refentry id="ST_AsGeobuf">
	  <refnamediv>
		<refname>ST_AsGeobuf</refname>

		<refpurpose>Return a Geobuf representation of a set of rows.</refpurpose>
	  </refnamediv>
	  <refsynopsisdiv>
		<funcsynopsis>
		<funcprototype>
				<funcdef>bytea <function>ST_AsGeobuf</function></funcdef>
				<paramdef><type>anyelement set </type> <parameter>row</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>bytea <function>ST_AsGeobuf</function></funcdef>
				<paramdef><type>anyelement </type> <parameter>row</parameter></paramdef>
				<paramdef><type>text </type> <parameter>geom_name</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>
			Return a Geobuf representation (<ulink url="https://github.com/mapbox/geobuf">https://github.com/mapbox/geobuf</ulink>) of a set of rows corresponding to a FeatureCollection.
			Every input geometry is analyzed to determine maximum precision for optimal storage.
			Note that Geobuf in its current form cannot be streamed so the full output will be assembled in memory.
		</para>

		<para><varname>row</varname> row data with at least a geometry column.</para>
		<para><varname>geom_name</varname> is the name of the geometry column in the row data. If NULL it will default to the first found geometry column.</para>

		<para>Availability: 2.4.0</para>
	  </refsection>

	  <refsection>
		<title>Examples</title>
		<programlisting><![CDATA[SELECT encode(ST_AsGeobuf(q, 'geom'), 'base64')
    FROM (SELECT ST_GeomFromText('POLYGON((0 0,0 1,1 1,1 0,0 0))') AS geom) AS q;
 st_asgeobuf
----------------------------------
 GAAiEAoOCgwIBBoIAAAAAgIAAAE=

		]]>
		</programlisting>
	  </refsection>
	</refentry>

	<refentry id="ST_AsMVTGeom">
	  <refnamediv>
		<refname>ST_AsMVTGeom</refname>

		<refpurpose>Transform a geometry into the coordinate space of a <ulink url="https://www.mapbox.com/vector-tiles/">Mapbox Vector Tile</ulink>.</refpurpose>
	  </refnamediv>
	  <refsynopsisdiv>
		<funcsynopsis>
			<funcprototype>
				<funcdef>geometry <function>ST_AsMVTGeom</function></funcdef>
				<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>
				<paramdef><type>box2d </type> <parameter>bounds</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>extent=4096</parameter></paramdef>
				<paramdef choice="opt"><type>integer </type> <parameter>buffer=256</parameter></paramdef>
				<paramdef choice="opt"><type>boolean </type> <parameter>clip_geom=true</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Transform a geometry into the coordinate space of a <ulink url="https://www.mapbox.com/vector-tiles/">Mapbox Vector Tile</ulink> of a set of rows corresponding to a Layer.
		Makes best effort to keep and even correct validity and might collapse geometry into a lower dimension in the process.
		</para>

		<para><varname>geom</varname> is the geometry to transform.</para>
		<para><varname>bounds</varname> is the geometric bounds of the tile contents without buffer.</para>
		<para><varname>extent</varname> is the tile extent in tile coordinate space as defined by the <ulink url="https://www.mapbox.com/vector-tiles/specification/">specification</ulink>. If NULL it will default to 4096.</para>
		<para><varname>buffer</varname> is the buffer distance in tile coordinate space to optionally clip geometries. If NULL it will default to 256.</para>
		<para><varname>clip_geom</varname> is a boolean to control if geometries should be clipped or encoded as is. If NULL it will default to true.</para>

		<para>Availability: 2.4.0</para>
	  </refsection>

	  <refsection>
		<title>Examples</title>
		<programlisting><![CDATA[SELECT ST_AsText(ST_AsMVTGeom(
	ST_GeomFromText('POLYGON ((0 0, 10 0, 10 5, 0 -5, 0 0))'),
	ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)),
	4096, 0, false));
                              st_astext
--------------------------------------------------------------------
 MULTIPOLYGON(((5 4096,10 4096,10 4091,5 4096)),((5 4096,0 4096,0 4101,5 4096)))

		]]>
		</programlisting>
	  </refsection>
	</refentry>

	<refentry id="ST_AsMVT">
	  <refnamediv>
		<refname>ST_AsMVT</refname>

		<refpurpose>Return a <ulink url="https://www.mapbox.com/vector-tiles/">Mapbox Vector Tile</ulink> representation of a set of rows.</refpurpose>
	  </refnamediv>
	  <refsynopsisdiv>
		<funcsynopsis>
		<funcprototype>
				<funcdef>bytea <function>ST_AsMVT</function></funcdef>
				<paramdef><type>anyelement set </type> <parameter>row</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>bytea <function>ST_AsMVT</function></funcdef>
				<paramdef><type>anyelement </type> <parameter>row</parameter></paramdef>
				<paramdef><type>text </type> <parameter>name</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>bytea <function>ST_AsMVT</function></funcdef>
				<paramdef><type>anyelement </type> <parameter>row</parameter></paramdef>
				<paramdef><type>text </type> <parameter>name</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>extent</parameter></paramdef>
			</funcprototype>
			<funcprototype>
				<funcdef>bytea <function>ST_AsMVT</function></funcdef>
				<paramdef><type>anyelement </type> <parameter>row</parameter></paramdef>
				<paramdef><type>text </type> <parameter>name</parameter></paramdef>
				<paramdef><type>integer </type> <parameter>extent</parameter></paramdef>
				<paramdef><type>text </type> <parameter>geom_name</parameter></paramdef>
			</funcprototype>
		        <funcprototype>
                                <funcdef>bytea <function>ST_AsMVT</function></funcdef>
                                <paramdef><type>anyelement </type> <parameter>row</parameter></paramdef>
                                <paramdef><type>text </type> <parameter>name</parameter></paramdef>
                                <paramdef><type>integer </type> <parameter>extent</parameter></paramdef>
				<paramdef><type>text </type> <parameter>geom_name</parameter></paramdef>
				<paramdef><type>text </type> <parameter>feature_id_name</parameter></paramdef>
                        </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Return a <ulink url="https://www.mapbox.com/vector-tiles/">Mapbox Vector Tile</ulink> representation of a set of rows corresponding to a Layer.
		Multiple calls can be concatenated to a tile with multiple Layers.
		Geometry is assumed to be in tile coordinate space and valid as per <ulink url="https://www.mapbox.com/vector-tiles/specification/">specification</ulink>.
		Typically <xref linkend="ST_AsMVTGeom" /> can be used to transform geometry into tile coordinate space.
		Other row data will be encoded as attributes.
		</para>

		<para>The <ulink url="https://www.mapbox.com/vector-tiles/">Mapbox Vector Tile</ulink> format can store features with a different
		set of attributes per feature. To make use of this feature supply a JSONB column in the row data containing Json objects one level
		deep. The keys and values in the object will be parsed into feature attributes.
		</para>

		<important>
			<para>Do not call with a <varname>GEOMETRYCOLLECTION</varname> as an element in the row. However you can use <xref linkend="ST_AsMVTGeom" /> to prep a geometry collection for inclusion.</para>
		</important>

	  <para><varname>row</varname> row data with at least a geometry column.</para>
		<para><varname>name</varname> is the name of the Layer. If NULL it will use the string "default".</para>
		<para><varname>extent</varname> is the tile extent in screen space as defined by the specification. If NULL it will default to 4096.</para>
		<para><varname>geom_name</varname> is the name of the geometry column in the row data. If NULL it will default to the first found geometry column.</para>
		<para><varname>feature_id_name</varname> is the name of the Feature ID column in the row data. If NULL or negative the Feature ID is not set. The first column matching name and valid type (smallint, integer, bigint) will be used as Feature ID, and any subsequent column will be added as a property. JSON properties are not supported.</para>


	    <para>Enhanced: 3.0 - added support for Feature ID.</para>
	    <para>Enhanced: 2.5.0 - added support parallel query.</para>
		<para>Availability: 2.4.0</para>
	  </refsection>

	  <refsection>
		<title>Examples</title>
		<programlisting><![CDATA[SELECT ST_AsMVT(q, 'test', 4096, 'geom') FROM (SELECT 1 AS c1,
    ST_AsMVTGeom(ST_GeomFromText('POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10), (20 30, 35 35, 30 20, 20 30))'),
    ST_MakeBox2D(ST_Point(0, 0), ST_Point(4096, 4096)), 4096, 0, false) AS geom) AS q;
                              st_asmvt
--------------------------------------------------------------------
 \x1a320a0474657374121d12020000180322150946ec3f1a14453b0a09280f091413121e09091e0f1a026331220228012880207802

		]]>
		</programlisting>
	  </refsection>

		<refsection>
			<title>See Also</title>
				<para>
					<xref linkend="ST_AsMVTGeom" />
				</para>
		  </refsection>
	</refentry>

  </sect1>
