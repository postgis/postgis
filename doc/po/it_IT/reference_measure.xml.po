# SOME DESCRIPTIVE TITLE.
#
# Translators:
# pibinko <pibinko@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: PostGIS\n"
"Report-Msgid-Bugs-To: https://bugs.kde.org\n"
"POT-Creation-Date: 2020-02-01 19:38+0000\n"
"PO-Revision-Date: 2015-09-29 12:24+0000\n"
"Last-Translator: Sandro Santilli <strk@kbt.io>\n"
"Language-Team: Italian (Italy) (http://www.transifex.com/postgis/postgis/"
"language/it_IT/)\n"
"Language: it_IT\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#. Tag: para
#: reference_measure.xml:5
#, no-c-format
msgid ""
"These functions compute measurements of distance, area and angles. There are "
"also functions to compute geometry values determined by measurements."
msgstr ""

#. Tag: title
#: reference_measure.xml:10
#, no-c-format
msgid "Measurement Functions"
msgstr ""

#. Tag: refname
#: reference_measure.xml:14
#, no-c-format
msgid "ST_Area"
msgstr "ST_Area"

#. Tag: refpurpose
#: reference_measure.xml:16
#, no-c-format
msgid "Returns the area of a polygonal geometry."
msgstr ""

#. Tag: funcsynopsis
#: reference_measure.xml:20
#, no-c-format
msgid ""
"<funcprototype> <funcdef>float <function>ST_Area</function></funcdef> "
"<paramdef><type>geometry </type><parameter>g1</parameter></paramdef> </"
"funcprototype> <funcprototype> <funcdef>float <function>ST_Area</function></"
"funcdef> <paramdef><type>geography </type><parameter>geog</parameter></"
"paramdef> <paramdef choice=\"opt\"><type>boolean </"
"type><parameter>use_spheroid=true</parameter></paramdef> </funcprototype>"
msgstr ""

#. Tag: title
#: reference_measure.xml:34 reference_measure.xml:97 reference_measure.xml:173
#: reference_measure.xml:217 reference_measure.xml:291
#: reference_measure.xml:372 reference_measure.xml:448
#: reference_measure.xml:497 reference_measure.xml:544
#: reference_measure.xml:600 reference_measure.xml:672
#: reference_measure.xml:737 reference_measure.xml:794
#: reference_measure.xml:826 reference_measure.xml:869
#: reference_measure.xml:923 reference_measure.xml:1017
#: reference_measure.xml:1084 reference_measure.xml:1131
#: reference_measure.xml:1173 reference_measure.xml:1247
#: reference_measure.xml:1294 reference_measure.xml:1345
#: reference_measure.xml:1380 reference_measure.xml:1426
#: reference_measure.xml:1482 reference_measure.xml:1559
#, no-c-format
msgid "Description"
msgstr "Descrizione"

#. Tag: para
#: reference_measure.xml:36
#, no-c-format
msgid ""
"Returns the area of a polygonal geometry. For geometry types a 2D Cartesian "
"(planar) area is computed, with units specified by the SRID. For geography "
"types by default area is determined on a spheroid with units in square "
"meters. To compute the area using the faster but less accurate spherical "
"model use <varname>ST_Area(geog,false)</varname>."
msgstr ""

#. Tag: para
#: reference_measure.xml:41
#, no-c-format
msgid "Enhanced: 2.0.0 - support for 2D polyhedral surfaces was introduced."
msgstr ""

#. Tag: para
#: reference_measure.xml:42 reference_measure.xml:389
#, no-c-format
msgid ""
"Enhanced: 2.2.0 - measurement on spheroid performed with GeographicLib for "
"improved accuracy and robustness. Requires Proj &gt;= 4.9.0 to take "
"advantage of the new feature."
msgstr ""

#. Tag: para
#: reference_measure.xml:43 reference_measure.xml:390
#, no-c-format
msgid "Changed: 3.0.0 - does not depend on SFCGAL anymore."
msgstr ""

#. Tag: para
#: reference_measure.xml:44 reference_measure.xml:382
#, no-c-format
msgid "&sfs_compliant;"
msgstr "&sfs_compliant;"

#. Tag: para
#: reference_measure.xml:45
#, no-c-format
msgid "&sqlmm_compliant; SQL-MM 3: 8.1.2, 9.5.3"
msgstr "&sqlmm_compliant; SQL-MM 3: 8.1.2, 9.5.3"

#. Tag: para
#: reference_measure.xml:46 reference_measure.xml:298 reference_measure.xml:455
#: reference_measure.xml:1029 reference_measure.xml:1138
#: reference_measure.xml:1575
#, no-c-format
msgid "&P_support;"
msgstr "&P_support;"

#. Tag: para
#: reference_measure.xml:47
#, no-c-format
msgid ""
"For polyhedral surfaces, only supports 2D polyhedral surfaces (not 2.5D). "
"For 2.5D, may give a non-zero answer, but only for the faces that sit "
"completely in XY plane."
msgstr ""

#. Tag: title
#: reference_measure.xml:52 reference_measure.xml:113 reference_measure.xml:188
#: reference_measure.xml:227 reference_measure.xml:304
#: reference_measure.xml:464 reference_measure.xml:511
#: reference_measure.xml:561 reference_measure.xml:626
#: reference_measure.xml:701 reference_measure.xml:836
#: reference_measure.xml:886 reference_measure.xml:936
#: reference_measure.xml:1033 reference_measure.xml:1096
#: reference_measure.xml:1145 reference_measure.xml:1214
#: reference_measure.xml:1259 reference_measure.xml:1390
#: reference_measure.xml:1498 reference_measure.xml:1579
#, no-c-format
msgid "Examples"
msgstr "Esempi"

#. Tag: para
#: reference_measure.xml:53
#, no-c-format
msgid ""
"Return area in square feet for a plot of Massachusetts land and multiply by "
"conversion to get square meters. Note this is in square feet because "
"EPSG:2249 is Massachusetts State Plane Feet"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:56
#, no-c-format
msgid ""
"select ST_Area(geom) sqft,\n"
"    ST_Area(geom) * 0.3048 ^ 2 sqm\n"
"from (\n"
"         select 'SRID=2249;POLYGON((743238 2967416,743238 2967450,\n"
"                                 743265 2967450,743265.625 2967416,743238 "
"2967416))' :: geometry geom\n"
"     ) subquery;\n"
"┌─────────┬─────────────┐\n"
"│  sqft   │     sqm     │\n"
"├─────────┼─────────────┤\n"
"│ 928.625 │ 86.27208552 │\n"
"└─────────┴─────────────┘"
msgstr ""

#. Tag: para
#: reference_measure.xml:57
#, no-c-format
msgid ""
"Return area square feet and transform to Massachusetts state plane meters "
"(EPSG:26986) to get square meters. Note this is in square feet because 2249 "
"is Massachusetts State Plane Feet and transformed area is in square meters "
"since EPSG:26986 is state plane Massachusetts meters"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:60
#, no-c-format
msgid ""
"select ST_Area(geom) sqft,\n"
"    ST_Area(ST_Transform(geom, 26986)) As sqm\n"
"from (\n"
"         select\n"
"             'SRID=2249;POLYGON((743238 2967416,743238 2967450,\n"
"             743265 2967450,743265.625 2967416,743238 2967416))' :: geometry "
"geom\n"
"     ) subquery;\n"
"┌─────────┬─────────────────┐\n"
"│  sqft   │       sqm       │\n"
"├─────────┼─────────────────┤\n"
"│ 928.625 │ 86.272430607008 │\n"
"└─────────┴─────────────────┘"
msgstr ""

#. Tag: para
#: reference_measure.xml:62
#, no-c-format
msgid ""
"Return area square feet and square meters using geography data type. Note "
"that we transform to our geometry to geography (before you can do that make "
"sure your geometry is in WGS 84 long lat 4326). Geography always measures in "
"meters. This is just for demonstration to compare. Normally your table will "
"be stored in geography data type already."
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:65
#, no-c-format
msgid ""
"select ST_Area(geog) / 0.3048 ^ 2 sqft_spheroid,\n"
"    ST_Area(geog, false) / 0.3048 ^ 2 sqft_sphere,\n"
"    ST_Area(geog) sqm_spheroid\n"
"from (\n"
"         select ST_Transform(\n"
"                    'SRID=2249;POLYGON((743238 2967416,743238 2967450,743265 "
"2967450,743265.625 2967416,743238 2967416))'::geometry,\n"
"                    4326\n"
"             ) :: geography geog\n"
"     ) as subquery;\n"
"┌──────────────────┬──────────────────┬──────────────────┐\n"
"│  sqft_spheroid   │   sqft_sphere    │   sqm_spheroid   │\n"
"├──────────────────┼──────────────────┼──────────────────┤\n"
"│ 928.684405784452 │ 927.049336105925 │ 86.2776044979692 │\n"
"└──────────────────┴──────────────────┴──────────────────┘"
msgstr ""

#. Tag: para
#: reference_measure.xml:67
#, no-c-format
msgid "If your data is in geography already:"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:68
#, no-c-format
msgid ""
"select ST_Area(geog) / 0.3048 ^ 2 sqft,\n"
"    ST_Area(the_geog) sqm\n"
"from somegeogtable;"
msgstr ""

#. Tag: title
#: reference_measure.xml:71 reference_measure.xml:144 reference_measure.xml:262
#: reference_measure.xml:330 reference_measure.xml:419
#: reference_measure.xml:471 reference_measure.xml:518
#: reference_measure.xml:568 reference_measure.xml:632
#: reference_measure.xml:711 reference_measure.xml:772
#: reference_measure.xml:803 reference_measure.xml:845
#: reference_measure.xml:893 reference_measure.xml:989
#: reference_measure.xml:1059 reference_measure.xml:1104
#: reference_measure.xml:1151 reference_measure.xml:1220
#: reference_measure.xml:1264 reference_measure.xml:1322
#: reference_measure.xml:1357 reference_measure.xml:1397
#: reference_measure.xml:1453 reference_measure.xml:1532
#: reference_measure.xml:1605
#, no-c-format
msgid "See Also"
msgstr "Si veda anche"

#. Tag: para
#: reference_measure.xml:72
#, fuzzy, no-c-format
msgid ""
", <xref linkend=\"ST_GeomFromText\"/>, <xref linkend=\"ST_GeographyFromText"
"\"/>, <xref linkend=\"ST_SetSRID\"/>, <xref linkend=\"ST_Transform\"/>"
msgstr ""
", <xref linkend=\"ST_GeomFromEWKT\"/>, <xref linkend=\"ST_Length_Spheroid\"/"
">, <xref linkend=\"ST_Perimeter\"/>, <xref linkend=\"ST_Transform\"/>"

#. Tag: refname
#: reference_measure.xml:78
#, no-c-format
msgid "ST_Azimuth"
msgstr "ST_Azimuth"

#. Tag: refpurpose
#: reference_measure.xml:80
#, no-c-format
msgid ""
"Returns the north-based azimuth as the angle in radians measured clockwise "
"from the vertical on pointA to pointB."
msgstr ""

#. Tag: funcsynopsis
#: reference_measure.xml:83
#, no-c-format
msgid ""
"<funcprototype> <funcdef>float <function>ST_Azimuth</function></funcdef> "
"<paramdef><type>geometry </type><parameter>pointA</parameter></paramdef> "
"<paramdef><type>geometry </type><parameter>pointB</parameter></paramdef> </"
"funcprototype> <funcprototype> <funcdef>float <function>ST_Azimuth</"
"function></funcdef> <paramdef><type>geography </type><parameter>pointA</"
"parameter></paramdef> <paramdef><type>geography </type><parameter>pointB</"
"parameter></paramdef> </funcprototype>"
msgstr ""
"<funcprototype> <funcdef>float <function>ST_Azimuth</function></funcdef> "
"<paramdef><type>geometry </type><parameter>pointA</parameter></paramdef> "
"<paramdef><type>geometry </type><parameter>pointB</parameter></paramdef> </"
"funcprototype> <funcprototype> <funcdef>float <function>ST_Azimuth</"
"function></funcdef> <paramdef><type>geography </type><parameter>pointA</"
"parameter></paramdef> <paramdef><type>geography </type><parameter>pointB</"
"parameter></paramdef> </funcprototype>"

#. Tag: para
#: reference_measure.xml:99
#, no-c-format
msgid ""
"Returns the azimuth in radians of the segment defined by the given point "
"geometries, or NULL if the two points are coincident. The azimuth is angle "
"is referenced from north, and is positive clockwise: North = 0; East = "
"&#x03C0;/2; South = &#x03C0;; West = 3&#x03C0;/2."
msgstr ""

#. Tag: para
#: reference_measure.xml:101
#, no-c-format
msgid ""
"For the geography type, the forward azimuth is solved as part of the inverse "
"geodesic problem."
msgstr ""

#. Tag: para
#: reference_measure.xml:102
#, no-c-format
msgid ""
"The azimuth is mathematical concept defined as the angle between a reference "
"plane and a point, with angular units in radians. Units can be converted to "
"degrees using a built-in PostgreSQL function degrees(), as shown in the "
"example."
msgstr ""

#. Tag: para
#: reference_measure.xml:105
#, no-c-format
msgid "Availability: 1.1.0"
msgstr "Disponibilità: 1.1.0"

#. Tag: para
#: reference_measure.xml:106
#, no-c-format
msgid "Enhanced: 2.0.0 support for geography was introduced."
msgstr ""

#. Tag: para
#: reference_measure.xml:107
#, no-c-format
msgid ""
"Enhanced: 2.2.0 measurement on spheroid performed with GeographicLib for "
"improved accuracy and robustness. Requires Proj &gt;= 4.9.0 to take "
"advantage of the new feature."
msgstr ""

#. Tag: para
#: reference_measure.xml:108
#, no-c-format
msgid ""
"Azimuth is especially useful in conjunction with ST_Translate for shifting "
"an object along its perpendicular axis. See upgis_lineshift <ulink url="
"\"http://trac.osgeo.org/postgis/wiki/UsersWikiplpgsqlfunctions"
"\">Plpgsqlfunctions PostGIS wiki section</ulink> for example of this."
msgstr ""

#. Tag: para
#: reference_measure.xml:114 reference_measure.xml:189
#, no-c-format
msgid "Geometry Azimuth in degrees"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:115
#, no-c-format
msgid ""
"SELECT degrees(ST_Azimuth(ST_Point(25, 45), ST_Point(75, 100))) AS degA_B,\n"
"            degrees(ST_Azimuth(ST_Point(75, 100), ST_Point(25, 45))) AS "
"degB_A;\n"
"\n"
"      dega_b       |     degb_a\n"
"------------------+------------------\n"
" 42.2736890060937 | 222.273689006094"
msgstr ""

#. Tag: para
#: reference_measure.xml:125
#, no-c-format
msgid ""
"Green: the start Point(25,45) with its vertical. Yellow: degA_B as the path "
"to travel (azimuth)."
msgstr ""

#. Tag: para
#: reference_measure.xml:134
#, no-c-format
msgid ""
"Green: the start Point(75,100) with its vertical. Yellow: degB_A as the path "
"to travel (azimuth)."
msgstr ""

#. Tag: para
#: reference_measure.xml:145
#, no-c-format
msgid ""
", <xref linkend=\"ST_Translate\"/>, <xref linkend=\"ST_Project\"/>, <ulink "
"url=\"http://www.postgresql.org/docs/current/interactive/functions-math.html"
"\">PostgreSQL Math Functions</ulink>"
msgstr ""

#. Tag: refname
#: reference_measure.xml:152
#, fuzzy, no-c-format
msgid "ST_Angle"
msgstr "ST_Area"

#. Tag: refpurpose
#: reference_measure.xml:154
#, no-c-format
msgid ""
"Returns the angle between 3 points, or between 2 vectors (4 points or 2 "
"lines)."
msgstr ""

#. Tag: funcsynopsis
#: reference_measure.xml:157
#, fuzzy, no-c-format
msgid ""
"<funcprototype> <funcdef>float <function>ST_Angle</function></funcdef> "
"<paramdef><type>geometry </type><parameter>point1</parameter></paramdef> "
"<paramdef><type>geometry </type><parameter>point2</parameter></paramdef> "
"<paramdef><type>geometry </type><parameter>point3</parameter></paramdef> "
"<paramdef choice=\"opt\"><type>geometry </type><parameter>point4</"
"parameter></paramdef> </funcprototype> <funcprototype> <funcdef>float "
"<function>ST_Angle</function></funcdef> <paramdef><type>geometry </"
"type><parameter>line1</parameter></paramdef> <paramdef><type>geometry </"
"type><parameter>line2</parameter></paramdef> </funcprototype>"
msgstr ""
"<funcprototype> <funcdef>float <function>ST_Azimuth</function></funcdef> "
"<paramdef><type>geometry </type><parameter>pointA</parameter></paramdef> "
"<paramdef><type>geometry </type><parameter>pointB</parameter></paramdef> </"
"funcprototype> <funcprototype> <funcdef>float <function>ST_Azimuth</"
"function></funcdef> <paramdef><type>geography </type><parameter>pointA</"
"parameter></paramdef> <paramdef><type>geography </type><parameter>pointB</"
"parameter></paramdef> </funcprototype>"

#. Tag: para
#: reference_measure.xml:175
#, no-c-format
msgid ""
"For 3 points, computes the angle measured clockwise of P1P2P3. If input are "
"2 lines, get first and last point of the lines as 4 points. For 4 points,"
"compute the angle measured clockwise of P1P2,P3P4. Results are always "
"positive, between 0 and 2*Pi radians. Uses azimuth of pairs or points."
msgstr ""

#. Tag: para
#: reference_measure.xml:182
#, no-c-format
msgid "ST_Angle(P1,P2,P3) = ST_Angle(P2,P1,P2,P3)"
msgstr ""

#. Tag: para
#: reference_measure.xml:183
#, no-c-format
msgid ""
"Result is in radian and can be converted to degrees using a built-in "
"PostgreSQL function degrees(), as shown in the example."
msgstr ""

#. Tag: para
#: reference_measure.xml:184
#, fuzzy, no-c-format
msgid "Availability: 2.5.0"
msgstr "Disponibilità: 2.0"

#. Tag: programlisting
#: reference_measure.xml:190
#, no-c-format
msgid ""
"WITH rand AS (\n"
"                SELECT s, random() * 2 * PI() AS rad1\n"
"                        , random() * 2 * PI() AS rad2\n"
"                FROM  generate_series(1,2,2) AS s\n"
"        )\n"
"         , points AS (\n"
"                SELECT s, rad1,rad2, ST_MakePoint(cos1+s,sin1+s) as p1, "
"ST_MakePoint(s,s) AS p2, ST_MakePoint(cos2+s,sin2+s) as p3\n"
"                FROM rand\n"
"                        ,cos(rad1) cos1, sin(rad1) sin1\n"
"                        ,cos(rad2) cos2, sin(rad2) sin2\n"
"        )\n"
"        SELECT s, ST_AsText(ST_SnapToGrid(ST_MakeLine(ARRAY[p1,p2,"
"p3]),0.001)) AS line\n"
"                , degrees(ST_Angle(p1,p2,p3)) as computed_angle\n"
"                , round(degrees(2*PI()-rad2 -2*PI()+rad1+2*PI()))::int%360 "
"AS reference\n"
"                , round(degrees(2*PI()-rad2 -2*PI()+rad1+2*PI()))::int%360 "
"AS reference\n"
"        FROM points ;\n"
"\n"
"1 | line | computed_angle | reference\n"
"------------------+------------------\n"
"1 | LINESTRING(1.511 1.86,1 1,0.896 0.005) | 155.27033848688 | 155"
msgstr ""

#. Tag: refname
#: reference_measure.xml:196
#, no-c-format
msgid "ST_ClosestPoint"
msgstr "ST_ClosestPoint"

#. Tag: refpurpose
#: reference_measure.xml:198
#, no-c-format
msgid ""
"Returns the 2D point on g1 that is closest to g2. This is the first point of "
"the shortest line."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:204
#, no-c-format
msgid ""
"<funcdef>geometry <function>ST_ClosestPoint</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_ClosestPoint</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:219
#, no-c-format
msgid ""
"Returns the 2-dimensional point on g1 that is closest to g2. This is the "
"first point of the shortest line."
msgstr ""

#. Tag: para
#: reference_measure.xml:222
#, no-c-format
msgid ""
"If you have a 3D Geometry, you may prefer to use <xref linkend="
"\"ST_3DClosestPoint\"/>."
msgstr ""

#. Tag: para
#: reference_measure.xml:223 reference_measure.xml:696
#: reference_measure.xml:931 reference_measure.xml:1093
#: reference_measure.xml:1494
#, no-c-format
msgid "Availability: 1.5.0"
msgstr "Disponibilità: 1.5.0"

#. Tag: para
#: reference_measure.xml:237
#, no-c-format
msgid ""
"Closest between point and linestring is the point itself, but closest point "
"between a linestring and point is the point on line string that is closest."
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:241
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsText(ST_ClosestPoint(pt,line)) AS cp_pt_line,\n"
"        ST_AsText(ST_ClosestPoint(line,pt)) As cp_line_pt\n"
"FROM (SELECT 'POINT(100 100)'::geometry As pt,\n"
"                'LINESTRING (20 80, 98 190, 110 180, 50 75 )'::geometry As "
"line\n"
"        ) As foo;\n"
"\n"
"\n"
"   cp_pt_line   |                cp_line_pt\n"
"----------------+------------------------------------------\n"
" POINT(100 100) | POINT(73.0769230769231 115.384615384615)"
msgstr ""
"SELECT ST_AsText(ST_ClosestPoint(pt,line)) AS cp_pt_line, \n"
"        ST_AsText(ST_ClosestPoint(line,pt)) As cp_line_pt\n"
"FROM (SELECT 'POINT(100 100)'::geometry As pt, \n"
"                'LINESTRING (20 80, 98 190, 110 180, 50 75 )'::geometry As "
"line\n"
"        ) As foo;\n"
"\n"
"        \n"
"   cp_pt_line   |                cp_line_pt\n"
"----------------+------------------------------------------\n"
" POINT(100 100) | POINT(73.0769230769231 115.384615384615)"

#. Tag: para
#: reference_measure.xml:249
#, no-c-format
msgid "closest point on polygon A to polygon B"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:252
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsText(\n"
"                ST_ClosestPoint(\n"
"                        ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 "
"100, 175 150))'),\n"
"                        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
"                        )\n"
"                ) As ptwkt;\n"
"\n"
"                  ptwkt\n"
"------------------------------------------\n"
" POINT(140.752120669087 125.695053378061)"
msgstr ""
"SELECT ST_AsText(\n"
"                ST_ClosestPoint(\n"
"                        ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 "
"100, 175 150))'),\n"
"                        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
"                        ) \n"
"                ) As ptwkt;\n"
"                \n"
"                  ptwkt\n"
"------------------------------------------\n"
" POINT(140.752120669087 125.695053378061)"

#. Tag: para
#: reference_measure.xml:264
#, no-c-format
msgid ""
",<xref linkend=\"ST_Distance\"/>, <xref linkend=\"ST_LongestLine\"/>, <xref "
"linkend=\"ST_ShortestLine\"/>, <xref linkend=\"ST_MaxDistance\"/>"
msgstr ""
",<xref linkend=\"ST_Distance\"/>, <xref linkend=\"ST_LongestLine\"/>, <xref "
"linkend=\"ST_ShortestLine\"/>, <xref linkend=\"ST_MaxDistance\"/>"

#. Tag: refname
#: reference_measure.xml:270
#, no-c-format
msgid "ST_3DClosestPoint"
msgstr "ST_3DClosestPoint"

#. Tag: refpurpose
#: reference_measure.xml:272
#, no-c-format
msgid ""
"Returns the 3D point on g1 that is closest to g2. This is the first point of "
"the 3D shortest line."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:278
#, no-c-format
msgid ""
"<funcdef>geometry <function>ST_3DClosestPoint</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_3DClosestPoint</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:293
#, no-c-format
msgid ""
"Returns the 3-dimensional point on g1 that is closest to g2. This is the "
"first point of the 3D shortest line. The 3D length of the 3D shortest line "
"is the 3D distance."
msgstr ""

#. Tag: para
#: reference_measure.xml:296 reference_measure.xml:453
#: reference_measure.xml:830 reference_measure.xml:882
#: reference_measure.xml:1027 reference_measure.xml:1136
#: reference_measure.xml:1384 reference_measure.xml:1573
#, no-c-format
msgid "&Z_support;"
msgstr "&Z_support;"

#. Tag: para
#: reference_measure.xml:299 reference_measure.xml:458
#: reference_measure.xml:1025 reference_measure.xml:1140
#: reference_measure.xml:1441 reference_measure.xml:1571
#, no-c-format
msgid "Availability: 2.0.0"
msgstr "Disponibilità: 2.0"

#. Tag: para
#: reference_measure.xml:300 reference_measure.xml:1026
#: reference_measure.xml:1572
#, no-c-format
msgid ""
"Changed: 2.2.0 - if 2 2D geometries are input, a 2D point is returned "
"(instead of old behavior assuming 0 for missing Z). In case of 2D and 3D, Z "
"is no longer assumed to be 0 for missing Z."
msgstr ""

#. Tag: para
#: reference_measure.xml:309
#, no-c-format
msgid "linestring and point -- both 3d and 2d closest point"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:310
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt,\n"
"                ST_AsEWKT(ST_ClosestPoint(line,pt)) As cp2d_line_pt\n"
"        FROM (SELECT 'POINT(100 100 30)'::geometry As pt,\n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"1000)'::geometry As line\n"
"                ) As foo;\n"
"\n"
"\n"
" cp3d_line_pt                                                |               "
"cp2d_line_pt\n"
"-----------------------------------------------------------"
"+------------------------------------------\n"
" POINT(54.6993798867619 128.935022917228 11.5475869506606) | "
"POINT(73.0769230769231 115.384615384615)"
msgstr ""
"SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, \n"
"                ST_AsEWKT(ST_ClosestPoint(line,pt)) As cp2d_line_pt\n"
"        FROM (SELECT 'POINT(100 100 30)'::geometry As pt, \n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"1000)'::geometry As line\n"
"                ) As foo;\n"
"        \n"
"                \n"
" cp3d_line_pt                                                                        "
"|               cp2d_line_pt\n"
"-----------------------------------------------------------"
"+------------------------------------------\n"
" POINT(54.6993798867619 128.935022917228 11.5475869506606) | "
"POINT(73.0769230769231 115.384615384615)"

#. Tag: para
#: reference_measure.xml:314
#, no-c-format
msgid "linestring and multipoint -- both 3d and 2d closest point"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:315
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt,\n"
"                ST_AsEWKT(ST_ClosestPoint(line,pt)) As cp2d_line_pt\n"
"        FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry As pt,\n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"900)'::geometry As line\n"
"                ) As foo;\n"
"\n"
"\n"
"                       cp3d_line_pt                        | cp2d_line_pt\n"
"-----------------------------------------------------------+--------------\n"
" POINT(54.6993798867619 128.935022917228 11.5475869506606) | POINT(50 75)"
msgstr ""
"SELECT ST_AsEWKT(ST_3DClosestPoint(line,pt)) AS cp3d_line_pt, \n"
"                ST_AsEWKT(ST_ClosestPoint(line,pt)) As cp2d_line_pt\n"
"        FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry As pt, \n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"900)'::geometry As line\n"
"                ) As foo;\n"
"        \n"
"                \n"
"                       cp3d_line_pt                        | cp2d_line_pt\n"
"-----------------------------------------------------------+--------------\n"
" POINT(54.6993798867619 128.935022917228 11.5475869506606) | POINT(50 75)"

#. Tag: para
#: reference_measure.xml:319
#, no-c-format
msgid "Multilinestring and polygon both 3d and 2d closest point"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:320
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) As cp3d,\n"
"    ST_AsEWKT(ST_ClosestPoint(poly, mline)) As cp2d\n"
"        FROM (SELECT  ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, "
"50 60 5, 100 100 5, 175 150 5))') As poly,\n"
"                ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 "
"-2, 125 100 1, 175 155 1),\n"
"                (1 10 2, 5 20 1))') As mline ) As foo;\n"
"                   cp3d                    |     cp2d\n"
"-------------------------------------------+--------------\n"
" POINT(39.993580415989 54.1889925532825 5) | POINT(20 40)"
msgstr ""
"SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) As cp3d,\n"
"    ST_AsEWKT(ST_ClosestPoint(poly, mline)) As cp2d \n"
"        FROM (SELECT  ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, "
"50 60 5, 100 100 5, 175 150 5))') As poly,\n"
"                ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 "
"-2, 125 100 1, 175 155 1),\n"
"                (1 10 2, 5 20 1))') As mline ) As foo;\n"
"                   cp3d                    |     cp2d\n"
"-------------------------------------------+--------------\n"
" POINT(39.993580415989 54.1889925532825 5) | POINT(20 40)"

#. Tag: para
#: reference_measure.xml:332
#, no-c-format
msgid ""
", <xref linkend=\"ST_ClosestPoint\"/>, <xref linkend=\"ST_3DDistance\"/>, "
"<xref linkend=\"ST_3DShortestLine\"/>"
msgstr ""
", <xref linkend=\"ST_ClosestPoint\"/>, <xref linkend=\"ST_3DDistance\"/>, "
"<xref linkend=\"ST_3DShortestLine\"/>"

#. Tag: refname
#: reference_measure.xml:338
#, no-c-format
msgid "ST_Distance"
msgstr "ST_Distance"

#. Tag: refpurpose
#: reference_measure.xml:340
#, no-c-format
msgid "Returns the distance between two geometry or geography values."
msgstr ""

#. Tag: funcsynopsis
#: reference_measure.xml:343
#, fuzzy, no-c-format
msgid ""
"<funcprototype> <funcdef>float <function>ST_Distance</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> </"
"funcprototype> <funcprototype> <funcdef>float <function>ST_Distance</"
"function></funcdef> <paramdef><type>geography </type> <parameter>geog1</"
"parameter></paramdef> <paramdef><type>geography </type> <parameter>geog2</"
"parameter></paramdef> <paramdef choice=\"opt\">><type>boolean </type> "
"<parameter>use_spheroid=true</parameter></paramdef> </funcprototype>"
msgstr ""
"<funcprototype> <funcdef>float <function>ST_HausdorffDistance</function></"
"funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
"paramdef> <paramdef><type>geometry </type> <parameter>g2</parameter></"
"paramdef> </funcprototype> <funcprototype> <funcdef>float "
"<function>ST_HausdorffDistance</function></funcdef> <paramdef><type>geometry "
"</type> <parameter>g1</parameter></paramdef> <paramdef><type>geometry </"
"type> <parameter>g2</parameter></paramdef> <paramdef><type>float</type> "
"<parameter>densifyFrac</parameter></paramdef> </funcprototype>"

#. Tag: para
#: reference_measure.xml:374
#, no-c-format
msgid ""
"For <xref linkend=\"geometry\"/> types returns the minimum 2D Cartesian "
"(planar) distance between two geometries, in projected units (spatial ref "
"units)."
msgstr ""

#. Tag: para
#: reference_measure.xml:377
#, no-c-format
msgid ""
"For <xref linkend=\"geography\"/> types defaults to return the minimum "
"geodesic distance between two geographies in meters, compute on the spheroid "
"determined by the SRID. If <varname>use_spheroid</varname> is false, a "
"faster spherical calculation is used."
msgstr ""

#. Tag: para
#: reference_measure.xml:383
#, no-c-format
msgid "&sqlmm_compliant; SQL-MM 3: 5.1.23"
msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.23"

#. Tag: para
#: reference_measure.xml:384
#, no-c-format
msgid "&curve_support;"
msgstr "&curve_support;"

#. Tag: para
#: reference_measure.xml:386
#, no-c-format
msgid ""
"Availability: 1.5.0 geography support was introduced in 1.5. Speed "
"improvements for planar to better handle large or many vertex geometries"
msgstr ""

#. Tag: para
#: reference_measure.xml:387
#, no-c-format
msgid ""
"Enhanced: 2.1.0 improved speed for geography. See <ulink url=\"http://"
"boundlessgeo.com/2012/07/making-geography-faster/\">Making Geography faster</"
"ulink> for details."
msgstr ""

#. Tag: para
#: reference_measure.xml:388
#, no-c-format
msgid "Enhanced: 2.1.0 - support for curved geometries was introduced."
msgstr ""

#. Tag: title
#: reference_measure.xml:394
#, no-c-format
msgid "Basic Geometry Examples"
msgstr ""

#. Tag: para
#: reference_measure.xml:396
#, no-c-format
msgid ""
"Geometry example - units in planar degrees 4326 is WGS 84 long lat, units "
"are degrees."
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:397
#, fuzzy, no-c-format
msgid ""
"SELECT ST_Distance(\n"
"                'SRID=4326;POINT(-72.1235 42.3521)'::geometry,\n"
"                'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::"
"geometry\n"
"        );\n"
"st_distance\n"
"-----------------\n"
"0.00150567726382282"
msgstr ""
"SELECT ST_AsText(\n"
"        ST_LongestLine('POINT(100 100)'::geometry, \n"
"                'LINESTRING (20 80, 98 190, 110 180, 50 75 )'::geometry)\n"
"        ) As lline;\n"
"\n"
"        \n"
"   lline\n"
"-----------------\n"
"LINESTRING(100 100,98 190)"

#. Tag: para
#: reference_measure.xml:399
#, no-c-format
msgid ""
"Geometry example - units in meters (SRID: 3857, proportional to pixels on "
"popular web maps). Although the value is off, nearby ones can be compared "
"correctly, which makes it a good choice for algorithms like KNN or KMeans."
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:402
#, fuzzy, no-c-format
msgid ""
"SELECT ST_Distance(\n"
"                        ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::"
"geometry, 3857),\n"
"                        ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, "
"-72.123 42.1546)'::geometry, 3857)\n"
"                );\n"
"st_distance\n"
"-----------------\n"
"167.441410065196"
msgstr ""
"SELECT ST_Intersects(\n"
"                ST_GeographyFromText('SRID=4326;LINESTRING(-43.23456 "
"72.4567,-43.23456 72.4568)'),\n"
"                ST_GeographyFromText('SRID=4326;POINT(-43.23456 "
"72.4567772)')\n"
"                );\n"
"\n"
" st_intersects\n"
"---------------\n"
"t"

#. Tag: para
#: reference_measure.xml:404
#, no-c-format
msgid ""
"Geometry example - units in meters (SRID: 3857 as above, but corrected by "
"cos(lat) to account for distortion)"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:405
#, fuzzy, no-c-format
msgid ""
"SELECT ST_Distance(\n"
"                        ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::"
"geometry, 3857),\n"
"                        ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, "
"-72.123 42.1546)'::geometry, 3857)\n"
"                ) * cosd(42.3521);\n"
"st_distance\n"
"-----------------\n"
"123.742351254151"
msgstr ""
"SELECT ST_Intersects(\n"
"                ST_GeographyFromText('SRID=4326;LINESTRING(-43.23456 "
"72.4567,-43.23456 72.4568)'),\n"
"                ST_GeographyFromText('SRID=4326;POINT(-43.23456 "
"72.4567772)')\n"
"                );\n"
"\n"
" st_intersects\n"
"---------------\n"
"t"

#. Tag: para
#: reference_measure.xml:407
#, no-c-format
msgid ""
"Geometry example - units in meters (SRID: 26986 Massachusetts state plane "
"meters) (most accurate for Massachusetts)"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:408
#, fuzzy, no-c-format
msgid ""
"SELECT ST_Distance(\n"
"                        ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::"
"geometry, 26986),\n"
"                        ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, "
"-72.123 42.1546)'::geometry, 26986)\n"
"                );\n"
"st_distance\n"
"-----------------\n"
"123.797937878454"
msgstr ""
"SELECT ST_Intersects(\n"
"                ST_GeographyFromText('SRID=4326;LINESTRING(-43.23456 "
"72.4567,-43.23456 72.4568)'),\n"
"                ST_GeographyFromText('SRID=4326;POINT(-43.23456 "
"72.4567772)')\n"
"                );\n"
"\n"
" st_intersects\n"
"---------------\n"
"t"

#. Tag: para
#: reference_measure.xml:410
#, no-c-format
msgid ""
"Geometry example - units in meters (SRID: 2163 US National Atlas Equal area) "
"(least accurate)"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:411
#, fuzzy, no-c-format
msgid ""
"SELECT ST_Distance(\n"
"                        ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::"
"geometry, 2163),\n"
"                        ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, "
"-72.123 42.1546)'::geometry, 2163)\n"
"                );\n"
"\n"
"st_distance\n"
"------------------\n"
"126.664256056812"
msgstr ""
"SELECT ST_Intersects(\n"
"                ST_GeographyFromText('SRID=4326;LINESTRING(-43.23456 "
"72.4567,-43.23456 72.4568)'),\n"
"                ST_GeographyFromText('SRID=4326;POINT(-43.23456 "
"72.4567772)')\n"
"                );\n"
"\n"
" st_intersects\n"
"---------------\n"
"t"

#. Tag: title
#: reference_measure.xml:414 reference_measure.xml:767
#, no-c-format
msgid "Geography Examples"
msgstr ""

#. Tag: para
#: reference_measure.xml:415
#, no-c-format
msgid ""
"Same as geometry example but note units in meters - use sphere for slightly "
"faster and less accurate computation."
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:416
#, no-c-format
msgid ""
"SELECT ST_Distance(gg1, gg2) As spheroid_dist, ST_Distance(gg1, gg2, false) "
"As sphere_dist\n"
"FROM (SELECT\n"
"        'SRID=4326;POINT(-72.1235 42.3521)'::geography as gg1,\n"
"        'SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)'::geography "
"as gg2\n"
"        ) As foo  ;\n"
"\n"
"  spheroid_dist   |   sphere_dist\n"
"------------------+------------------\n"
" 123.802076746848 | 123.475736916397"
msgstr ""

#. Tag: para
#: reference_measure.xml:421
#, fuzzy, no-c-format
msgid ""
", <xref linkend=\"ST_DWithin\"/>, <xref linkend=\"ST_DistanceSphere\"/>, "
"<xref linkend=\"ST_Distance_Spheroid\"/>, <xref linkend=\"ST_MaxDistance\"/"
">, <xref linkend=\"ST_HausdorffDistance\"/>, <xref linkend="
"\"ST_FrechetDistance\"/>, <xref linkend=\"ST_Transform\"/>"
msgstr ""
", <xref linkend=\"ST_Boundary\"/>, <xref linkend=\"ST_Contains\"/>, <xref "
"linkend=\"ST_Covers\"/>, <xref linkend=\"ST_CoveredBy\"/>, <xref linkend="
"\"ST_Equals\"/>, <xref linkend=\"ST_Relate\"/>, <xref linkend=\"ST_Within\"/>"

#. Tag: refname
#: reference_measure.xml:428
#, no-c-format
msgid "ST_3DDistance"
msgstr "ST_3DDistance"

#. Tag: refpurpose
#: reference_measure.xml:430
#, no-c-format
msgid ""
"Returns the 3D cartesian minimum distance (based on spatial ref) between two "
"geometries in projected units."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:435
#, no-c-format
msgid ""
"<funcdef>float <function>ST_3DDistance</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
msgstr ""
"<funcdef>float <function>ST_3DDistance</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:450
#, no-c-format
msgid ""
"Returns the 3-dimensional minimum cartesian distance between two geometries "
"in projected units (spatial ref units)."
msgstr ""

#. Tag: para
#: reference_measure.xml:456
#, no-c-format
msgid "&sqlmm_compliant; SQL-MM ?"
msgstr "&sqlmm_compliant; SQL-MM  ?"

#. Tag: para
#: reference_measure.xml:459 reference_measure.xml:1141
#, no-c-format
msgid ""
"Changed: 2.2.0 - In case of 2D and 3D, Z is no longer assumed to be 0 for "
"missing Z."
msgstr ""

#. Tag: para
#: reference_measure.xml:460
#, no-c-format
msgid "Changed: 3.0.0 - SFCGAL version removed"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:466
#, no-c-format
msgid ""
"-- Geometry example - units in meters (SRID: 2163 US National Atlas Equal "
"area) (3D point and line compared 2D point and line)\n"
"-- Note: currently no vertical datum support so Z is not transformed and "
"assumed to be same units as final.\n"
"SELECT ST_3DDistance(\n"
"                        ST_Transform('SRID=4326;POINT(-72.1235 42.3521 4)'::"
"geometry,2163),\n"
"                        ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45 "
"15, -72.123 42.1546 20)'::geometry,2163)\n"
"                ) As dist_3d,\n"
"                ST_Distance(\n"
"                        ST_Transform('SRID=4326;POINT(-72.1235 42.3521)'::"
"geometry,2163),\n"
"                        ST_Transform('SRID=4326;LINESTRING(-72.1260 42.45, "
"-72.123 42.1546)'::geometry,2163)\n"
"                ) As dist_2d;\n"
"\n"
"     dist_3d      |     dist_2d\n"
"------------------+-----------------\n"
" 127.295059324629 | 126.66425605671"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:467
#, fuzzy, no-c-format
msgid ""
"-- Multilinestring and polygon both 3d and 2d distance\n"
"-- Same example as 3D closest point example\n"
"SELECT ST_3DDistance(poly, mline) As dist3d,\n"
"    ST_Distance(poly, mline) As dist2d\n"
"        FROM (SELECT  'POLYGON((175 150 5, 20 40 5, 35 45 5, 50 60 5, 100 "
"100 5, 175 150 5))'::geometry as poly,\n"
"               'MULTILINESTRING((175 155 2, 20 40 20, 50 60 -2, 125 100 1, "
"175 155 1), (1 10 2, 5 20 1))'::geometry as mline) as foo;\n"
"      dist3d       | dist2d\n"
"-------------------+--------\n"
" 0.716635696066337 |      0"
msgstr ""
"SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) As lol3d,\n"
"    ST_AsEWKT(ST_LongestLine(poly, mline)) As lol2d \n"
"        FROM (SELECT  ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, "
"50 60 5, 100 100 5, 175 150 5))') As poly,\n"
"                ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 "
"-2, 125 100 1, 175 155 1),\n"
"                (1 10 2, 5 20 1))') As mline ) As foo;\n"
"            lol3d             |          lol2d\n"
"------------------------------+--------------------------\n"
" LINESTRING(175 150 5,1 10 2) | LINESTRING(175 150,1 10)"

#. Tag: para
#: reference_measure.xml:473
#, no-c-format
msgid ""
", <xref linkend=\"ST_3DClosestPoint\"/>, <xref linkend=\"ST_3DDWithin\"/>, "
"<xref linkend=\"ST_3DMaxDistance\"/>, <xref linkend=\"ST_3DShortestLine\"/>, "
"<xref linkend=\"ST_Transform\"/>"
msgstr ""
", <xref linkend=\"ST_3DClosestPoint\"/>, <xref linkend=\"ST_3DDWithin\"/>, "
"<xref linkend=\"ST_3DMaxDistance\"/>, <xref linkend=\"ST_3DShortestLine\"/>, "
"<xref linkend=\"ST_Transform\"/>"

#. Tag: refname
#: reference_measure.xml:479
#, no-c-format
msgid "ST_DistanceSphere"
msgstr ""

#. Tag: refpurpose
#: reference_measure.xml:481
#, no-c-format
msgid ""
"Returns minimum distance in meters between two lon/lat geometries using a "
"spherical earth model."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:488
#, no-c-format
msgid ""
"<funcdef>float <function>ST_DistanceSphere</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomlonlatA</parameter></"
"paramdef> <paramdef><type>geometry </type> <parameter>geomlonlatB</"
"parameter></paramdef>"
msgstr ""

#. Tag: para
#: reference_measure.xml:499
#, no-c-format
msgid ""
"Returns minimum distance in meters between two lon/lat points. Uses a "
"spherical earth and radius derived from the spheroid defined by the SRID. "
"Faster than <xref linkend=\"ST_Distance_Spheroid\"/>, but less accurate. "
"PostGIS Versions prior to 1.5 only implemented for points."
msgstr ""

#. Tag: para
#: reference_measure.xml:505 reference_measure.xml:555
#, no-c-format
msgid ""
"Availability: 1.5 - support for other geometry types besides points was "
"introduced. Prior versions only work with points."
msgstr ""

#. Tag: para
#: reference_measure.xml:506
#, no-c-format
msgid ""
"Changed: 2.2.0 In prior versions this used to be called ST_Distance_Sphere"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:513
#, no-c-format
msgid ""
"SELECT round(CAST(ST_DistanceSphere(ST_Centroid(the_geom), "
"ST_GeomFromText('POINT(-118 38)',4326)) As numeric),2) As dist_meters,\n"
"round(CAST(ST_Distance(ST_Transform(ST_Centroid(the_geom),32611),\n"
"                ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) "
"As numeric),2) As dist_utm11_meters,\n"
"round(CAST(ST_Distance(ST_Centroid(the_geom), ST_GeomFromText('POINT(-118 "
"38)', 4326)) As numeric),5) As dist_degrees,\n"
"round(CAST(ST_Distance(ST_Transform(the_geom,32611),\n"
"                ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) "
"As numeric),2) As min_dist_line_point_meters\n"
"FROM\n"
"        (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', "
"4326) As the_geom) as foo;\n"
"         dist_meters | dist_utm11_meters | dist_degrees | "
"min_dist_line_point_meters\n"
"        -------------+-------------------+--------------"
"+----------------------------\n"
"                70424.47 |          70438.00 |      0.72900 "
"|                   65871.18"
msgstr ""

#. Tag: para
#: reference_measure.xml:520
#, no-c-format
msgid ", <xref linkend=\"ST_Distance_Spheroid\"/>"
msgstr ", <xref linkend=\"ST_Distance_Spheroid\"/>"

#. Tag: refname
#: reference_measure.xml:526
#, no-c-format
msgid "ST_DistanceSpheroid"
msgstr ""

#. Tag: refpurpose
#: reference_measure.xml:528
#, no-c-format
msgid ""
"Returns the minimum distance between two lon/lat geometries using a "
"spheroidal earth model."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:534
#, no-c-format
msgid ""
"<funcdef>float <function>ST_DistanceSpheroid</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomlonlatA</parameter></"
"paramdef> <paramdef><type>geometry </type> <parameter>geomlonlatB</"
"parameter></paramdef> <paramdef><type>spheroid </type> "
"<parameter>measurement_spheroid</parameter></paramdef>"
msgstr ""

#. Tag: para
#: reference_measure.xml:546
#, no-c-format
msgid ""
"Returns minimum distance in meters between two lon/lat geometries given a "
"particular spheroid. See the explanation of spheroids given for <xref "
"linkend=\"ST_Length_Spheroid\"/>."
msgstr ""

#. Tag: para
#: reference_measure.xml:550
#, no-c-format
msgid ""
"This function does not look at the SRID of the geometry. It assumes the "
"geometry coordinates are based on the provided spheroid."
msgstr ""

#. Tag: para
#: reference_measure.xml:556
#, no-c-format
msgid "Changed: 2.2.0 In prior versions this was called ST_Distance_Spheroid"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:563
#, no-c-format
msgid ""
"SELECT round(CAST(\n"
"                ST_DistanceSpheroid(ST_Centroid(the_geom), "
"ST_GeomFromText('POINT(-118 38)',4326), 'SPHEROID[\"WGS "
"84\",6378137,298.257223563]')\n"
"                        As numeric),2) As dist_meters_spheroid,\n"
"                round(CAST(ST_DistanceSphere(ST_Centroid(the_geom), "
"ST_GeomFromText('POINT(-118 38)',4326)) As numeric),2) As "
"dist_meters_sphere,\n"
"round(CAST(ST_Distance(ST_Transform(ST_Centroid(the_geom),32611),\n"
"                ST_Transform(ST_GeomFromText('POINT(-118 38)', 4326),32611)) "
"As numeric),2) As dist_utm11_meters\n"
"FROM\n"
"        (SELECT ST_GeomFromText('LINESTRING(-118.584 38.374,-118.583 38.5)', "
"4326) As the_geom) as foo;\n"
" dist_meters_spheroid | dist_meters_sphere | dist_utm11_meters\n"
"----------------------+--------------------+-------------------\n"
"                         70454.92 |           70424.47 |          70438.00"
msgstr ""

#. Tag: para
#: reference_measure.xml:570
#, no-c-format
msgid ", <xref linkend=\"ST_DistanceSphere\"/>"
msgstr ""

#. Tag: refname
#: reference_measure.xml:577
#, fuzzy, no-c-format
msgid "ST_FrechetDistance"
msgstr "ST_Distance"

#. Tag: refpurpose
#: reference_measure.xml:579
#, no-c-format
msgid "Returns the Fréchet distance between two geometries."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:584
#, fuzzy, no-c-format
msgid ""
"<funcdef>float <function>ST_FrechetDistance</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> "
"<paramdef><type>float</type> <parameter>densifyFrac = -1</parameter></"
"paramdef>"
msgstr ""
"<funcdef>boolean <function>ST_DFullyWithin</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> "
"<paramdef><type>double precision </type> <parameter>distance</parameter></"
"paramdef>"

#. Tag: para
#: reference_measure.xml:602
#, no-c-format
msgid ""
"Implements algorithm for computing the Fréchet distance restricted to "
"discrete points for both geometries, based on <ulink url=\"http://www.kr."
"tuwien.ac.at/staff/eiter/et-archive/cdtr9464.pdf\">Computing Discrete "
"Fréchet Distance</ulink>. The Fréchet distance is a measure of similarity "
"between curves that takes into account the location and ordering of the "
"points along the curves. Therefore it is often better than the Hausdorff "
"distance."
msgstr ""

#. Tag: para
#: reference_measure.xml:604
#, no-c-format
msgid ""
"When the optional densifyFrac is specified, this function performs a segment "
"densification before computing the discrete Fréchet distance. The "
"densifyFrac parameter sets the fraction by which to densify each segment. "
"Each segment will be split into a number of equal-length subsegments, whose "
"fraction of the total length is closest to the given fraction."
msgstr ""

#. Tag: para
#: reference_measure.xml:607 reference_measure.xml:682
#, no-c-format
msgid ""
"Units are in the units of the spatial reference system of the geometries."
msgstr ""

#. Tag: para
#: reference_measure.xml:611 reference_measure.xml:686
#, no-c-format
msgid ""
"The current implementation supports only vertices as the discrete locations. "
"This could be extended to allow an arbitrary density of points to be used."
msgstr ""

#. Tag: para
#: reference_measure.xml:616
#, no-c-format
msgid ""
"The smaller densifyFrac we specify, the more acurate Fréchet distance we "
"get. But, the computation time and the memory usage increase with the square "
"of the number of subsegments."
msgstr ""

#. Tag: para
#: reference_measure.xml:620 reference_measure.xml:1253
#, fuzzy, no-c-format
msgid "Performed by the GEOS module."
msgstr "Eseguito dal modulo GEOS"

#. Tag: para
#: reference_measure.xml:621
#, fuzzy, no-c-format
msgid "Availability: 2.4.0 - requires GEOS &gt;= 3.7.0"
msgstr "Disponibilità: 2.0"

#. Tag: programlisting
#: reference_measure.xml:627
#, fuzzy, no-c-format
msgid ""
"postgres=# SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, "
"'LINESTRING (0 0, 50 50, 100 0)'::geometry);\n"
" st_frechetdistance\n"
"--------------------\n"
"   70.7106781186548\n"
"(1 row)"
msgstr ""
"postgis=# SELECT st_hausdorffdistance('LINESTRING (130 0, 0 0, 0 150)'::"
"geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);\n"
" st_hausdorffdistance\n"
" ----------------------\n"
"                                        70\n"
"(1 row)"

#. Tag: programlisting
#: reference_measure.xml:628
#, fuzzy, no-c-format
msgid ""
"SELECT st_frechetdistance('LINESTRING (0 0, 100 0)'::geometry, 'LINESTRING "
"(0 0, 50 50, 100 0)'::geometry, 0.5);\n"
" st_frechetdistance\n"
"--------------------\n"
"                 50\n"
"(1 row)"
msgstr ""
"postgis=# SELECT st_hausdorffdistance('LINESTRING (130 0, 0 0, 0 150)'::"
"geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);\n"
" st_hausdorffdistance\n"
" ----------------------\n"
"                                        70\n"
"(1 row)"

#. Tag: refname
#: reference_measure.xml:640
#, no-c-format
msgid "ST_HausdorffDistance"
msgstr "ST_HausdorffDistance"

#. Tag: refpurpose
#: reference_measure.xml:642
#, no-c-format
msgid "Returns the Hausdorff distance between two geometries."
msgstr ""

#. Tag: funcsynopsis
#: reference_measure.xml:646
#, no-c-format
msgid ""
"<funcprototype> <funcdef>float <function>ST_HausdorffDistance</function></"
"funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
"paramdef> <paramdef><type>geometry </type> <parameter>g2</parameter></"
"paramdef> </funcprototype> <funcprototype> <funcdef>float "
"<function>ST_HausdorffDistance</function></funcdef> <paramdef><type>geometry "
"</type> <parameter>g1</parameter></paramdef> <paramdef><type>geometry </"
"type> <parameter>g2</parameter></paramdef> <paramdef><type>float</type> "
"<parameter>densifyFrac</parameter></paramdef> </funcprototype>"
msgstr ""
"<funcprototype> <funcdef>float <function>ST_HausdorffDistance</function></"
"funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
"paramdef> <paramdef><type>geometry </type> <parameter>g2</parameter></"
"paramdef> </funcprototype> <funcprototype> <funcdef>float "
"<function>ST_HausdorffDistance</function></funcdef> <paramdef><type>geometry "
"</type> <parameter>g1</parameter></paramdef> <paramdef><type>geometry </"
"type> <parameter>g2</parameter></paramdef> <paramdef><type>float</type> "
"<parameter>densifyFrac</parameter></paramdef> </funcprototype>"

#. Tag: para
#: reference_measure.xml:674
#, no-c-format
msgid ""
"Returns the Hausdorff distance between two geometries, a measure of how "
"similar or dissimilar 2 geometries are."
msgstr ""

#. Tag: para
#: reference_measure.xml:676
#, no-c-format
msgid ""
"Implements algorithm for computing a distance metric which can be thought of "
"as the \"Discrete Hausdorff Distance\". This is the Hausdorff distance "
"restricted to discrete points for one of the geometries. <ulink url=\"http://"
"en.wikipedia.org/wiki/Hausdorff_distance\">Wikipedia article on Hausdorff "
"distance</ulink> <ulink url=\"http://lin-ear-th-inking.blogspot.com/2009/01/"
"computing-geometric-similarity.html\">Martin Davis note on how Hausdorff "
"Distance calculation was used to prove correctness of the "
"CascadePolygonUnion approach.</ulink>"
msgstr ""

#. Tag: para
#: reference_measure.xml:679
#, no-c-format
msgid ""
"When densifyFrac is specified, this function performs a segment "
"densification before computing the discrete hausdorff distance. The "
"densifyFrac parameter sets the fraction by which to densify each segment. "
"Each segment will be split into a number of equal-length subsegments, whose "
"fraction of the total length is closest to the given fraction."
msgstr ""

#. Tag: para
#: reference_measure.xml:691
#, no-c-format
msgid ""
"This algorithm is NOT equivalent to the standard Hausdorff distance. "
"However, it computes an approximation that is correct for a large subset of "
"useful cases. One important part of this subset is Linestrings that are "
"roughly parallel to each other, and roughly equal in length. This is a "
"useful metric for line matching."
msgstr ""

#. Tag: para
#: reference_measure.xml:702
#, no-c-format
msgid ""
"For each building, find the parcel that best represents it. First we require "
"the parcel intersect with the geometry. DISTINCT ON guarantees we get each "
"building listed only once, the ORDER BY .. ST_HausdorffDistance gives us a "
"preference of parcel that is most similar to the building."
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:704
#, no-c-format
msgid ""
"SELECT DISTINCT ON(buildings.gid) buildings.gid, parcels.parcel_id\n"
"   FROM buildings INNER JOIN parcels ON ST_Intersects(buildings.geom,parcels."
"geom)\n"
"     ORDER BY buildings.gid, ST_HausdorffDistance(buildings.geom, parcels."
"geom);"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:706
#, no-c-format
msgid ""
"postgis=# SELECT ST_HausdorffDistance(\n"
"                                'LINESTRING (0 0, 2 0)'::geometry,\n"
"                                'MULTIPOINT (0 1, 1 0, 2 1)'::geometry);\n"
" st_hausdorffdistance\n"
" ----------------------\n"
"                                         1\n"
"(1 row)"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:707
#, no-c-format
msgid ""
"postgis=# SELECT st_hausdorffdistance('LINESTRING (130 0, 0 0, 0 150)'::"
"geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);\n"
" st_hausdorffdistance\n"
" ----------------------\n"
"                                        70\n"
"(1 row)"
msgstr ""
"postgis=# SELECT st_hausdorffdistance('LINESTRING (130 0, 0 0, 0 150)'::"
"geometry, 'LINESTRING (10 10, 10 150, 130 10)'::geometry, 0.5);\n"
" st_hausdorffdistance\n"
" ----------------------\n"
"                                        70\n"
"(1 row)"

#. Tag: refname
#: reference_measure.xml:719
#, no-c-format
msgid "ST_Length"
msgstr "ST_Length"

#. Tag: refpurpose
#: reference_measure.xml:721
#, no-c-format
msgid "Returns the 2D length of a linear geometry."
msgstr ""

#. Tag: funcsynopsis
#: reference_measure.xml:724
#, no-c-format
msgid ""
"<funcprototype> <funcdef>float <function>ST_Length</function></funcdef> "
"<paramdef><type>geometry </type><parameter>a_2dlinestring</parameter></"
"paramdef> </funcprototype> <funcprototype> <funcdef>float "
"<function>ST_Length</function></funcdef> <paramdef><type>geography </"
"type><parameter>geog</parameter></paramdef> <paramdef choice=\"opt"
"\"><type>boolean </type><parameter>use_spheroid=true</parameter></paramdef> "
"</funcprototype>"
msgstr ""
"<funcprototype> <funcdef>float <function>ST_Length</function></funcdef> "
"<paramdef><type>geometry </type><parameter>a_2dlinestring</parameter></"
"paramdef> </funcprototype> <funcprototype> <funcdef>float "
"<function>ST_Length</function></funcdef> <paramdef><type>geography </"
"type><parameter>geog</parameter></paramdef> <paramdef choice=\"opt"
"\"><type>boolean </type><parameter>use_spheroid=true</parameter></paramdef> "
"</funcprototype>"

#. Tag: para
#: reference_measure.xml:739
#, no-c-format
msgid ""
"For geometry types: returns the 2D Cartesian length of the geometry if it is "
"a LineString, MultiLineString, ST_Curve, ST_MultiCurve. For areal geometries "
"0 is returned; use <xref linkend=\"ST_Perimeter\"/> instead. The units of "
"length is determined by the spatial reference system of the geometry."
msgstr ""

#. Tag: para
#: reference_measure.xml:743
#, no-c-format
msgid ""
"For geography types: computation is performed using the inverse geodesic "
"calculation. Units of length are in meters. If PostGIS is compiled with PROJ "
"version 4.8.0 or later, the spheroid is specified by the SRID, otherwise it "
"is exclusive to WGS84. If <varname>use_spheroid=false</varname>, then the "
"calculation is based on a sphere instead of a spheroid."
msgstr ""

#. Tag: para
#: reference_measure.xml:748
#, no-c-format
msgid ""
"Currently for geometry this is an alias for ST_Length2D, but this may change "
"to support higher dimensions."
msgstr ""

#. Tag: para
#: reference_measure.xml:750
#, no-c-format
msgid ""
"Changed: 2.0.0 Breaking change -- in prior versions applying this to a MULTI/"
"POLYGON of type geography would give you the perimeter of the POLYGON/"
"MULTIPOLYGON. In 2.0.0 this was changed to return 0 to be in line with "
"geometry behavior. Please use ST_Perimeter if you want the perimeter of a "
"polygon"
msgstr ""

#. Tag: para
#: reference_measure.xml:753
#, no-c-format
msgid ""
"For geography the calculation defaults to using a spheroidal model. To use "
"the faster but less accurate spherical calculation use ST_Length(gg,false);"
msgstr ""

#. Tag: para
#: reference_measure.xml:754 reference_measure.xml:1305
#, no-c-format
msgid "&sfs_compliant; s2.1.5.1"
msgstr "&sfs_compliant; s2.1.5.1"

#. Tag: para
#: reference_measure.xml:755
#, no-c-format
msgid "&sqlmm_compliant; SQL-MM 3: 7.1.2, 9.3.4"
msgstr "&sqlmm_compliant; SQL-MM 3: 7.1.2, 9.3.4"

#. Tag: para
#: reference_measure.xml:756
#, no-c-format
msgid "Availability: 1.5.0 geography support was introduced in 1.5."
msgstr ""

#. Tag: para
#: reference_measure.xml:757
#, no-c-format
msgid "&sfcgal_enhanced;"
msgstr ""

#. Tag: title
#: reference_measure.xml:761
#, no-c-format
msgid "Geometry Examples"
msgstr ""

#. Tag: para
#: reference_measure.xml:762
#, no-c-format
msgid ""
"Return length in feet for line string. Note this is in feet because "
"EPSG:2249 is Massachusetts State Plane Feet"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:764
#, no-c-format
msgid ""
"SELECT ST_Length(ST_GeomFromText('LINESTRING(743238 2967416,743238 "
"2967450,743265 2967450,\n"
"743265.625 2967416,743238 2967416)',2249));\n"
"\n"
"st_length\n"
"---------\n"
" 122.630744000095\n"
"\n"
"\n"
"--Transforming WGS 84 LineString to Massachusetts state plane meters\n"
"SELECT ST_Length(\n"
"        ST_Transform(\n"
"                ST_GeomFromEWKT('SRID=4326;LINESTRING(-72.1260 42.45, "
"-72.1240 42.45666, -72.123 42.1546)'),\n"
"                26986\n"
"        )\n"
");\n"
"\n"
"st_length\n"
"---------\n"
"34309.4563576191"
msgstr ""

#. Tag: para
#: reference_measure.xml:768
#, no-c-format
msgid "Return length of WGS 84 geography line"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:769
#, no-c-format
msgid ""
"-- the default calculation uses a spheroid\n"
"SELECT ST_Length(the_geog) As length_spheroid,  ST_Length(the_geog,false) As "
"length_sphere\n"
"FROM (SELECT ST_GeographyFromText(\n"
"'SRID=4326;LINESTRING(-72.1260 42.45, -72.1240 42.45666, -72.123 42.1546)') "
"As the_geog)\n"
" As foo;\n"
"\n"
" length_spheroid  |  length_sphere\n"
"------------------+------------------\n"
" 34310.5703627288 | 34346.2060960742"
msgstr ""

#. Tag: para
#: reference_measure.xml:773
#, no-c-format
msgid ""
", <xref linkend=\"ST_GeomFromEWKT\"/>, <xref linkend=\"ST_Length_Spheroid\"/"
">, <xref linkend=\"ST_Perimeter\"/>, <xref linkend=\"ST_Transform\"/>"
msgstr ""
", <xref linkend=\"ST_GeomFromEWKT\"/>, <xref linkend=\"ST_Length_Spheroid\"/"
">, <xref linkend=\"ST_Perimeter\"/>, <xref linkend=\"ST_Transform\"/>"

#. Tag: refname
#: reference_measure.xml:779
#, no-c-format
msgid "ST_Length2D"
msgstr "ST_Length2D"

#. Tag: refpurpose
#: reference_measure.xml:781
#, no-c-format
msgid ""
"Returns the 2D length of a linear geometry. Alias for <varname>ST_Length</"
"varname>"
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:786
#, no-c-format
msgid ""
"<funcdef>float <function>ST_Length2D</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>a_2dlinestring</parameter></"
"paramdef>"
msgstr ""
"<funcdef>float <function>ST_Length2D</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>a_2dlinestring</parameter></"
"paramdef>"

#. Tag: para
#: reference_measure.xml:796
#, no-c-format
msgid ""
"Returns the 2D length of the geometry if it is a linestring or multi-"
"linestring. This is an alias for <varname>ST_Length</varname>"
msgstr ""

#. Tag: para
#: reference_measure.xml:805
#, no-c-format
msgid ", <xref linkend=\"ST_3DLength\"/>"
msgstr ", <xref linkend=\"ST_3DLength\"/>"

#. Tag: refname
#: reference_measure.xml:811
#, no-c-format
msgid "ST_3DLength"
msgstr "ST_3DLength"

#. Tag: refpurpose
#: reference_measure.xml:813
#, no-c-format
msgid "Returns the 3D length of a linear geometry."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:818
#, no-c-format
msgid ""
"<funcdef>float <function>ST_3DLength</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>a_3dlinestring</parameter></"
"paramdef>"
msgstr ""
"<funcdef>float <function>ST_3DLength</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>a_3dlinestring</parameter></"
"paramdef>"

#. Tag: para
#: reference_measure.xml:828
#, no-c-format
msgid ""
"Returns the 3-dimensional or 2-dimensional length of the geometry if it is a "
"linestring or multi-linestring. For 2-d lines it will just return the 2-d "
"length (same as ST_Length and ST_Length2D)"
msgstr ""

#. Tag: para
#: reference_measure.xml:831
#, no-c-format
msgid "Changed: 2.0.0 In prior versions this used to be called ST_Length3D"
msgstr ""

#. Tag: para
#: reference_measure.xml:838
#, no-c-format
msgid ""
"Return length in feet for a 3D cable. Note this is in feet because EPSG:2249 "
"is Massachusetts State Plane Feet"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:840
#, no-c-format
msgid ""
"SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 "
"2967450 1,743265 2967450 3,\n"
"743265.625 2967416 3,743238 2967416 3)',2249));\n"
"ST_3DLength\n"
"-----------\n"
"122.704716741457"
msgstr ""
"SELECT ST_3DLength(ST_GeomFromText('LINESTRING(743238 2967416 1,743238 "
"2967450 1,743265 2967450 3,\n"
"743265.625 2967416 3,743238 2967416 3)',2249));\n"
"ST_3DLength\n"
"-----------\n"
"122.704716741457"

#. Tag: para
#: reference_measure.xml:847
#, no-c-format
msgid ", <xref linkend=\"ST_Length2D\"/>"
msgstr ", <xref linkend=\"ST_Length2D\"/>"

#. Tag: refname
#: reference_measure.xml:853
#, no-c-format
msgid "ST_LengthSpheroid"
msgstr ""

#. Tag: refpurpose
#: reference_measure.xml:855
#, no-c-format
msgid ""
"Returns the 2D or 3D length/perimeter of a lon/lat geometry on a spheroid."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:860
#, fuzzy, no-c-format
msgid ""
"<funcdef>float <function>ST_LengthSpheroid</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>a_geometry</parameter></"
"paramdef> <paramdef><type>spheroid </type> <parameter>a_spheroid</"
"parameter></paramdef>"
msgstr ""
"<funcdef>boolean <function>ST_Contains</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>geomB</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:871
#, no-c-format
msgid ""
"Calculates the length or perimeter of a geometry on an ellipsoid. This is "
"useful if the coordinates of the geometry are in longitude/latitude and a "
"length is desired without reprojection. The spheroid is specified by a text "
"value as follows:"
msgstr ""

#. Tag: literallayout
#: reference_measure.xml:876
#, fuzzy, no-c-format
msgid ""
"SPHEROID[&lt;NAME&gt;,&lt;SEMI-MAJOR AXIS&gt;,&lt;INVERSE FLATTENING&gt;]"
msgstr ""
"SPHEROID[&lt;NAME&gt;,&lt;SEMI-MAJOR\n"
"                  AXIS&gt;,&lt;INVERSE FLATTENING&gt;]"

#. Tag: para
#: reference_measure.xml:877
#, fuzzy, no-c-format
msgid "For example:"
msgstr "Esempi"

#. Tag: literallayout
#: reference_measure.xml:878
#, no-c-format
msgid "SPHEROID[\"GRS_1980\",6378137,298.257222101]"
msgstr ""

#. Tag: para
#: reference_measure.xml:880
#, no-c-format
msgid "Availability: 1.2.2"
msgstr ""

#. Tag: para
#: reference_measure.xml:881
#, no-c-format
msgid ""
"Changed: 2.2.0 In prior versions this was called ST_Length_Spheroid and had "
"the alias ST_3DLength_Spheroid"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:888
#, no-c-format
msgid ""
"SELECT ST_LengthSpheroid( geometry_column,\n"
"                          'SPHEROID[\"GRS_1980\",6378137,298.257222101]' )\n"
"                          FROM geometry_table;\n"
"\n"
"SELECT ST_LengthSpheroid( the_geom, sph_m ) As tot_len,\n"
"ST_LengthSpheroid(ST_GeometryN(the_geom,1), sph_m) As len_line1,\n"
"ST_LengthSpheroid(ST_GeometryN(the_geom,2), sph_m) As len_line2\n"
"                          FROM (SELECT "
"ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5),\n"
"        (-71.05957 42.3589 , -71.061 43))') As the_geom,\n"
"CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m)  "
"as foo;\n"
"        tot_len      |    len_line1     |    len_line2\n"
"------------------+------------------+------------------\n"
" 85204.5207562955 | 13986.8725229309 | 71217.6482333646\n"
"\n"
" --3D\n"
"SELECT ST_LengthSpheroid( the_geom, sph_m ) As tot_len,\n"
"ST_LengthSpheroid(ST_GeometryN(the_geom,1), sph_m) As len_line1,\n"
"ST_LengthSpheroid(ST_GeometryN(the_geom,2), sph_m) As len_line2\n"
"                          FROM (SELECT "
"ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30),\n"
"        (-71.05957 42.3589 75, -71.061 43 90))') As the_geom,\n"
"CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As sph_m)  "
"as foo;\n"
"\n"
"         tot_len      |    len_line1    |    len_line2\n"
"------------------+-----------------+------------------\n"
" 85204.5259107402 | 13986.876097711 | 71217.6498130292"
msgstr ""

#. Tag: para
#: reference_measure.xml:895
#, no-c-format
msgid ", <xref linkend=\"ST_Length\"/>"
msgstr ""

#. Tag: refname
#: reference_measure.xml:902
#, no-c-format
msgid "ST_LongestLine"
msgstr "ST_LongestLine"

#. Tag: refpurpose
#: reference_measure.xml:904
#, no-c-format
msgid "Returns the 2D longest line between two geometries."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:910
#, no-c-format
msgid ""
"<funcdef>geometry <function>ST_LongestLine</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_LongestLine</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:925
#, no-c-format
msgid "Returns the 2-D longest line between the points of two geometries."
msgstr ""

#. Tag: para
#: reference_measure.xml:927
#, no-c-format
msgid ""
"The function returns the first longest line if more than one is found. The "
"line returned starts on g1 and ends on g2. The length of the line is equal "
"to the distance returned by <xref linkend=\"ST_MaxDistance\"/>."
msgstr ""

#. Tag: para
#: reference_measure.xml:946
#, no-c-format
msgid "Longest line between point and line"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:949
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsText(\n"
"        ST_LongestLine('POINT(100 100)'::geometry,\n"
"                'LINESTRING (20 80, 98 190, 110 180, 50 75 )'::geometry)\n"
"        ) As lline;\n"
"\n"
"\n"
"   lline\n"
"-----------------\n"
"LINESTRING(100 100,98 190)"
msgstr ""
"SELECT ST_AsText(\n"
"        ST_LongestLine('POINT(100 100)'::geometry, \n"
"                'LINESTRING (20 80, 98 190, 110 180, 50 75 )'::geometry)\n"
"        ) As lline;\n"
"\n"
"        \n"
"   lline\n"
"-----------------\n"
"LINESTRING(100 100,98 190)"

#. Tag: para
#: reference_measure.xml:957
#, no-c-format
msgid "longest line between polygon and polygon"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:960
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsText(\n"
"        ST_LongestLine(\n"
"                ST_GeomFromText('POLYGON((175 150, 20 40,\n"
"                        50 60, 125 100, 175 150))'),\n"
"                ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
"                )\n"
"        ) As llinewkt;\n"
"\n"
"   lline\n"
"-----------------\n"
"LINESTRING(20 40,121.111404660392 186.629392246051)"
msgstr ""
"SELECT ST_AsText(\n"
"        ST_LongestLine(\n"
"                ST_GeomFromText('POLYGON((175 150, 20 40, \n"
"                        50 60, 125 100, 175 150))'),\n"
"                ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
"                ) \n"
"        ) As llinewkt;\n"
"                \n"
"   lline\n"
"-----------------\n"
"LINESTRING(20 40,121.111404660392 186.629392246051)"

#. Tag: para
#: reference_measure.xml:976
#, no-c-format
msgid ""
"longest straight distance to travel from one part of an elegant city to the "
"other Note the max distance = to the length of the line."
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:980
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsText(ST_LongestLine(c.the_geom, c.the_geom)) As llinewkt,\n"
"        ST_MaxDistance(c.the_geom,c.the_geom) As max_dist,\n"
"        ST_Length(ST_LongestLine(c.the_geom, c.the_geom)) As lenll\n"
"FROM (SELECT ST_BuildArea(ST_Collect(the_geom)) As the_geom\n"
"        FROM (SELECT ST_Translate(ST_SnapToGrid(ST_Buffer(ST_Point(50 ,"
"generate_series(50,190, 50)\n"
"                        ),40, 'quad_segs=2'),1), x, 0)  As the_geom\n"
"                        FROM generate_series(1,100,50) As x)  AS foo\n"
") As c;\n"
"\n"
"          llinewkt          |     max_dist     |      lenll\n"
"---------------------------+------------------+------------------\n"
" LINESTRING(23 22,129 178) | 188.605408193933 | 188.605408193933"
msgstr ""
"SELECT ST_AsText(ST_LongestLine(c.the_geom, c.the_geom)) As llinewkt, \n"
"        ST_MaxDistance(c.the_geom,c.the_geom) As max_dist, \n"
"        ST_Length(ST_LongestLine(c.the_geom, c.the_geom)) As lenll \n"
"FROM (SELECT ST_BuildArea(ST_Collect(the_geom)) As the_geom\n"
"        FROM (SELECT ST_Translate(ST_SnapToGrid(ST_Buffer(ST_Point(50 ,"
"generate_series(50,190, 50) \n"
"                        ),40, 'quad_segs=2'),1), x, 0)  As the_geom \n"
"                        FROM generate_series(1,100,50) As x)  AS foo\n"
") As c;\n"
"                \n"
"          llinewkt          |     max_dist     |      lenll\n"
"---------------------------+------------------+------------------\n"
" LINESTRING(23 22,129 178) | 188.605408193933 | 188.605408193933"

#. Tag: para
#: reference_measure.xml:991
#, fuzzy, no-c-format
msgid ""
", <xref linkend=\"ST_ShortestLine\"/>, <xref linkend=\"ST_3DLongestLine\"/>"
msgstr ""
", <xref linkend=\"ST_ShortestLine\"/>, <xref linkend=\"ST_LongestLine\"/>"

#. Tag: refname
#: reference_measure.xml:997
#, no-c-format
msgid "ST_3DLongestLine"
msgstr "ST_3DLongestLine"

#. Tag: refpurpose
#: reference_measure.xml:999
#, no-c-format
msgid "Returns the 3D longest line between two geometries"
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1004
#, no-c-format
msgid ""
"<funcdef>geometry <function>ST_3DLongestLine</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_3DLongestLine</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:1019
#, no-c-format
msgid ""
"Returns the 3-dimensional longest line between two geometries. The function "
"will only return the first longest line if more than one. The line returned "
"will always start in g1 and end in g2. The 3D length of the line this "
"function returns will always be the same as <xref linkend=\"ST_3DMaxDistance"
"\"/> returns for g1 and g2."
msgstr ""

#. Tag: para
#: reference_measure.xml:1038
#, no-c-format
msgid "linestring and point -- both 3d and 2d longest line"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1039
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt,\n"
"                ST_AsEWKT(ST_LongestLine(line,pt)) As lol2d_line_pt\n"
"        FROM (SELECT 'POINT(100 100 30)'::geometry As pt,\n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"1000)'::geometry As line\n"
"                ) As foo;\n"
"\n"
"\n"
"           lol3d_line_pt           |       lol2d_line_pt\n"
"-----------------------------------+----------------------------\n"
" LINESTRING(50 75 1000,100 100 30) | LINESTRING(98 190,100 100)"
msgstr ""
"SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, \n"
"                ST_AsEWKT(ST_LongestLine(line,pt)) As lol2d_line_pt\n"
"        FROM (SELECT 'POINT(100 100 30)'::geometry As pt, \n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"1000)'::geometry As line\n"
"                ) As foo;\n"
"        \n"
"                \n"
"           lol3d_line_pt           |       lol2d_line_pt\n"
"-----------------------------------+----------------------------\n"
" LINESTRING(50 75 1000,100 100 30) | LINESTRING(98 190,100 100)"

#. Tag: para
#: reference_measure.xml:1043
#, no-c-format
msgid "linestring and multipoint -- both 3d and 2d longest line"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1044
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt,\n"
"                ST_AsEWKT(ST_LongestLine(line,pt)) As lol2d_line_pt\n"
"        FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry As pt,\n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"900)'::geometry As line\n"
"                ) As foo;\n"
"\n"
"\n"
"          lol3d_line_pt          |      lol2d_line_pt\n"
"---------------------------------+--------------------------\n"
" LINESTRING(98 190 1,50 74 1000) | LINESTRING(98 190,50 74)"
msgstr ""
"SELECT ST_AsEWKT(ST_3DLongestLine(line,pt)) AS lol3d_line_pt, \n"
"                ST_AsEWKT(ST_LongestLine(line,pt)) As lol2d_line_pt\n"
"        FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry As pt, \n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"900)'::geometry As line\n"
"                ) As foo;\n"
"        \n"
"                \n"
"          lol3d_line_pt          |      lol2d_line_pt\n"
"---------------------------------+--------------------------\n"
" LINESTRING(98 190 1,50 74 1000) | LINESTRING(98 190,50 74)"

#. Tag: para
#: reference_measure.xml:1048
#, no-c-format
msgid "Multilinestring and polygon both 3d and 2d longest line"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1049
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) As lol3d,\n"
"    ST_AsEWKT(ST_LongestLine(poly, mline)) As lol2d\n"
"        FROM (SELECT  ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, "
"50 60 5, 100 100 5, 175 150 5))') As poly,\n"
"                ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 "
"-2, 125 100 1, 175 155 1),\n"
"                (1 10 2, 5 20 1))') As mline ) As foo;\n"
"            lol3d             |          lol2d\n"
"------------------------------+--------------------------\n"
" LINESTRING(175 150 5,1 10 2) | LINESTRING(175 150,1 10)"
msgstr ""
"SELECT ST_AsEWKT(ST_3DLongestLine(poly, mline)) As lol3d,\n"
"    ST_AsEWKT(ST_LongestLine(poly, mline)) As lol2d \n"
"        FROM (SELECT  ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, "
"50 60 5, 100 100 5, 175 150 5))') As poly,\n"
"                ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 "
"-2, 125 100 1, 175 155 1),\n"
"                (1 10 2, 5 20 1))') As mline ) As foo;\n"
"            lol3d             |          lol2d\n"
"------------------------------+--------------------------\n"
" LINESTRING(175 150 5,1 10 2) | LINESTRING(175 150,1 10)"

#. Tag: para
#: reference_measure.xml:1061
#, no-c-format
msgid ""
", <xref linkend=\"ST_3DDistance\"/>, <xref linkend=\"ST_LongestLine\"/>, "
"<xref linkend=\"ST_3DShortestLine\"/>, <xref linkend=\"ST_3DMaxDistance\"/>"
msgstr ""
", <xref linkend=\"ST_3DDistance\"/>, <xref linkend=\"ST_LongestLine\"/>, "
"<xref linkend=\"ST_3DShortestLine\"/>, <xref linkend=\"ST_3DMaxDistance\"/>"

#. Tag: refname
#: reference_measure.xml:1067
#, no-c-format
msgid "ST_MaxDistance"
msgstr "ST_MaxDistance"

#. Tag: refpurpose
#: reference_measure.xml:1069
#, no-c-format
msgid ""
"Returns the 2D largest distance between two geometries in projected units."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1075
#, no-c-format
msgid ""
"<funcdef>float <function>ST_MaxDistance</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
msgstr ""
"<funcdef>float <function>ST_MaxDistance</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:1088
#, no-c-format
msgid ""
"Returns the 2-dimensional maximum distance between two geometries in "
"projected units. If g1 and g2 is the same geometry the function will return "
"the distance between the two vertices most far from each other in that "
"geometry."
msgstr ""

#. Tag: para
#: reference_measure.xml:1098
#, no-c-format
msgid "Basic furthest distance the point is to any part of the line"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1099
#, fuzzy, no-c-format
msgid ""
"postgis=# SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 "
"2 )'::geometry);\n"
"   st_maxdistance\n"
"-----------------\n"
" 2\n"
"(1 row)\n"
"\n"
"postgis=# SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 "
"2 )'::geometry);\n"
"  st_maxdistance\n"
"------------------\n"
" 2.82842712474619\n"
"(1 row)"
msgstr ""
"postgis=# SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 "
"2 )'::geometry);\n"
"   st_maxdistance\n"
"-----------------\n"
" 2\n"
"(1 row)\n"
"\n"
"postgis=# SELECT ST_MaxDistance('POINT(0 0)'::geometry, 'LINESTRING ( 2 2, 2 "
"2 )'::geometry);\n"
"  st_maxdistance  \n"
"------------------\n"
" 2.82842712474619\n"
"(1 row)"

#. Tag: para
#: reference_measure.xml:1105
#, no-c-format
msgid ""
", <xref linkend=\"ST_LongestLine\"/>, <xref linkend=\"ST_DFullyWithin\"/>"
msgstr ""

#. Tag: refname
#: reference_measure.xml:1111
#, no-c-format
msgid "ST_3DMaxDistance"
msgstr "ST_3DMaxDistance"

#. Tag: refpurpose
#: reference_measure.xml:1113
#, no-c-format
msgid ""
"Returns the 3D cartesian maximum distance (based on spatial ref) between two "
"geometries in projected units."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1118
#, no-c-format
msgid ""
"<funcdef>float <function>ST_3DMaxDistance</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
msgstr ""
"<funcdef>float <function>ST_3DMaxDistance</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:1133
#, no-c-format
msgid ""
"Returns the 3-dimensional maximum cartesian distance between two geometries "
"in projected units (spatial ref units)."
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1147
#, no-c-format
msgid ""
"-- Geometry example - units in meters (SRID: 2163 US National Atlas Equal "
"area) (3D point and line compared 2D point and line)\n"
"-- Note: currently no vertical datum support so Z is not transformed and "
"assumed to be same units as final.\n"
"SELECT ST_3DMaxDistance(\n"
"                        ST_Transform(ST_GeomFromEWKT('SRID=4326;"
"POINT(-72.1235 42.3521 10000)'),2163),\n"
"                        ST_Transform(ST_GeomFromEWKT('SRID=4326;"
"LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163)\n"
"                ) As dist_3d,\n"
"                ST_MaxDistance(\n"
"                        ST_Transform(ST_GeomFromEWKT('SRID=4326;"
"POINT(-72.1235 42.3521 10000)'),2163),\n"
"                        ST_Transform(ST_GeomFromEWKT('SRID=4326;"
"LINESTRING(-72.1260 42.45 15, -72.123 42.1546 20)'),2163)\n"
"                ) As dist_2d;\n"
"\n"
"     dist_3d      |     dist_2d\n"
"------------------+------------------\n"
" 24383.7467488441 | 22247.8472107251"
msgstr ""

#. Tag: para
#: reference_measure.xml:1153
#, no-c-format
msgid ""
", <xref linkend=\"ST_3DDWithin\"/>, <xref linkend=\"ST_3DMaxDistance\"/>, "
"<xref linkend=\"ST_Transform\"/>"
msgstr ""
", <xref linkend=\"ST_3DDWithin\"/>, <xref linkend=\"ST_3DMaxDistance\"/>, "
"<xref linkend=\"ST_Transform\"/>"

#. Tag: refname
#: reference_measure.xml:1159
#, no-c-format
msgid "ST_MinimumClearance"
msgstr ""

#. Tag: refpurpose
#: reference_measure.xml:1160
#, no-c-format
msgid ""
"Returns the minimum clearance of a geometry, a measure of a geometry's "
"robustness."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1165
#, fuzzy, no-c-format
msgid ""
"<funcdef>float <function>ST_MinimumClearance</function></funcdef> "
"<paramdef><type>geometry </type><parameter>g</parameter></paramdef>"
msgstr ""
"<funcdef>float <function>ST_Perimeter2D</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:1175
#, no-c-format
msgid ""
"It is not uncommon to have a geometry that, while meeting the criteria for "
"validity according to ST_IsValid (polygons) or ST_IsSimple (lines), would "
"become invalid if one of the vertices moved by a slight distance, as can "
"happen during conversion to text-based formats (such as WKT, KML, GML "
"GeoJSON), or binary formats that do not use double-precision floating point "
"coordinates (MapInfo TAB)."
msgstr ""

#. Tag: para
#: reference_measure.xml:1182
#, no-c-format
msgid ""
"A geometry's \"minimum clearance\" is the smallest distance by which a "
"vertex of the geometry could be moved to produce an invalid geometry. It can "
"be thought of as a quantitative measure of a geometry's robustness, where "
"increasing values of minimum clearance indicate increasing robustness."
msgstr ""

#. Tag: para
#: reference_measure.xml:1188
#, no-c-format
msgid ""
"If a geometry has a minimum clearance of <varname>e</varname>, it can be "
"said that:"
msgstr ""

#. Tag: para
#: reference_measure.xml:1192
#, no-c-format
msgid ""
"No two distinct vertices in the geometry are separated by less than "
"<varname>e</varname>."
msgstr ""

#. Tag: para
#: reference_measure.xml:1197
#, no-c-format
msgid ""
"No vertex is closer than <varname>e</varname> to a line segement of which it "
"is not an endpoint."
msgstr ""

#. Tag: para
#: reference_measure.xml:1204
#, no-c-format
msgid ""
"If no minimum clearance exists for a geometry (for example, a single point, "
"or a multipoint whose points are identical), then ST_MinimumClearance will "
"return Infinity."
msgstr ""

#. Tag: para
#: reference_measure.xml:1209
#, fuzzy, no-c-format
msgid "Availability: 2.3.0"
msgstr "Disponibilità: 2.0"

#. Tag: programlisting
#: reference_measure.xml:1215
#, no-c-format
msgid ""
"SELECT ST_MinimumClearance('POLYGON ((0 0, 1 0, 1 1, 0.5 3.2e-4, 0 0))');\n"
" st_minimumclearance\n"
"---------------------\n"
"             0.00032"
msgstr ""

#. Tag: refname
#: reference_measure.xml:1230
#, no-c-format
msgid "ST_MinimumClearanceLine"
msgstr ""

#. Tag: refpurpose
#: reference_measure.xml:1231
#, no-c-format
msgid ""
"Returns the two-point LineString spanning a geometry's minimum clearance."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1236
#, fuzzy, no-c-format
msgid ""
"<funcdef>Geometry <function>ST_MinimumClearanceLine</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_PointOnSurface</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:1249
#, no-c-format
msgid ""
"Returns the two-point LineString spanning a geometry's minimum clearance. If "
"the geometry does not have a minimum clearance, <varname>LINESTRING EMPTY</"
"varname> will be returned."
msgstr ""

#. Tag: para
#: reference_measure.xml:1254
#, no-c-format
msgid "Availability: 2.3.0 - requires GEOS &gt;= 3.6.0"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1260
#, no-c-format
msgid ""
"SELECT ST_AsText(ST_MinimumClearanceLine('POLYGON ((0 0, 1 0, 1 1, 0.5 "
"3.2e-4, 0 0))'));\n"
"st_astext\n"
"-------------------------------\n"
"LINESTRING(0.5 0.00032,0.5 0)"
msgstr ""

#. Tag: refname
#: reference_measure.xml:1275
#, no-c-format
msgid "ST_Perimeter"
msgstr "ST_Perimeter"

#. Tag: refpurpose
#: reference_measure.xml:1277
#, no-c-format
msgid ""
"Returns the length of the boundary of a polygonal geometry or geography."
msgstr ""

#. Tag: funcsynopsis
#: reference_measure.xml:1280
#, no-c-format
msgid ""
"<funcprototype> <funcdef>float <function>ST_Perimeter</function></funcdef> "
"<paramdef><type>geometry </type><parameter>g1</parameter></paramdef> </"
"funcprototype> <funcprototype> <funcdef>float <function>ST_Perimeter</"
"function></funcdef> <paramdef><type>geography </type><parameter>geog</"
"parameter></paramdef> <paramdef choice=\"opt\"><type>boolean </"
"type><parameter>use_spheroid=true</parameter></paramdef> </funcprototype>"
msgstr ""

#. Tag: para
#: reference_measure.xml:1296
#, no-c-format
msgid ""
"Returns the 2D perimeter of the geometry/geography if it is a ST_Surface, "
"ST_MultiSurface (Polygon, MultiPolygon). 0 is returned for non-areal "
"geometries. For linear geometries use <xref linkend=\"ST_Length\"/>. For "
"geometry types, units for perimeter measures are specified by the spatial "
"reference system of the geometry."
msgstr ""

#. Tag: para
#: reference_measure.xml:1299
#, no-c-format
msgid ""
"For geography types, the calculations are performed using the inverse "
"geodesic problem, where perimeter units are in meters. If PostGIS is "
"compiled with PROJ version 4.8.0 or later, the spheroid is specified by the "
"SRID, otherwise it is exclusive to WGS84. If <varname>use_spheroid=false</"
"varname>, then calculations will approximate a sphere instead of a spheroid."
msgstr ""

#. Tag: para
#: reference_measure.xml:1303
#, no-c-format
msgid ""
"Currently this is an alias for ST_Perimeter2D, but this may change to "
"support higher dimensions."
msgstr ""

#. Tag: para
#: reference_measure.xml:1306
#, no-c-format
msgid "&sqlmm_compliant; SQL-MM 3: 8.1.3, 9.5.4"
msgstr "&sqlmm_compliant; SQL-MM 3: 8.1.3, 9.5.4"

#. Tag: para
#: reference_measure.xml:1307
#, no-c-format
msgid "Availability 2.0.0: Support for geography was introduced"
msgstr ""

#. Tag: title
#: reference_measure.xml:1311
#, no-c-format
msgid "Examples: Geometry"
msgstr ""

#. Tag: para
#: reference_measure.xml:1312
#, no-c-format
msgid ""
"Return perimeter in feet for Polygon and MultiPolygon. Note this is in feet "
"because EPSG:2249 is Massachusetts State Plane Feet"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1314
#, no-c-format
msgid ""
"SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 "
"2967450,743265 2967450,\n"
"743265.625 2967416,743238 2967416))', 2249));\n"
"st_perimeter\n"
"---------\n"
" 122.630744000095\n"
"(1 row)\n"
"\n"
"SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 "
"2949418.44119003,\n"
"763104.477769673 2949418.42538203,\n"
"763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),\n"
"((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,\n"
"763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,\n"
"763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,\n"
"763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,\n"
"762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,\n"
"763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,\n"
"763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,\n"
"763104.471273676 2949418.44119003)))', 2249));\n"
"st_perimeter\n"
"---------\n"
" 845.227713366825\n"
"(1 row)"
msgstr ""
"SELECT ST_Perimeter(ST_GeomFromText('POLYGON((743238 2967416,743238 "
"2967450,743265 2967450,\n"
"743265.625 2967416,743238 2967416))', 2249));\n"
"st_perimeter\n"
"---------\n"
" 122.630744000095\n"
"(1 row)\n"
"\n"
"SELECT ST_Perimeter(ST_GeomFromText('MULTIPOLYGON(((763104.471273676 "
"2949418.44119003,\n"
"763104.477769673 2949418.42538203,\n"
"763104.189609677 2949418.22343004,763104.471273676 2949418.44119003)),\n"
"((763104.471273676 2949418.44119003,763095.804579742 2949436.33850239,\n"
"763086.132105649 2949451.46730207,763078.452329651 2949462.11549407,\n"
"763075.354136904 2949466.17407812,763064.362142565 2949477.64291974,\n"
"763059.953961626 2949481.28983009,762994.637609571 2949532.04103014,\n"
"762990.568508415 2949535.06640477,762986.710889563 2949539.61421415,\n"
"763117.237897679 2949709.50493431,763235.236617789 2949617.95619822,\n"
"763287.718121842 2949562.20592617,763111.553321674 2949423.91664605,\n"
"763104.471273676 2949418.44119003)))', 2249));\n"
"st_perimeter\n"
"---------\n"
" 845.227713366825\n"
"(1 row)"

#. Tag: title
#: reference_measure.xml:1317
#, no-c-format
msgid "Examples: Geography"
msgstr ""

#. Tag: para
#: reference_measure.xml:1318
#, no-c-format
msgid ""
"Return perimeter in meters and feet for Polygon and MultiPolygon. Note this "
"is geography (WGS 84 long lat)"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1319
#, no-c-format
msgid ""
"SELECT  ST_Perimeter(geog) As per_meters, ST_Perimeter(geog)/0.3048 As "
"per_ft\n"
"FROM ST_GeogFromText('POLYGON((-71.1776848522251 "
"42.3902896512902,-71.1776843766326 42.3903829478009,\n"
"-71.1775844305465 42.3903826677917,-71.1775825927231 "
"42.3902893647987,-71.1776848522251 42.3902896512902))') As geog;\n"
"\n"
"   per_meters    |      per_ft\n"
"-----------------+------------------\n"
"37.3790462565251 | 122.634666195949\n"
"\n"
"\n"
"-- MultiPolygon example --\n"
"SELECT  ST_Perimeter(geog) As per_meters, ST_Perimeter(geog,false) As "
"per_sphere_meters,  ST_Perimeter(geog)/0.3048 As per_ft\n"
"FROM ST_GeogFromText('MULTIPOLYGON(((-71.1044543107478 "
"42.340674480411,-71.1044542869917 42.3406744369506,\n"
"-71.1044553562977 42.340673886454,-71.1044543107478 42.340674480411)),\n"
"((-71.1044543107478 42.340674480411,-71.1044860600303 "
"42.3407237015564,-71.1045215770124 42.3407653385914,\n"
"-71.1045498002983 42.3407946553165,-71.1045611902745 "
"42.3408058316308,-71.1046016507427 42.340837442371,\n"
"-71.104617893173 42.3408475056957,-71.1048586153981 "
"42.3409875993595,-71.1048736143677 42.3409959528211,\n"
"-71.1048878050242 42.3410084812078,-71.1044020965803 42.3414730072048,\n"
"-71.1039672113619 42.3412202916693,-71.1037740497748 42.3410666421308,\n"
"-71.1044280218456 42.3406894151355,-71.1044543107478 42.340674480411)))') As "
"geog;\n"
"\n"
"    per_meters    | per_sphere_meters |      per_ft\n"
"------------------+-------------------+------------------\n"
" 257.634283683311 |  257.412311446337 | 845.256836231335"
msgstr ""

#. Tag: para
#: reference_measure.xml:1323
#, no-c-format
msgid ", <xref linkend=\"ST_GeomFromText\"/>, <xref linkend=\"ST_Length\"/>"
msgstr ", <xref linkend=\"ST_GeomFromText\"/>, <xref linkend=\"ST_Length\"/>"

#. Tag: refname
#: reference_measure.xml:1329
#, no-c-format
msgid "ST_Perimeter2D"
msgstr "ST_Perimeter2D"

#. Tag: refpurpose
#: reference_measure.xml:1331
#, no-c-format
msgid ""
"Returns the 2D perimeter of a polygonal geometry. Alias for "
"<varname>ST_Perimeter</varname>."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1337
#, no-c-format
msgid ""
"<funcdef>float <function>ST_Perimeter2D</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>"
msgstr ""
"<funcdef>float <function>ST_Perimeter2D</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:1347
#, no-c-format
msgid "Returns the 2-dimensional perimeter of a polygonal geometry."
msgstr ""

#. Tag: para
#: reference_measure.xml:1351
#, no-c-format
msgid ""
"This is currently an alias for ST_Perimeter. In future versions ST_Perimeter "
"may return the highest dimension perimeter for a geometry. This is still "
"under consideration"
msgstr ""

#. Tag: refname
#: reference_measure.xml:1365
#, no-c-format
msgid "ST_3DPerimeter"
msgstr "ST_3DPerimeter"

#. Tag: refpurpose
#: reference_measure.xml:1367
#, no-c-format
msgid "Returns the 3D perimeter of a polygonal geometry."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1372
#, no-c-format
msgid ""
"<funcdef>float <function>ST_3DPerimeter</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>"
msgstr ""
"<funcdef>float <function>ST_3DPerimeter</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:1382
#, no-c-format
msgid ""
"Returns the 3-dimensional perimeter of the geometry, if it is a polygon or "
"multi-polygon. If the geometry is 2-dimensional, then the 2-dimensional "
"perimeter is returned."
msgstr ""

#. Tag: para
#: reference_measure.xml:1385
#, no-c-format
msgid "Changed: 2.0.0 In prior versions this used to be called ST_Perimeter3D"
msgstr ""

#. Tag: para
#: reference_measure.xml:1391
#, no-c-format
msgid ""
"Perimeter of a slightly elevated polygon in the air in Massachusetts state "
"plane feet"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1392
#, no-c-format
msgid ""
"SELECT ST_3DPerimeter(the_geom), ST_Perimeter2d(the_geom), "
"ST_Perimeter(the_geom) FROM\n"
"                        (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 "
"2967416 2,743238 2967450 1,\n"
"743265.625 2967416 1,743238 2967416 2))') As the_geom) As foo;\n"
"\n"
"  ST_3DPerimeter  |  st_perimeter2d  |   st_perimeter\n"
"------------------+------------------+------------------\n"
" 105.465793597674 | 105.432997272188 | 105.432997272188"
msgstr ""
"SELECT ST_3DPerimeter(the_geom), ST_Perimeter2d(the_geom), "
"ST_Perimeter(the_geom) FROM\n"
"                        (SELECT ST_GeomFromEWKT('SRID=2249;POLYGON((743238 "
"2967416 2,743238 2967450 1,\n"
"743265.625 2967416 1,743238 2967416 2))') As the_geom) As foo;\n"
"\n"
"  ST_3DPerimeter  |  st_perimeter2d  |   st_perimeter\n"
"------------------+------------------+------------------\n"
" 105.465793597674 | 105.432997272188 | 105.432997272188"

#. Tag: para
#: reference_measure.xml:1399
#, no-c-format
msgid ", <xref linkend=\"ST_Perimeter\"/>, <xref linkend=\"ST_Perimeter2D\"/>"
msgstr ", <xref linkend=\"ST_Perimeter\"/>, <xref linkend=\"ST_Perimeter2D\"/>"

#. Tag: refname
#: reference_measure.xml:1405
#, no-c-format
msgid "ST_Project"
msgstr "ST_Project"

#. Tag: refpurpose
#: reference_measure.xml:1407
#, no-c-format
msgid ""
"Returns a point projected from a start point by a distance and bearing "
"(azimuth)."
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1412
#, no-c-format
msgid ""
"<funcdef>geography <function>ST_Project</function></funcdef> "
"<paramdef><type>geography </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>float </type> <parameter>distance</parameter></paramdef> "
"<paramdef><type>float </type> <parameter>azimuth</parameter></paramdef>"
msgstr ""
"<funcdef>geography <function>ST_Project</function></funcdef> "
"<paramdef><type>geography </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>float </type> <parameter>distance</parameter></paramdef> "
"<paramdef><type>float </type> <parameter>azimuth</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:1428
#, no-c-format
msgid ""
"Returns a point projected from a start point along a geodesic using a given "
"distance and azimuth (bearing). This is known as the direct geodesic problem."
msgstr ""

#. Tag: para
#: reference_measure.xml:1431
#, no-c-format
msgid "The distance is given in meters. Negative values are supported."
msgstr ""

#. Tag: para
#: reference_measure.xml:1432
#, no-c-format
msgid ""
"The azimuth (also known as heading or bearing) is given in radians. It is "
"measured clockwise from true north (azimuth zero). East is azimuth "
"&#x03C0;/2 (90 degrees); south is azimuth &#x03C0; (180 degrees); west is "
"azimuth 3&#x03C0;/2 (270 degrees). Negative azimuth values and values "
"greater than 2&#x03C0; (360 degrees) are supported."
msgstr ""

#. Tag: para
#: reference_measure.xml:1442
#, no-c-format
msgid "Enhanced: 2.4.0 Allow negative distance and non-normalized azimuth."
msgstr ""

#. Tag: title
#: reference_measure.xml:1447
#, no-c-format
msgid "Example: Projected point at 100,000 meters and bearing 45 degrees"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1449
#, no-c-format
msgid ""
"SELECT ST_AsText(ST_Project('POINT(0 0)'::geography, 100000, "
"radians(45.0)));\n"
"\n"
"                 st_astext\n"
"--------------------------------------------\n"
" POINT(0.635231029125537 0.639472334729198)\n"
"(1 row)"
msgstr ""

#. Tag: para
#: reference_measure.xml:1455
#, no-c-format
msgid ""
", <xref linkend=\"ST_Distance\"/>, <ulink url=\"http://www.postgresql.org/"
"docs/current/interactive/functions-math.html\">PostgreSQL function "
"radians()</ulink>"
msgstr ""

#. Tag: refname
#: reference_measure.xml:1462
#, no-c-format
msgid "ST_ShortestLine"
msgstr "ST_ShortestLine"

#. Tag: refpurpose
#: reference_measure.xml:1464
#, no-c-format
msgid "Returns the 2D shortest line between two geometries"
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1469
#, no-c-format
msgid ""
"<funcdef>geometry <function>ST_ShortestLine</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
msgstr ""

#. Tag: para
#: reference_measure.xml:1484
#, no-c-format
msgid ""
"Returns the 2-dimensional shortest line between two geometries. The function "
"will only return the first shortest line if more than one, that the function "
"finds. If g1 and g2 intersects in just one point the function will return a "
"line with both start and end in that intersection-point. If g1 and g2 are "
"intersecting with more than one point the function will return a line with "
"start and end in the same point but it can be any of the intersecting "
"points. The line returned will always start in g1 and end in g2. The length "
"of the line this function returns will always be the same as ST_Distance "
"returns for g1 and g2."
msgstr ""

#. Tag: para
#: reference_measure.xml:1508
#, no-c-format
msgid "Shortest line between point and linestring"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1511
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsText(\n"
"        ST_ShortestLine('POINT(100 100)'::geometry,\n"
"                'LINESTRING (20 80, 98 190, 110 180, 50 75 )'::geometry)\n"
"        ) As sline;\n"
"\n"
"\n"
"   sline\n"
"-----------------\n"
"LINESTRING(100 100,73.0769230769231 115.384615384615)"
msgstr ""
"SELECT ST_AsText(\n"
"        ST_ShortestLine('POINT(100 100)'::geometry, \n"
"                'LINESTRING (20 80, 98 190, 110 180, 50 75 )'::geometry)\n"
"        ) As sline;\n"
"\n"
"        \n"
"   sline\n"
"-----------------\n"
"LINESTRING(100 100,73.0769230769231 115.384615384615)"

#. Tag: para
#: reference_measure.xml:1519
#, no-c-format
msgid "shortest line between polygon and polygon"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1522
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsText(\n"
"                ST_ShortestLine(\n"
"                        ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 "
"100, 175 150))'),\n"
"                        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
"                        )\n"
"                ) As slinewkt;\n"
"\n"
" LINESTRING(140.752120669087 125.695053378061,121.111404660392 "
"153.370607753949)"
msgstr ""
"SELECT ST_AsText(\n"
"                ST_ShortestLine(\n"
"                        ST_GeomFromText('POLYGON((175 150, 20 40, 50 60, 125 "
"100, 175 150))'),\n"
"                        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
"                        ) \n"
"                ) As slinewkt;\n"
"                \n"
" LINESTRING(140.752120669087 125.695053378061,121.111404660392 "
"153.370607753949)"

#. Tag: para
#: reference_measure.xml:1534
#, no-c-format
msgid ""
", <xref linkend=\"ST_Distance\"/>, <xref linkend=\"ST_LongestLine\"/>, <xref "
"linkend=\"ST_MaxDistance\"/>"
msgstr ""
", <xref linkend=\"ST_Distance\"/>, <xref linkend=\"ST_LongestLine\"/>, <xref "
"linkend=\"ST_MaxDistance\"/>"

#. Tag: refname
#: reference_measure.xml:1539
#, no-c-format
msgid "ST_3DShortestLine"
msgstr "ST_3DShortestLine"

#. Tag: refpurpose
#: reference_measure.xml:1541
#, no-c-format
msgid "Returns the 3D shortest line between two geometries"
msgstr ""

#. Tag: funcprototype
#: reference_measure.xml:1546
#, no-c-format
msgid ""
"<funcdef>geometry <function>ST_3DShortestLine</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_3DShortestLine</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
"<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#. Tag: para
#: reference_measure.xml:1561
#, no-c-format
msgid ""
"Returns the 3-dimensional shortest line between two geometries. The function "
"will only return the first shortest line if more than one, that the function "
"finds. If g1 and g2 intersects in just one point the function will return a "
"line with both start and end in that intersection-point. If g1 and g2 are "
"intersecting with more than one point the function will return a line with "
"start and end in the same point but it can be any of the intersecting "
"points. The line returned will always start in g1 and end in g2. The 3D "
"length of the line this function returns will always be the same as <xref "
"linkend=\"ST_3DDistance\"/> returns for g1 and g2."
msgstr ""

#. Tag: para
#: reference_measure.xml:1584
#, no-c-format
msgid "linestring and point -- both 3d and 2d shortest line"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1585
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt,\n"
"                ST_AsEWKT(ST_ShortestLine(line,pt)) As shl2d_line_pt\n"
"        FROM (SELECT 'POINT(100 100 30)'::geometry As pt,\n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"1000)'::geometry As line\n"
"                ) As foo;\n"
"\n"
"\n"
" shl3d_line_pt                                                                 "
"|               shl2d_line_pt\n"
"----------------------------------------------------------------------------"
"+------------------------------------------------------\n"
" LINESTRING(54.6993798867619 128.935022917228 11.5475869506606,100 100 30)  "
"| LINESTRING(73.0769230769231 115.384615384615,100 100)"
msgstr ""
"SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, \n"
"                ST_AsEWKT(ST_ShortestLine(line,pt)) As shl2d_line_pt\n"
"        FROM (SELECT 'POINT(100 100 30)'::geometry As pt, \n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"1000)'::geometry As line\n"
"                ) As foo;\n"
"        \n"
"                \n"
" shl3d_line_pt                                                                                         "
"|               shl2d_line_pt\n"
"----------------------------------------------------------------------------"
"+------------------------------------------------------\n"
" LINESTRING(54.6993798867619 128.935022917228 11.5475869506606,100 100 30)  "
"| LINESTRING(73.0769230769231 115.384615384615,100 100)"

#. Tag: para
#: reference_measure.xml:1589
#, no-c-format
msgid "linestring and multipoint -- both 3d and 2d shortest line"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1590
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt,\n"
"                ST_AsEWKT(ST_ShortestLine(line,pt)) As shl2d_line_pt\n"
"        FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry As pt,\n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"900)'::geometry As line\n"
"                ) As foo;\n"
"\n"
"\n"
"                       shl3d_line_pt                                       | "
"shl2d_line_pt\n"
"---------------------------------------------------------------------------"
"+------------------------\n"
" LINESTRING(54.6993798867619 128.935022917228 11.5475869506606,100 100 30) | "
"LINESTRING(50 75,50 74)"
msgstr ""
"SELECT ST_AsEWKT(ST_3DShortestLine(line,pt)) AS shl3d_line_pt, \n"
"                ST_AsEWKT(ST_ShortestLine(line,pt)) As shl2d_line_pt\n"
"        FROM (SELECT 'MULTIPOINT(100 100 30, 50 74 1000)'::geometry As pt, \n"
"                        'LINESTRING (20 80 20, 98 190 1, 110 180 3, 50 75 "
"900)'::geometry As line\n"
"                ) As foo;\n"
"        \n"
"                \n"
"                       shl3d_line_pt                                       | "
"shl2d_line_pt\n"
"---------------------------------------------------------------------------"
"+------------------------\n"
" LINESTRING(54.6993798867619 128.935022917228 11.5475869506606,100 100 30) | "
"LINESTRING(50 75,50 74)"

#. Tag: para
#: reference_measure.xml:1594
#, no-c-format
msgid "Multilinestring and polygon both 3d and 2d shortest line"
msgstr ""

#. Tag: programlisting
#: reference_measure.xml:1595
#, fuzzy, no-c-format
msgid ""
"SELECT ST_AsEWKT(ST_3DShortestLine(poly, mline)) As shl3d,\n"
"    ST_AsEWKT(ST_ShortestLine(poly, mline)) As shl2d\n"
"        FROM (SELECT  ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, "
"50 60 5, 100 100 5, 175 150 5))') As poly,\n"
"                ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 "
"-2, 125 100 1, 175 155 1),\n"
"                (1 10 2, 5 20 1))') As mline ) As foo;\n"
"                   shl3d                                                                           "
"|     shl2d\n"
"---------------------------------------------------------------------------------------------------"
"+------------------------\n"
" LINESTRING(39.993580415989 54.1889925532825 5,40.4078575708294 "
"53.6052383805529 5.03423778139177) | LINESTRING(20 40,20 40)"
msgstr ""
"SELECT ST_AsEWKT(ST_3DClosestPoint(poly, mline)) As cp3d,\n"
"    ST_AsEWKT(ST_ClosestPoint(poly, mline)) As cp2d \n"
"        FROM (SELECT  ST_GeomFromEWKT('POLYGON((175 150 5, 20 40 5, 35 45 5, "
"50 60 5, 100 100 5, 175 150 5))') As poly,\n"
"                ST_GeomFromEWKT('MULTILINESTRING((175 155 2, 20 40 20, 50 60 "
"-2, 125 100 1, 175 155 1),\n"
"                (1 10 2, 5 20 1))') As mline ) As foo;\n"
"                   cp3d                    |     cp2d\n"
"-------------------------------------------+--------------\n"
" POINT(39.993580415989 54.1889925532825 5) | POINT(20 40)"

#. Tag: para
#: reference_measure.xml:1607
#, no-c-format
msgid ""
", <xref linkend=\"ST_3DDistance\"/>, <xref linkend=\"ST_LongestLine\"/>, "
"<xref linkend=\"ST_ShortestLine\"/>, <xref linkend=\"ST_3DMaxDistance\"/>"
msgstr ""
", <xref linkend=\"ST_3DDistance\"/>, <xref linkend=\"ST_LongestLine\"/>, "
"<xref linkend=\"ST_ShortestLine\"/>, <xref linkend=\"ST_3DMaxDistance\"/>"

#~ msgid "Spatial Relationships and Measurements"
#~ msgstr "Relazioni e misure spaziali"

#~ msgid "ST_3DDWithin"
#~ msgstr "ST_3DDWithin"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_3DDWithin</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> "
#~ "<paramdef><type>double precision </type> <parameter>distance_of_srid</"
#~ "parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_3DDWithin</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> "
#~ "<paramdef><type>double precision </type> <parameter>distance_of_srid</"
#~ "parameter></paramdef>"

#~ msgid ""
#~ ", <xref linkend=\"ST_Distance\"/>, <xref linkend=\"ST_DWithin\"/>, <xref "
#~ "linkend=\"ST_3DMaxDistance\"/>, <xref linkend=\"ST_Transform\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_Distance\"/>, <xref linkend=\"ST_DWithin\"/>, <xref "
#~ "linkend=\"ST_3DMaxDistance\"/>, <xref linkend=\"ST_Transform\"/>"

#~ msgid "ST_3DDFullyWithin"
#~ msgstr "ST_3DDFullyWithin"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_3DDFullyWithin</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> "
#~ "<paramdef><type>double precision </type> <parameter>distance</parameter></"
#~ "paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_3DDFullyWithin</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> "
#~ "<paramdef><type>double precision </type> <parameter>distance</parameter></"
#~ "paramdef>"

#, fuzzy
#~ msgid ""
#~ "-- This compares the difference between fully within and distance within "
#~ "as well\n"
#~ "                -- as the distance fully within for the 2D footprint of "
#~ "the line/point vs. the 3d fully within\n"
#~ "                SELECT ST_3DDFullyWithin(geom_a, geom_b, 10) as "
#~ "D3DFullyWithin10, ST_3DDWithin(geom_a, geom_b, 10) as D3DWithin10,\n"
#~ "        ST_DFullyWithin(geom_a, geom_b, 20) as D2DFullyWithin20,\n"
#~ "        ST_3DDFullyWithin(geom_a, geom_b, 20) as D3DFullyWithin20 from\n"
#~ "                (select ST_GeomFromEWKT('POINT(1 1 2)') as geom_a,\n"
#~ "                ST_GeomFromEWKT('LINESTRING(1 5 2, 2 7 20, 1 9 100, 14 12 "
#~ "3)') as geom_b) t1;\n"
#~ " d3dfullywithin10 | d3dwithin10 | d2dfullywithin20 | d3dfullywithin20\n"
#~ "------------------+-------------+------------------+------------------\n"
#~ " f                | t           | t                | f"
#~ msgstr ""
#~ "postgis=# SELECT ST_DFullyWithin(geom_a, geom_b, 10) as DFullyWithin10, "
#~ "ST_DWithin(geom_a, geom_b, 10) as DWithin10, ST_DFullyWithin(geom_a, "
#~ "geom_b, 20) as DFullyWithin20 from \n"
#~ "                (select ST_GeomFromText('POINT(1 1)') as geom_a,"
#~ "ST_GeomFromText('LINESTRING(1 5, 2 7, 1 9, 14 12)') as geom_b) t1;\n"
#~ "   \n"
#~ "-----------------\n"
#~ " DFullyWithin10 | DWithin10 | DFullyWithin20 |\n"
#~ "---------------+----------+---------------+\n"
#~ " f             | t        | t             |"

#~ msgid ""
#~ ", <xref linkend=\"ST_3DDWithin\"/>, <xref linkend=\"ST_DWithin\"/>, <xref "
#~ "linkend=\"ST_DFullyWithin\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_3DDWithin\"/>, <xref linkend=\"ST_DWithin\"/>, <xref "
#~ "linkend=\"ST_DFullyWithin\"/>"

#~ msgid "ST_3DIntersects"
#~ msgstr "ST_3DIntersects"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_3DIntersects</function></funcdef> "
#~ "<paramdef> <type>geometry</type> <parameter>geomA</parameter> </paramdef> "
#~ "<paramdef> <type>geometry</type> <parameter>geomB</parameter> </paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_3DIntersects</function></funcdef> "
#~ "<paramdef> <type>geometry</type> <parameter>geomA</parameter> </paramdef> "
#~ "<paramdef> <type>geometry</type> <parameter>geomB</parameter> </paramdef>"

#~ msgid "&sqlmm_compliant; SQL-MM 3: ?"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: ?"

#, fuzzy
#~ msgid ""
#~ "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt,line)\n"
#~ "        FROM (SELECT 'POINT(0 0 2)'::geometry As pt,\n"
#~ "                'LINESTRING (0 0 1, 0 2 3 )'::geometry As line) As foo;\n"
#~ " st_3dintersects | st_intersects\n"
#~ "-----------------+---------------\n"
#~ " f               | t\n"
#~ "(1 row)"
#~ msgstr ""
#~ "SELECT ST_3DIntersects(pt, line), ST_Intersects(pt,line) \n"
#~ "        FROM (SELECT 'POINT(0 0 2)'::geometry As pt, \n"
#~ "                'LINESTRING (0 0 1, 0 2 3 )'::geometry As line) As foo;\n"
#~ " st_3dintersects | st_intersects\n"
#~ "-----------------+---------------\n"
#~ " f               | t\n"
#~ "(1 row)"

#~ msgid ""
#~ "SELECT ST_Area(the_geom) As sqft, ST_Area(the_geom)*POWER(0.3048,2) As "
#~ "sqm\n"
#~ "                FROM (SELECT\n"
#~ "                ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,\n"
#~ "                        743265 2967450,743265.625 2967416,743238 "
#~ "2967416))',2249) ) As foo(the_geom);\n"
#~ "  sqft   |     sqm\n"
#~ "---------+-------------\n"
#~ " 928.625 | 86.27208552"
#~ msgstr ""
#~ "SELECT ST_Area(the_geom) As sqft, ST_Area(the_geom)*POWER(0.3048,2) As "
#~ "sqm\n"
#~ "                FROM (SELECT\n"
#~ "                ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,\n"
#~ "                        743265 2967450,743265.625 2967416,743238 "
#~ "2967416))',2249) ) As foo(the_geom);\n"
#~ "  sqft   |     sqm\n"
#~ "---------+-------------\n"
#~ " 928.625 | 86.27208552"

#~ msgid ""
#~ "SELECT ST_Area(the_geom) As sqft, ST_Area(ST_Transform(the_geom,26986)) "
#~ "As sqm\n"
#~ "                FROM (SELECT\n"
#~ "                ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,\n"
#~ "                        743265 2967450,743265.625 2967416,743238 "
#~ "2967416))',2249) ) As foo(the_geom);\n"
#~ "  sqft   |       sqm\n"
#~ "---------+------------------\n"
#~ " 928.625 | 86.2724304199219"
#~ msgstr ""
#~ "SELECT ST_Area(the_geom) As sqft, ST_Area(ST_Transform(the_geom,26986)) "
#~ "As sqm\n"
#~ "                FROM (SELECT\n"
#~ "                ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,\n"
#~ "                        743265 2967450,743265.625 2967416,743238 "
#~ "2967416))',2249) ) As foo(the_geom);\n"
#~ "  sqft   |       sqm\n"
#~ "---------+------------------\n"
#~ " 928.625 | 86.2724304199219"

#~ msgid ""
#~ ", <xref linkend=\"ST_GeographyFromText\"/>, <xref linkend=\"ST_SetSRID\"/"
#~ ">, <xref linkend=\"ST_Transform\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_GeographyFromText\"/>, <xref linkend=\"ST_SetSRID\"/"
#~ ">, <xref linkend=\"ST_Transform\"/>"

#~ msgid "ST_Centroid"
#~ msgstr "ST_Centroid"

#, fuzzy
#~ msgid ""
#~ "<funcprototype> <funcdef>geometry <function>ST_Centroid</function></"
#~ "funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>geography "
#~ "<function>ST_Centroid</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>g1</parameter></paramdef> <paramdef choice=\"opt"
#~ "\"><type>boolean </type> <parameter>use_spheroid=true</parameter></"
#~ "paramdef> </funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>float <function>ST_Length</function></funcdef> "
#~ "<paramdef><type>geometry </type><parameter>a_2dlinestring</parameter></"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>float "
#~ "<function>ST_Length</function></funcdef> <paramdef><type>geography </"
#~ "type><parameter>geog</parameter></paramdef> <paramdef choice=\"opt"
#~ "\"><type>boolean </type><parameter>use_spheroid=true</parameter></"
#~ "paramdef> </funcprototype>"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 8.1.4, 9.5.5"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 8.1.4, 9.5.5"

#~ msgid "Centroid of a <varname>MULTIPOINT</varname>"
#~ msgstr "Centroide di un <varname>MULTIPOINT</varname>"

#~ msgid "Centroid of a <varname>LINESTRING</varname>"
#~ msgstr "Centroide di una <varname>LINESTRING</varname>"

#~ msgid "Centroid of a <varname>POLYGON</varname>"
#~ msgstr "Centroide di un <varname>POLYGON</varname>"

#~ msgid "Centroid of a <varname>GEOMETRYCOLLECTION</varname>"
#~ msgstr "Centroide di una <varname>GEOMETRYCOLLECTION</varname>"

#, fuzzy
#~ msgid ", <xref linkend=\"ST_GeometricMedian\"/>"
#~ msgstr ", <xref linkend=\"ST_Reverse\"/>"

#, fuzzy
#~ msgid ""
#~ "<funcdef>integer <function>ST_ClusterDBSCAN</function></funcdef> "
#~ "<paramdef><type>geometry winset </type> <parameter>geom</parameter></"
#~ "paramdef> <paramdef><type>float8 </type> <parameter>eps</parameter></"
#~ "paramdef> <paramdef><type>integer </type> <parameter>minpoints</"
#~ "parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geography <function>ST_Project</function></funcdef> "
#~ "<paramdef><type>geography </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>distance</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>azimuth</parameter></paramdef>"

#, fuzzy
#~ msgid "Availability: 2.3.0 - requires GEOS"
#~ msgstr "Disponibilità: 2.0"

#, fuzzy
#~ msgid ""
#~ ", <xref linkend=\"ST_ClusterKMeans\"/>, <xref linkend="
#~ "\"ST_ClusterIntersecting\"/>, <xref linkend=\"ST_ClusterWithin\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_Covers\"/>, <xref linkend=\"ST_ExteriorRing\"/>, "
#~ "<xref linkend=\"ST_Within\"/>"

#, fuzzy
#~ msgid "ST_ClusterIntersecting"
#~ msgstr "ST_3DIntersects"

#, fuzzy
#~ msgid ""
#~ "<funcdef>geometry[] <function>ST_ClusterIntersecting</function></funcdef> "
#~ "<paramdef><type>geometry set</type> <parameter>g</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_Centroid</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>"

#, fuzzy
#~ msgid "Availability: 2.2.0 - requires GEOS"
#~ msgstr "Disponibilità: 2.0"

#, fuzzy
#~ msgid ""
#~ ", <xref linkend=\"ST_ClusterKMeans\"/>, <xref linkend=\"ST_ClusterWithin"
#~ "\"/>"
#~ msgstr ", <xref linkend=\"ST_CoveredBy\"/>, <xref linkend=\"ST_Within\"/>"

#, fuzzy
#~ msgid ""
#~ "<funcdef>integer <function>ST_ClusterKMeans</function></funcdef> "
#~ "<paramdef><type>geometry winset </type> <parameter>geom</parameter></"
#~ "paramdef> <paramdef><type>integer </type> <parameter>number_of_clusters</"
#~ "parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_Contains</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomB</parameter></paramdef>"

#, fuzzy
#~ msgid ""
#~ ", <xref linkend=\"ST_ClusterIntersecting\"/>, <xref linkend="
#~ "\"ST_ClusterWithin\"/>, <xref linkend=\"ST_Subdivide\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_Covers\"/>, <xref linkend=\"ST_ExteriorRing\"/>, "
#~ "<xref linkend=\"ST_Within\"/>"

#, fuzzy
#~ msgid "ST_ClusterWithin"
#~ msgstr "ST_Within"

#, fuzzy
#~ msgid ""
#~ "<funcdef>geometry[] <function>ST_ClusterWithin</function></funcdef> "
#~ "<paramdef><type>geometry set </type> <parameter>g</parameter></paramdef> "
#~ "<paramdef><type>float8 </type> <parameter>distance</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_ClosestPoint</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#, fuzzy
#~ msgid ""
#~ ", <xref linkend=\"ST_ClusterKMeans\"/>, <xref linkend="
#~ "\"ST_ClusterIntersecting\"/>"
#~ msgstr ", <xref linkend=\"ST_CoveredBy\"/>, <xref linkend=\"ST_Within\"/>"

#~ msgid "ST_Contains"
#~ msgstr "ST_Contains"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_Contains</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomB</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_Contains</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomB</parameter></paramdef>"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.31"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.31"

#~ msgid "<varname>LINESTRING</varname> / <varname>MULTIPOINT</varname>"
#~ msgstr "<varname>LINESTRING</varname> / <varname>MULTIPOINT</varname>"

#~ msgid "<varname>POLYGON</varname> / <varname>POINT</varname>"
#~ msgstr "<varname>POLYGON</varname> / <varname>POINT</varname>"

#~ msgid "<varname>POLYGON</varname> / <varname>LINESTRING</varname>"
#~ msgstr "<varname>POLYGON</varname> / <varname>LINESTRING</varname>"

#~ msgid "<varname>POLYGON</varname> / <varname>POLYGON</varname>"
#~ msgstr "<varname>POLYGON</varname> / <varname>POLYGON</varname>"

#~ msgid "<varname>POLYGON</varname> / <varname>MULTIPOINT</varname>"
#~ msgstr "<varname>POLYGON</varname> / <varname>MULTIPOINT</varname>"

#~ msgid ""
#~ ", <xref linkend=\"ST_ContainsProperly\"/>, <xref linkend=\"ST_Covers\"/>, "
#~ "<xref linkend=\"ST_CoveredBy\"/>, <xref linkend=\"ST_Equals\"/>, <xref "
#~ "linkend=\"ST_Within\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_ContainsProperly\"/>, <xref linkend=\"ST_Covers\"/>, "
#~ "<xref linkend=\"ST_CoveredBy\"/>, <xref linkend=\"ST_Equals\"/>, <xref "
#~ "linkend=\"ST_Within\"/>"

#~ msgid "ST_ContainsProperly"
#~ msgstr "ST_ContainsProperly"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_ContainsProperly</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomB</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_ContainsProperly</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomB</parameter></paramdef>"

#~ msgid ""
#~ ", <xref linkend=\"ST_Boundary\"/>, <xref linkend=\"ST_Contains\"/>, <xref "
#~ "linkend=\"ST_Covers\"/>, <xref linkend=\"ST_CoveredBy\"/>, <xref linkend="
#~ "\"ST_Equals\"/>, <xref linkend=\"ST_Relate\"/>, <xref linkend=\"ST_Within"
#~ "\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_Boundary\"/>, <xref linkend=\"ST_Contains\"/>, <xref "
#~ "linkend=\"ST_Covers\"/>, <xref linkend=\"ST_CoveredBy\"/>, <xref linkend="
#~ "\"ST_Equals\"/>, <xref linkend=\"ST_Relate\"/>, <xref linkend=\"ST_Within"
#~ "\"/>"

#~ msgid "ST_Covers"
#~ msgstr "ST_Covers"

#~ msgid ""
#~ "<funcprototype> <funcdef>boolean <function>ST_Covers</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomB</parameter></paramdef> "
#~ "</funcprototype> <funcprototype> <funcdef>boolean <function>ST_Covers</"
#~ "function></funcdef> <paramdef><type>geography </type> "
#~ "<parameter>geogpolyA</parameter></paramdef> <paramdef><type>geography </"
#~ "type> <parameter>geogpointB</parameter></paramdef> </funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>boolean <function>ST_Covers</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomB</parameter></paramdef> "
#~ "</funcprototype> <funcprototype> <funcdef>boolean <function>ST_Covers</"
#~ "function></funcdef> <paramdef><type>geography </type> "
#~ "<parameter>geogpolyA</parameter></paramdef> <paramdef><type>geography </"
#~ "type> <parameter>geogpointB</parameter></paramdef> </funcprototype>"

#~ msgid "Not an OGC standard, but Oracle has it too."
#~ msgstr "Non è uno standard OGC, ma è presente anche in Oracle."

#~ msgid ", <xref linkend=\"ST_CoveredBy\"/>, <xref linkend=\"ST_Within\"/>"
#~ msgstr ", <xref linkend=\"ST_CoveredBy\"/>, <xref linkend=\"ST_Within\"/>"

#~ msgid "ST_CoveredBy"
#~ msgstr "ST_CoveredBy"

#~ msgid ""
#~ "<funcprototype> <funcdef>boolean <function>ST_CoveredBy</function></"
#~ "funcdef> <paramdef><type>geometry </type> <parameter>geomA</parameter></"
#~ "paramdef> <paramdef><type>geometry </type> <parameter>geomB</parameter></"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>boolean "
#~ "<function>ST_CoveredBy</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>geogA</parameter></paramdef> <paramdef><type>geography </"
#~ "type> <parameter>geogB</parameter></paramdef> </funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>boolean <function>ST_CoveredBy</function></"
#~ "funcdef> <paramdef><type>geometry </type> <parameter>geomA</parameter></"
#~ "paramdef> <paramdef><type>geometry </type> <parameter>geomB</parameter></"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>boolean "
#~ "<function>ST_CoveredBy</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>geogA</parameter></paramdef> <paramdef><type>geography </"
#~ "type> <parameter>geogB</parameter></paramdef> </funcprototype>"

#~ msgid ""
#~ ", <xref linkend=\"ST_Covers\"/>, <xref linkend=\"ST_ExteriorRing\"/>, "
#~ "<xref linkend=\"ST_Within\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_Covers\"/>, <xref linkend=\"ST_ExteriorRing\"/>, "
#~ "<xref linkend=\"ST_Within\"/>"

#~ msgid "ST_Crosses"
#~ msgstr "ST_Crosses"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_Crosses</function></funcdef> "
#~ "<paramdef><type>geometry </type><parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type><parameter>g2</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_Crosses</function></funcdef> "
#~ "<paramdef><type>geometry </type><parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type><parameter>g2</parameter></paramdef>"

#~ msgid ""
#~ "<markup>T*T******</markup> (for Point/Line, Point/Area, and Line/Area "
#~ "situations)"
#~ msgstr ""
#~ "<markup>T*T******</markup> (per casi Point/Line, Point/Area, e Line/Area)"

#~ msgid "&sfs_compliant; s2.1.13.3"
#~ msgstr "&sfs_compliant; s2.1.13.3"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.29"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.29"

#~ msgid "<varname>MULTIPOINT</varname> / <varname>LINESTRING</varname>"
#~ msgstr "<varname>MULTIPOINT</varname> / <varname>LINESTRING</varname>"

#~ msgid "<varname>MULTIPOINT</varname> / <varname>POLYGON</varname>"
#~ msgstr "<varname>MULTIPOINT</varname> / <varname>POLYGON</varname>"

#~ msgid "<varname>LINESTRING</varname> / <varname>POLYGON</varname>"
#~ msgstr "<varname>LINESTRING</varname> / <varname>POLYGON</varname>"

#~ msgid "<varname>LINESTRING</varname> / <varname>LINESTRING</varname>"
#~ msgstr "<varname>LINESTRING</varname> / <varname>LINESTRING</varname>"

#~ msgid ""
#~ "CREATE TABLE roads (\n"
#~ "  id serial NOT NULL,\n"
#~ "  the_geom geometry,\n"
#~ "  CONSTRAINT roads_pkey PRIMARY KEY (road_id)\n"
#~ ");"
#~ msgstr ""
#~ "CREATE TABLE roads (\n"
#~ "  id serial NOT NULL,\n"
#~ "  the_geom geometry,\n"
#~ "  CONSTRAINT roads_pkey PRIMARY KEY (road_id)\n"
#~ ");"

#~ msgid ""
#~ "CREATE TABLE highways (\n"
#~ "  id serial NOT NULL,\n"
#~ "  the_gem geometry,\n"
#~ "  CONSTRAINT roads_pkey PRIMARY KEY (road_id)\n"
#~ ");"
#~ msgstr ""
#~ "CREATE TABLE highways (\n"
#~ "  id serial NOT NULL,\n"
#~ "  the_gem geometry,\n"
#~ "  CONSTRAINT roads_pkey PRIMARY KEY (road_id)\n"
#~ ");"

#~ msgid ""
#~ "SELECT roads.id\n"
#~ "FROM roads, highways\n"
#~ "WHERE ST_Crosses(roads.the_geom, highways.the_geom);"
#~ msgstr ""
#~ "SELECT roads.id\n"
#~ "FROM roads, highways\n"
#~ "WHERE ST_Crosses(roads.the_geom, highways.the_geom);"

#~ msgid "ST_LineCrossingDirection"
#~ msgstr "ST_LineCrossingDirection"

#~ msgid ""
#~ "<funcdef>integer <function>ST_LineCrossingDirection</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>linestringA</parameter></"
#~ "paramdef> <paramdef><type>geometry </type> <parameter>linestringB</"
#~ "parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>integer <function>ST_LineCrossingDirection</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>linestringA</parameter></"
#~ "paramdef> <paramdef><type>geometry </type> <parameter>linestringB</"
#~ "parameter></paramdef>"

#~ msgid "Availability: 1.4"
#~ msgstr "Disponibilità: 1.4.0"

#~ msgid ""
#~ "SELECT ST_LineCrossingDirection(foo.line1, foo.line2) As l1_cross_l2 ,\n"
#~ "          ST_LineCrossingDirection(foo.line2, foo.line1) As l2_cross_l1\n"
#~ "FROM (\n"
#~ "SELECT\n"
#~ " ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') As line1,\n"
#~ " ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') As line2\n"
#~ "        ) As foo;\n"
#~ "\n"
#~ " l1_cross_l2 | l2_cross_l1\n"
#~ "-------------+-------------\n"
#~ "           3 |          -3"
#~ msgstr ""
#~ "SELECT ST_LineCrossingDirection(foo.line1, foo.line2) As l1_cross_l2 ,\n"
#~ "          ST_LineCrossingDirection(foo.line2, foo.line1) As l2_cross_l1\n"
#~ "FROM (\n"
#~ "SELECT\n"
#~ " ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') As line1,\n"
#~ " ST_GeomFromText('LINESTRING(171 154,20 140,71 74,161 53)') As line2\n"
#~ "        ) As foo;\n"
#~ "\n"
#~ " l1_cross_l2 | l2_cross_l1\n"
#~ "-------------+-------------\n"
#~ "           3 |          -3"

#~ msgid ""
#~ "SELECT ST_LineCrossingDirection(foo.line1, foo.line2) As l1_cross_l2 ,\n"
#~ "          ST_LineCrossingDirection(foo.line2, foo.line1) As l2_cross_l1\n"
#~ "FROM (\n"
#~ " SELECT\n"
#~ "  ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') As line1,\n"
#~ "  ST_GeomFromText('LINESTRING (171 154, 20 140, 71 74, 2.99 90.16)') As "
#~ "line2\n"
#~ ") As foo;\n"
#~ "\n"
#~ " l1_cross_l2 | l2_cross_l1\n"
#~ "-------------+-------------\n"
#~ "           2 |          -2"
#~ msgstr ""
#~ "SELECT ST_LineCrossingDirection(foo.line1, foo.line2) As l1_cross_l2 ,\n"
#~ "          ST_LineCrossingDirection(foo.line2, foo.line1) As l2_cross_l1\n"
#~ "FROM (\n"
#~ " SELECT\n"
#~ "  ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') As line1,\n"
#~ "  ST_GeomFromText('LINESTRING (171 154, 20 140, 71 74, 2.99 90.16)') As "
#~ "line2\n"
#~ ") As foo;\n"
#~ "\n"
#~ " l1_cross_l2 | l2_cross_l1\n"
#~ "-------------+-------------\n"
#~ "           2 |          -2"

#~ msgid ""
#~ "SELECT\n"
#~ "        ST_LineCrossingDirection(foo.line1, foo.line2) As l1_cross_l2 ,\n"
#~ "        ST_LineCrossingDirection(foo.line2, foo.line1) As l2_cross_l1\n"
#~ "FROM (\n"
#~ " SELECT\n"
#~ "  ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') As line1,\n"
#~ "  ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') As line2\n"
#~ "  ) As foo;\n"
#~ "\n"
#~ " l1_cross_l2 | l2_cross_l1\n"
#~ "-------------+-------------\n"
#~ "          -1 |          1"
#~ msgstr ""
#~ "SELECT\n"
#~ "        ST_LineCrossingDirection(foo.line1, foo.line2) As l1_cross_l2 ,\n"
#~ "        ST_LineCrossingDirection(foo.line2, foo.line1) As l2_cross_l1\n"
#~ "FROM (\n"
#~ " SELECT\n"
#~ "  ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') As line1,\n"
#~ "  ST_GeomFromText('LINESTRING (20 140, 71 74, 161 53)') As line2\n"
#~ "  ) As foo;\n"
#~ "\n"
#~ " l1_cross_l2 | l2_cross_l1\n"
#~ "-------------+-------------\n"
#~ "          -1 |          1"

#~ msgid ""
#~ "SELECT ST_LineCrossingDirection(foo.line1, foo.line2) As l1_cross_l2 ,\n"
#~ "          ST_LineCrossingDirection(foo.line2, foo.line1) As l2_cross_l1\n"
#~ "FROM (SELECT\n"
#~ "        ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') As "
#~ "line1,\n"
#~ "        ST_GeomFromText('LINESTRING(2.99 90.16,71 74,20 140,171 154)') As "
#~ "line2\n"
#~ "        ) As foo;\n"
#~ "\n"
#~ " l1_cross_l2 | l2_cross_l1\n"
#~ "-------------+-------------\n"
#~ "          -2 |          2"
#~ msgstr ""
#~ "SELECT ST_LineCrossingDirection(foo.line1, foo.line2) As l1_cross_l2 ,\n"
#~ "          ST_LineCrossingDirection(foo.line2, foo.line1) As l2_cross_l1\n"
#~ "FROM (SELECT\n"
#~ "        ST_GeomFromText('LINESTRING(25 169,89 114,40 70,86 43)') As "
#~ "line1,\n"
#~ "        ST_GeomFromText('LINESTRING(2.99 90.16,71 74,20 140,171 154)') As "
#~ "line2\n"
#~ "        ) As foo;\n"
#~ "\n"
#~ " l1_cross_l2 | l2_cross_l1\n"
#~ "-------------+-------------\n"
#~ "          -2 |          2"

#~ msgid ""
#~ "SELECT s1.gid, s2.gid, ST_LineCrossingDirection(s1.the_geom, s2."
#~ "the_geom)\n"
#~ "        FROM streets s1 CROSS JOIN streets s2 ON (s1.gid != s2.gid AND s1."
#~ "the_geom &amp;&amp; s2.the_geom )\n"
#~ "WHERE ST_CrossingDirection(s1.the_geom, s2.the_geom) > 0;"
#~ msgstr ""
#~ "SELECT s1.gid, s2.gid, ST_LineCrossingDirection(s1.the_geom, s2."
#~ "the_geom)\n"
#~ "        FROM streets s1 CROSS JOIN streets s2 ON (s1.gid != s2.gid AND s1."
#~ "the_geom &amp;&amp; s2.the_geom )\n"
#~ "WHERE ST_CrossingDirection(s1.the_geom, s2.the_geom) > 0;"

#~ msgid "ST_Disjoint"
#~ msgstr "ST_Disjoint"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_Disjoint</function></funcdef> <paramdef> "
#~ "<type>geometry</type> <parameter>A</parameter> </paramdef> <paramdef> "
#~ "<type>geometry</type> <parameter>B</parameter> </paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_Disjoint</function></funcdef> <paramdef> "
#~ "<type>geometry</type> <parameter>A</parameter> </paramdef> <paramdef> "
#~ "<type>geometry</type> <parameter>B</parameter> </paramdef>"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.26"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.26"

#~ msgid ""
#~ "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::"
#~ "geometry);\n"
#~ " st_disjoint\n"
#~ "---------------\n"
#~ " t\n"
#~ "(1 row)\n"
#~ "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::"
#~ "geometry);\n"
#~ " st_disjoint\n"
#~ "---------------\n"
#~ " f\n"
#~ "(1 row)"
#~ msgstr ""
#~ "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::"
#~ "geometry);\n"
#~ " st_disjoint\n"
#~ "---------------\n"
#~ " t\n"
#~ "(1 row)\n"
#~ "SELECT ST_Disjoint('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::"
#~ "geometry);\n"
#~ " st_disjoint\n"
#~ "---------------\n"
#~ " f\n"
#~ "(1 row)"

#~ msgid ""
#~ "<funcprototype> <funcdef>float <function>ST_Distance</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> </"
#~ "funcprototype> <funcprototype> <funcdef>float <function>ST_Distance</"
#~ "function></funcdef> <paramdef><type>geography </type> <parameter>gg1</"
#~ "parameter></paramdef> <paramdef><type>geography </type> <parameter>gg2</"
#~ "parameter></paramdef> </funcprototype> <funcprototype> <funcdef>float "
#~ "<function>ST_Distance</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>gg1</parameter></paramdef> <paramdef><type>geography </"
#~ "type> <parameter>gg2</parameter></paramdef> <paramdef><type>boolean </"
#~ "type> <parameter>use_spheroid</parameter></paramdef> </funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>float <function>ST_Distance</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> </"
#~ "funcprototype> <funcprototype> <funcdef>float <function>ST_Distance</"
#~ "function></funcdef> <paramdef><type>geography </type> <parameter>gg1</"
#~ "parameter></paramdef> <paramdef><type>geography </type> <parameter>gg2</"
#~ "parameter></paramdef> </funcprototype> <funcprototype> <funcdef>float "
#~ "<function>ST_Distance</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>gg1</parameter></paramdef> <paramdef><type>geography </"
#~ "type> <parameter>gg2</parameter></paramdef> <paramdef><type>boolean </"
#~ "type> <parameter>use_spheroid</parameter></paramdef> </funcprototype>"

#~ msgid "ST_DFullyWithin"
#~ msgstr "ST_DFullyWithin"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_DFullyWithin</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> "
#~ "<paramdef><type>double precision </type> <parameter>distance</parameter></"
#~ "paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_DFullyWithin</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef> "
#~ "<paramdef><type>double precision </type> <parameter>distance</parameter></"
#~ "paramdef>"

#, fuzzy
#~ msgid ""
#~ "postgis=# SELECT ST_DFullyWithin(geom_a, geom_b, 10) as DFullyWithin10, "
#~ "ST_DWithin(geom_a, geom_b, 10) as DWithin10, ST_DFullyWithin(geom_a, "
#~ "geom_b, 20) as DFullyWithin20 from\n"
#~ "                (select ST_GeomFromText('POINT(1 1)') as geom_a,"
#~ "ST_GeomFromText('LINESTRING(1 5, 2 7, 1 9, 14 12)') as geom_b) t1;\n"
#~ "\n"
#~ "-----------------\n"
#~ " DFullyWithin10 | DWithin10 | DFullyWithin20 |\n"
#~ "---------------+----------+---------------+\n"
#~ " f             | t        | t             |"
#~ msgstr ""
#~ "postgis=# SELECT ST_DFullyWithin(geom_a, geom_b, 10) as DFullyWithin10, "
#~ "ST_DWithin(geom_a, geom_b, 10) as DWithin10, ST_DFullyWithin(geom_a, "
#~ "geom_b, 20) as DFullyWithin20 from \n"
#~ "                (select ST_GeomFromText('POINT(1 1)') as geom_a,"
#~ "ST_GeomFromText('LINESTRING(1 5, 2 7, 1 9, 14 12)') as geom_b) t1;\n"
#~ "   \n"
#~ "-----------------\n"
#~ " DFullyWithin10 | DWithin10 | DFullyWithin20 |\n"
#~ "---------------+----------+---------------+\n"
#~ " f             | t        | t             |"

#~ msgid ", <xref linkend=\"ST_DWithin\"/>"
#~ msgstr ", <xref linkend=\"ST_DWithin\"/>"

#~ msgid "ST_DWithin"
#~ msgstr "ST_DWithin"

#~ msgid ""
#~ "<funcprototype> <funcdef>boolean <function>ST_DWithin</function></"
#~ "funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
#~ "paramdef> <paramdef><type>geometry </type> <parameter>g2</parameter></"
#~ "paramdef> <paramdef><type>double precision </type> "
#~ "<parameter>distance_of_srid</parameter></paramdef> </funcprototype> "
#~ "<funcprototype> <funcdef>boolean <function>ST_DWithin</function></"
#~ "funcdef> <paramdef><type>geography </type> <parameter>gg1</parameter></"
#~ "paramdef> <paramdef><type>geography </type> <parameter>gg2</parameter></"
#~ "paramdef> <paramdef><type>double precision </type> "
#~ "<parameter>distance_meters</parameter></paramdef> </funcprototype> "
#~ "<funcprototype> <funcdef>boolean <function>ST_DWithin</function></"
#~ "funcdef> <paramdef><type>geography </type> <parameter>gg1</parameter></"
#~ "paramdef> <paramdef><type>geography </type> <parameter>gg2</parameter></"
#~ "paramdef> <paramdef><type>double precision </type> "
#~ "<parameter>distance_meters</parameter></paramdef> <paramdef><type>boolean "
#~ "</type> <parameter>use_spheroid</parameter></paramdef> </funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>boolean <function>ST_DWithin</function></"
#~ "funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
#~ "paramdef> <paramdef><type>geometry </type> <parameter>g2</parameter></"
#~ "paramdef> <paramdef><type>double precision </type> "
#~ "<parameter>distance_of_srid</parameter></paramdef> </funcprototype> "
#~ "<funcprototype> <funcdef>boolean <function>ST_DWithin</function></"
#~ "funcdef> <paramdef><type>geography </type> <parameter>gg1</parameter></"
#~ "paramdef> <paramdef><type>geography </type> <parameter>gg2</parameter></"
#~ "paramdef> <paramdef><type>double precision </type> "
#~ "<parameter>distance_meters</parameter></paramdef> </funcprototype> "
#~ "<funcprototype> <funcdef>boolean <function>ST_DWithin</function></"
#~ "funcdef> <paramdef><type>geography </type> <parameter>gg1</parameter></"
#~ "paramdef> <paramdef><type>geography </type> <parameter>gg2</parameter></"
#~ "paramdef> <paramdef><type>double precision </type> "
#~ "<parameter>distance_meters</parameter></paramdef> <paramdef><type>boolean "
#~ "</type> <parameter>use_spheroid</parameter></paramdef> </funcprototype>"

#, fuzzy
#~ msgid ", <xref linkend=\"ST_Expand\"/>, <xref linkend=\"ST_3DDWithin\"/>"
#~ msgstr ", <xref linkend=\"ST_CoveredBy\"/>, <xref linkend=\"ST_Within\"/>"

#~ msgid "ST_Equals"
#~ msgstr "ST_Equals"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_Equals</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>A</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_Equals</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>A</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>"

#~ msgid "&sfs_compliant; s2.1.1.2"
#~ msgstr "&sfs_compliant; s2.1.1.2"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.24"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.24"

#~ msgid ""
#~ "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));\n"
#~ " st_equals\n"
#~ "-----------\n"
#~ " t\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));\n"
#~ " st_equals\n"
#~ "-----------\n"
#~ " t\n"
#~ "(1 row)"
#~ msgstr ""
#~ "SELECT ST_Equals(ST_GeomFromText('LINESTRING(0 0, 10 10)'),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));\n"
#~ " st_equals\n"
#~ "-----------\n"
#~ " t\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_Equals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 10)')),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));\n"
#~ " st_equals\n"
#~ "-----------\n"
#~ " t\n"
#~ "(1 row)"

#~ msgid ""
#~ ", <xref linkend=\"ST_OrderingEquals\"/>, <xref linkend=\"ST_Reverse\"/>, "
#~ "<xref linkend=\"ST_Within\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_OrderingEquals\"/>, <xref linkend=\"ST_Reverse\"/>, "
#~ "<xref linkend=\"ST_Within\"/>"

#, fuzzy
#~ msgid ""
#~ "<funcdef>geometry <function> ST_GeometricMedian </function> </funcdef> "
#~ "<paramdef> <type> geometry </type> <parameter> g </parameter> </paramdef> "
#~ "<paramdef> <type> float8 </type> <parameter> tolerance </parameter> </"
#~ "paramdef> <paramdef> <type> int </type> <parameter> max_iter </parameter> "
#~ "</paramdef> <paramdef> <type> boolean </type> <parameter> "
#~ "fail_if_not_converged </parameter> </paramdef>"
#~ msgstr ""
#~ "<funcdef>geography <function>ST_Project</function></funcdef> "
#~ "<paramdef><type>geography </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>distance</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>azimuth</parameter></paramdef>"

#, fuzzy
#~ msgid "&M_support;"
#~ msgstr "&Z_support;"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_HasArc</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_HasArc</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>"

#~ msgid ""
#~ "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', "
#~ "'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));\n"
#~ "                st_hasarc\n"
#~ "                --------\n"
#~ "                t"
#~ msgstr ""
#~ "SELECT ST_HasArc(ST_Collect('LINESTRING(1 2, 3 4, 5 6)', "
#~ "'CIRCULARSTRING(1 1, 2 3, 4 5, 6 7, 5 6)'));\n"
#~ "                st_hasarc\n"
#~ "                --------\n"
#~ "                t"

#~ msgid ", <xref linkend=\"ST_LineToCurve\"/>"
#~ msgstr ", <xref linkend=\"ST_LineToCurve\"/>"

#, fuzzy
#~ msgid "ST_Intersects"
#~ msgstr "ST_3DIntersects"

#~ msgid ""
#~ "<funcprototype> <funcdef>boolean <function>ST_Intersects</function></"
#~ "funcdef> <paramdef> <type>geometry</type> <parameter>geomA</parameter> </"
#~ "paramdef> <paramdef> <type>geometry</type> <parameter>geomB</parameter> </"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>boolean "
#~ "<function>ST_Intersects</function></funcdef> <paramdef> <type>geography</"
#~ "type> <parameter>geogA</parameter> </paramdef> <paramdef> "
#~ "<type>geography</type> <parameter>geogB</parameter> </paramdef> </"
#~ "funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>boolean <function>ST_Intersects</function></"
#~ "funcdef> <paramdef> <type>geometry</type> <parameter>geomA</parameter> </"
#~ "paramdef> <paramdef> <type>geometry</type> <parameter>geomB</parameter> </"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>boolean "
#~ "<function>ST_Intersects</function></funcdef> <paramdef> <type>geography</"
#~ "type> <parameter>geogA</parameter> </paramdef> <paramdef> "
#~ "<type>geography</type> <parameter>geogB</parameter> </paramdef> </"
#~ "funcprototype>"

#~ msgid ""
#~ "&sfs_compliant; s2.1.1.2 //s2.1.13.3 - ST_Intersects(g1, g2 ) --&gt; Not "
#~ "(ST_Disjoint(g1, g2 ))"
#~ msgstr ""
#~ "&sfs_compliant; s2.1.1.2 //s2.1.13.3 - ST_Intersects(g1, g2 ) --&gt; Not "
#~ "(ST_Disjoint(g1, g2 ))"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.27"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.27"

#~ msgid ""
#~ "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::"
#~ "geometry);\n"
#~ " st_intersects\n"
#~ "---------------\n"
#~ " f\n"
#~ "(1 row)\n"
#~ "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::"
#~ "geometry);\n"
#~ " st_intersects\n"
#~ "---------------\n"
#~ " t\n"
#~ "(1 row)"
#~ msgstr ""
#~ "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 2 0, 0 2 )'::"
#~ "geometry);\n"
#~ " st_intersects\n"
#~ "---------------\n"
#~ " f\n"
#~ "(1 row)\n"
#~ "SELECT ST_Intersects('POINT(0 0)'::geometry, 'LINESTRING ( 0 0, 0 2 )'::"
#~ "geometry);\n"
#~ " st_intersects\n"
#~ "---------------\n"
#~ " t\n"
#~ "(1 row)"

#~ msgid ", <xref linkend=\"ST_Disjoint\"/>"
#~ msgstr ", <xref linkend=\"ST_Disjoint\"/>"

#~ msgid "ST_Length2D_Spheroid"
#~ msgstr "ST_Length2D_Spheroid"

#, fuzzy
#~ msgid ""
#~ "<funcdef>float <function>ST_Length2D_Spheroid</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>a_geometry</parameter></"
#~ "paramdef> <paramdef><type>spheroid </type> <parameter>a_spheroid</"
#~ "parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_Contains</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomB</parameter></paramdef>"

#~ msgid ""
#~ "SELECT ST_Length2D_Spheroid( geometry_column,\n"
#~ "                          'SPHEROID[\"GRS_1980\",6378137,298.257222101]' )\n"
#~ "                          FROM geometry_table;\n"
#~ "\n"
#~ "SELECT ST_Length2D_Spheroid( the_geom, sph_m ) As tot_len,\n"
#~ "ST_Length2D_Spheroid(ST_GeometryN(the_geom,1), sph_m) As len_line1,\n"
#~ "ST_Length2D_Spheroid(ST_GeometryN(the_geom,2), sph_m) As len_line2\n"
#~ "                          FROM (SELECT "
#~ "ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5),\n"
#~ "        (-71.05957 42.3589 , -71.061 43))') As the_geom,\n"
#~ "CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As "
#~ "sph_m)  as foo;\n"
#~ "        tot_len      |    len_line1     |    len_line2\n"
#~ "------------------+------------------+------------------\n"
#~ " 85204.5207562955 | 13986.8725229309 | 71217.6482333646\n"
#~ "\n"
#~ " --3D Observe same answer\n"
#~ "SELECT ST_Length2D_Spheroid( the_geom, sph_m ) As tot_len,\n"
#~ "ST_Length2D_Spheroid(ST_GeometryN(the_geom,1), sph_m) As len_line1,\n"
#~ "ST_Length2D_Spheroid(ST_GeometryN(the_geom,2), sph_m) As len_line2\n"
#~ "                          FROM (SELECT "
#~ "ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30),\n"
#~ "        (-71.05957 42.3589 75, -71.061 43 90))') As the_geom,\n"
#~ "CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As "
#~ "sph_m)  as foo;\n"
#~ "\n"
#~ "        tot_len      |    len_line1     |    len_line2\n"
#~ "------------------+------------------+------------------\n"
#~ " 85204.5207562955 | 13986.8725229309 | 71217.6482333646"
#~ msgstr ""
#~ "SELECT ST_Length2D_Spheroid( geometry_column,\n"
#~ "                          'SPHEROID[\"GRS_1980\",6378137,298.257222101]' )\n"
#~ "                          FROM geometry_table;\n"
#~ "\n"
#~ "SELECT ST_Length2D_Spheroid( the_geom, sph_m ) As tot_len,\n"
#~ "ST_Length2D_Spheroid(ST_GeometryN(the_geom,1), sph_m) As len_line1,\n"
#~ "ST_Length2D_Spheroid(ST_GeometryN(the_geom,2), sph_m) As len_line2\n"
#~ "                          FROM (SELECT "
#~ "ST_GeomFromText('MULTILINESTRING((-118.584 38.374,-118.583 38.5),\n"
#~ "        (-71.05957 42.3589 , -71.061 43))') As the_geom,\n"
#~ "CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As "
#~ "sph_m)  as foo;\n"
#~ "        tot_len      |    len_line1     |    len_line2\n"
#~ "------------------+------------------+------------------\n"
#~ " 85204.5207562955 | 13986.8725229309 | 71217.6482333646\n"
#~ "\n"
#~ " --3D Observe same answer\n"
#~ "SELECT ST_Length2D_Spheroid( the_geom, sph_m ) As tot_len,\n"
#~ "ST_Length2D_Spheroid(ST_GeometryN(the_geom,1), sph_m) As len_line1,\n"
#~ "ST_Length2D_Spheroid(ST_GeometryN(the_geom,2), sph_m) As len_line2\n"
#~ "                          FROM (SELECT "
#~ "ST_GeomFromEWKT('MULTILINESTRING((-118.584 38.374 20,-118.583 38.5 30),\n"
#~ "        (-71.05957 42.3589 75, -71.061 43 90))') As the_geom,\n"
#~ "CAST('SPHEROID[\"GRS_1980\",6378137,298.257222101]' As spheroid) As "
#~ "sph_m)  as foo;\n"
#~ "\n"
#~ "        tot_len      |    len_line1     |    len_line2\n"
#~ "------------------+------------------+------------------\n"
#~ " 85204.5207562955 | 13986.8725229309 | 71217.6482333646"

#~ msgid "ST_OrderingEquals"
#~ msgstr "ST_OrderingEquals"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_OrderingEquals</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>A</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_OrderingEquals</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>A</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.43"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.43"

#~ msgid ""
#~ "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));\n"
#~ " st_orderingequals\n"
#~ "-----------\n"
#~ " f\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));\n"
#~ " st_orderingequals\n"
#~ "-----------\n"
#~ " t\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 "
#~ "10)')),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));\n"
#~ " st_orderingequals\n"
#~ "-----------\n"
#~ " f\n"
#~ "(1 row)"
#~ msgstr ""
#~ "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 5 5, 10 10)'));\n"
#~ " st_orderingequals\n"
#~ "-----------\n"
#~ " f\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_OrderingEquals(ST_GeomFromText('LINESTRING(0 0, 10 10)'),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));\n"
#~ " st_orderingequals\n"
#~ "-----------\n"
#~ " t\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_OrderingEquals(ST_Reverse(ST_GeomFromText('LINESTRING(0 0, 10 "
#~ "10)')),\n"
#~ "                ST_GeomFromText('LINESTRING(0 0, 0 0, 10 10)'));\n"
#~ " st_orderingequals\n"
#~ "-----------\n"
#~ " f\n"
#~ "(1 row)"

#~ msgid ", <xref linkend=\"ST_Reverse\"/>"
#~ msgstr ", <xref linkend=\"ST_Reverse\"/>"

#~ msgid "ST_Overlaps"
#~ msgstr "ST_Overlaps"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_Overlaps</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>A</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_Overlaps</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>A</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>"

#~ msgid "&sfs_compliant; s2.1.1.2 // s2.1.13.3"
#~ msgstr "&sfs_compliant; s2.1.1.2 // s2.1.13.3"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.32"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.32"

#~ msgid "<varname>MULTIPOINT</varname> / <varname>MULTIPOINT</varname>"
#~ msgstr "<varname>MULTIPOINT</varname> / <varname>MULTIPOINT</varname>"

#~ msgid ""
#~ ", <xref linkend=\"ST_Crosses\"/>, <xref linkend=\"ST_Dimension\"/>, <xref "
#~ "linkend=\"ST_Intersects\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_Crosses\"/>, <xref linkend=\"ST_Dimension\"/>, <xref "
#~ "linkend=\"ST_Intersects\"/>"

#~ msgid "ST_PointOnSurface"
#~ msgstr "ST_PointOnSurface"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_PointOnSurface</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_PointOnSurface</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>"

#~ msgid ""
#~ "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));\n"
#~ " st_astext\n"
#~ "------------\n"
#~ " POINT(0 5)\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));\n"
#~ " st_astext\n"
#~ "------------\n"
#~ " POINT(0 5)\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::"
#~ "geometry));\n"
#~ "   st_astext\n"
#~ "----------------\n"
#~ " POINT(2.5 2.5)\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 "
#~ "1, 0 10 2)')));\n"
#~ "   st_asewkt\n"
#~ "----------------\n"
#~ " POINT(0 0 1)\n"
#~ "(1 row)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));\n"
#~ " st_astext\n"
#~ "------------\n"
#~ " POINT(0 5)\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));\n"
#~ " st_astext\n"
#~ "------------\n"
#~ " POINT(0 5)\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::"
#~ "geometry));\n"
#~ "   st_astext\n"
#~ "----------------\n"
#~ " POINT(2.5 2.5)\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 "
#~ "1, 0 10 2)')));\n"
#~ "   st_asewkt\n"
#~ "----------------\n"
#~ " POINT(0 0 1)\n"
#~ "(1 row)"

#~ msgid ", <xref linkend=\"ST_Point_Inside_Circle\"/>"
#~ msgstr ", <xref linkend=\"ST_Point_Inside_Circle\"/>"

#~ msgid "ST_Relate"
#~ msgstr "ST_Relate"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.25"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.25"

#~ msgid ""
#~ ", <xref linkend=\"DE-9IM\"/>, <xref linkend=\"ST_Disjoint\"/>, <xref "
#~ "linkend=\"ST_Intersects\"/>, <xref linkend=\"ST_Touches\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"DE-9IM\"/>, <xref linkend=\"ST_Disjoint\"/>, <xref "
#~ "linkend=\"ST_Intersects\"/>, <xref linkend=\"ST_Touches\"/>"

#~ msgid "ST_RelateMatch"
#~ msgstr "ST_RelateMatch"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_RelateMatch</function></funcdef> "
#~ "<paramdef><type>text </type> <parameter>intersectionMatrix</parameter></"
#~ "paramdef> <paramdef><type>text </type> "
#~ "<parameter>intersectionMatrixPattern</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_RelateMatch</function></funcdef> "
#~ "<paramdef><type>text </type> <parameter>intersectionMatrix</parameter></"
#~ "paramdef> <paramdef><type>text </type> "
#~ "<parameter>intersectionMatrixPattern</parameter></paramdef>"

#~ msgid ", <xref linkend=\"ST_Relate\"/>"
#~ msgstr ", <xref linkend=\"ST_Relate\"/>"

#~ msgid "ST_Touches"
#~ msgstr "ST_Touches"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_Touches</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_Touches</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>g2</parameter></paramdef>"

#~ msgid "FT*******"
#~ msgstr "FT*******"

#~ msgid "F**T*****"
#~ msgstr "F**T*****"

#~ msgid "F***T****"
#~ msgstr "F***T****"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.28"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.28"

#~ msgid ""
#~ "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::"
#~ "geometry);\n"
#~ " st_touches\n"
#~ "------------\n"
#~ " f\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::"
#~ "geometry);\n"
#~ " st_touches\n"
#~ "------------\n"
#~ " t\n"
#~ "(1 row)"
#~ msgstr ""
#~ "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(1 1)'::"
#~ "geometry);\n"
#~ " st_touches\n"
#~ "------------\n"
#~ " f\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_Touches('LINESTRING(0 0, 1 1, 0 2)'::geometry, 'POINT(0 2)'::"
#~ "geometry);\n"
#~ " st_touches\n"
#~ "------------\n"
#~ " t\n"
#~ "(1 row)"

#~ msgid "ST_Within"
#~ msgstr "ST_Within"

#~ msgid ""
#~ "<funcdef>boolean <function>ST_Within</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>A</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>boolean <function>ST_Within</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>A</parameter></paramdef> "
#~ "<paramdef><type>geometry </type> <parameter>B</parameter></paramdef>"

#~ msgid "&sfs_compliant; s2.1.1.2 // s2.1.13.3 - a.Relate(b, 'T*F**F***')"
#~ msgstr "&sfs_compliant; s2.1.1.2 // s2.1.13.3 - a.Relate(b, 'T*F**F***')"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.30"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.30"

#~ msgid ", <xref linkend=\"ST_Equals\"/>, <xref linkend=\"ST_IsValid\"/>"
#~ msgstr ", <xref linkend=\"ST_Equals\"/>, <xref linkend=\"ST_IsValid\"/>"

#~ msgid ", <xref linkend=\"ST_Expand\"/>"
#~ msgstr ", <xref linkend=\"ST_Expand\"/>"

#~ msgid "<para>ST_Intersects</para>"
#~ msgstr "<para>ST_Intersects</para>"

#~ msgid "<refname>ST_Intersects</refname>"
#~ msgstr "<refname>ST_Intersects</refname>"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_Centroid</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_Centroid</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>"

#, fuzzy
#~ msgid ""
#~ ", <xref linkend=\"ST_ClusterIntersecting\"/>, <xref linkend="
#~ "\"ST_ClusterWithin\"/>"
#~ msgstr ", <xref linkend=\"ST_CoveredBy\"/>, <xref linkend=\"ST_Within\"/>"

#~ msgid ""
#~ "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, "
#~ "0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));\n"
#~ "                                st_astext\n"
#~ "------------------------------------------\n"
#~ " POINT(2.30769230769231 3.30769230769231)\n"
#~ "(1 row)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, "
#~ "0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));\n"
#~ "                                st_astext\n"
#~ "------------------------------------------\n"
#~ " POINT(2.30769230769231 3.30769230769231)\n"
#~ "(1 row)"
