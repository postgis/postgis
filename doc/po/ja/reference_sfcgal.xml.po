# SOME DESCRIPTIVE TITLE.
#
# Translators:
# TERAMOTO Ikuhiro <yellow@affrc.go.jp>, 2016
msgid ""
msgstr ""
"Project-Id-Version: PostGIS\n"
"Report-Msgid-Bugs-To: https://bugs.kde.org\n"
"POT-Creation-Date: 2022-02-06 07:55+0000\n"
"PO-Revision-Date: 2022-01-31 10:53+0000\n"
"Last-Translator: Sandro Santilli <strk@kbt.io>\n"
"Language-Team: Japanese <https://weblate.osgeo.org/projects/postgis/"
"reference_sfcgalxml/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.10.1\n"

#. Tag: para
#: reference_sfcgal.xml:5
#, no-c-format
msgid ""
"SFCGAL is a C++ wrapper library around CGAL that provides advanced 2D and 3D "
"spatial functions. For robustness, geometry coordinates have an exact "
"rational number representation."
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:9
#, no-c-format
msgid ""
"Installation instructions for the library can be found on the SFCGAL home "
"page (<ulink url=\"http://www.sfcgal.org\">http://www.sfcgal.org</ulink>). "
"To enable the functions use <code>create extension postgis_sfcgal</code>."
msgstr ""

#. Tag: title
#: reference_sfcgal.xml:16
#, no-c-format
msgid "SFCGAL Functions"
msgstr ""

#. Tag: refname
#: reference_sfcgal.xml:19
#, no-c-format
msgid "postgis_sfcgal_version"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:21
#, fuzzy, no-c-format
msgid "<refpurpose>Returns the version of SFCGAL in use</refpurpose>"
msgstr "<refpurpose>入力ジオメトリを含む最小の円を返します。</refpurpose>"

#. Tag: funcdef
#: reference_sfcgal.xml:27
#, no-c-format
msgid "text <function>postgis_sfcgal_version</function>"
msgstr ""

#. Tag: title
#: reference_sfcgal.xml:34 reference_sfcgal.xml:69 reference_sfcgal.xml:107
#: reference_sfcgal.xml:200 reference_sfcgal.xml:259 reference_sfcgal.xml:323
#: reference_sfcgal.xml:352 reference_sfcgal.xml:381 reference_sfcgal.xml:410
#: reference_sfcgal.xml:515 reference_sfcgal.xml:582 reference_sfcgal.xml:658
#: reference_sfcgal.xml:732 reference_sfcgal.xml:807 reference_sfcgal.xml:845
#: reference_sfcgal.xml:943 reference_sfcgal.xml:984 reference_sfcgal.xml:1012
#: reference_sfcgal.xml:1041
#, no-c-format
msgid "Description"
msgstr "説明"

#. Tag: para
#: reference_sfcgal.xml:36
#, no-c-format
msgid "<para>Returns the version of SFCGAL in use</para>"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:38 reference_sfcgal.xml:109 reference_sfcgal.xml:202
#: reference_sfcgal.xml:356 reference_sfcgal.xml:383 reference_sfcgal.xml:419
#: reference_sfcgal.xml:584 reference_sfcgal.xml:809 reference_sfcgal.xml:847
#, no-c-format
msgid "Availability: 2.1.0"
msgstr "Availability: 2.1.0"

#. Tag: para
#: reference_sfcgal.xml:39 reference_sfcgal.xml:74 reference_sfcgal.xml:110
#: reference_sfcgal.xml:203 reference_sfcgal.xml:269 reference_sfcgal.xml:326
#: reference_sfcgal.xml:357 reference_sfcgal.xml:384 reference_sfcgal.xml:420
#: reference_sfcgal.xml:523 reference_sfcgal.xml:585 reference_sfcgal.xml:661
#: reference_sfcgal.xml:736 reference_sfcgal.xml:810 reference_sfcgal.xml:848
#: reference_sfcgal.xml:946 reference_sfcgal.xml:987 reference_sfcgal.xml:1015
#: reference_sfcgal.xml:1044
#, no-c-format
msgid "&sfcgal_required;"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:40 reference_sfcgal.xml:75 reference_sfcgal.xml:111
#: reference_sfcgal.xml:204 reference_sfcgal.xml:270 reference_sfcgal.xml:327
#: reference_sfcgal.xml:358 reference_sfcgal.xml:385 reference_sfcgal.xml:525
#: reference_sfcgal.xml:586 reference_sfcgal.xml:662 reference_sfcgal.xml:737
#: reference_sfcgal.xml:811 reference_sfcgal.xml:849 reference_sfcgal.xml:947
#: reference_sfcgal.xml:988 reference_sfcgal.xml:1016 reference_sfcgal.xml:1045
#, no-c-format
msgid "&Z_support;"
msgstr "&Z_support;"

#. Tag: para
#: reference_sfcgal.xml:41 reference_sfcgal.xml:76 reference_sfcgal.xml:112
#: reference_sfcgal.xml:205 reference_sfcgal.xml:271 reference_sfcgal.xml:328
#: reference_sfcgal.xml:386 reference_sfcgal.xml:587 reference_sfcgal.xml:663
#: reference_sfcgal.xml:738 reference_sfcgal.xml:812 reference_sfcgal.xml:850
#: reference_sfcgal.xml:948 reference_sfcgal.xml:989 reference_sfcgal.xml:1017
#: reference_sfcgal.xml:1046
#, no-c-format
msgid "&P_support;"
msgstr "&P_support;"

#. Tag: para
#: reference_sfcgal.xml:42 reference_sfcgal.xml:77 reference_sfcgal.xml:113
#: reference_sfcgal.xml:206 reference_sfcgal.xml:272 reference_sfcgal.xml:329
#: reference_sfcgal.xml:387 reference_sfcgal.xml:588 reference_sfcgal.xml:664
#: reference_sfcgal.xml:739 reference_sfcgal.xml:813 reference_sfcgal.xml:851
#: reference_sfcgal.xml:949 reference_sfcgal.xml:990 reference_sfcgal.xml:1018
#: reference_sfcgal.xml:1047
#, no-c-format
msgid "&T_support;"
msgstr "&T_support;"

#. Tag: title
#: reference_sfcgal.xml:45 reference_sfcgal.xml:80 reference_sfcgal.xml:176
#: reference_sfcgal.xml:298 reference_sfcgal.xml:559 reference_sfcgal.xml:704
#: reference_sfcgal.xml:779 reference_sfcgal.xml:822 reference_sfcgal.xml:918
#: reference_sfcgal.xml:960 reference_sfcgal.xml:1068
#, no-c-format
msgid "See Also"
msgstr "関連情報"

#. Tag: refname
#: reference_sfcgal.xml:54
#, no-c-format
msgid "postgis_sfcgal_full_version"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:56
#, fuzzy, no-c-format
msgid ""
"<refpurpose>Returns the full version of SFCGAL in use including CGAL and "
"Boost versions</refpurpose>"
msgstr "<refpurpose>入力ジオメトリを含む最小の円を返します。</refpurpose>"

#. Tag: funcdef
#: reference_sfcgal.xml:62
#, no-c-format
msgid "text <function>postgis_sfcgal_full_version</function>"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:71
#, no-c-format
msgid ""
"<para>Returns the full version of SFCGAL in use including CGAL and Boost "
"versions</para>"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:73 reference_sfcgal.xml:1043
#, no-c-format
msgid "Availability: 3.3.0"
msgstr "Availability: 3.3.0"

#. Tag: refname
#: reference_sfcgal.xml:89
#, no-c-format
msgid "ST_Extrude"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:91
#, no-c-format
msgid "Extrude a surface to a related volume"
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:96
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_Extrude</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef> "
"<paramdef><type>float</type> <parameter>x</parameter></paramdef> "
"<paramdef><type>float</type> <parameter>y</parameter></paramdef> "
"<paramdef><type>float</type> <parameter>z</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_FilterByM</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef> "
"<paramdef><type>double precision</type> <parameter>min</parameter></"
"paramdef> <paramdef><type>double precision</type> <parameter>max = null</"
"parameter></paramdef> <paramdef><type>boolean</type> <parameter>returnM = "
"false</parameter></paramdef>"

#. Tag: title
#: reference_sfcgal.xml:116 reference_sfcgal.xml:209 reference_sfcgal.xml:275
#: reference_sfcgal.xml:423 reference_sfcgal.xml:528 reference_sfcgal.xml:592
#: reference_sfcgal.xml:668 reference_sfcgal.xml:743 reference_sfcgal.xml:816
#: reference_sfcgal.xml:854 reference_sfcgal.xml:1051
#, no-c-format
msgid "Examples"
msgstr "例"

#. Tag: para
#: reference_sfcgal.xml:117 reference_sfcgal.xml:593 reference_sfcgal.xml:669
#: reference_sfcgal.xml:744
#, no-c-format
msgid ""
"3D images were generated using PostGIS <xref linkend=\"ST_AsX3D\"/> and "
"rendering in HTML using <ulink url=\"http://www.x3dom.org\">X3Dom HTML "
"Javascript rendering library</ulink>."
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:124
#, fuzzy, no-c-format
msgid ""
"SELECT ST_Buffer(ST_GeomFromText('POINT(100 90)'),\n"
"  50, 'quad_segs=2'),0,0,30);"
msgstr ""
"SELECT ST_Buffer(\n"
" ST_GeomFromText('POINT(100 90)'),\n"
" 50, 'quad_segs=2');"

#. Tag: para
#: reference_sfcgal.xml:130
#, no-c-format
msgid "Original octagon formed from buffering point"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:135
#, fuzzy, no-c-format
msgid ""
"ST_Extrude(ST_Buffer(ST_GeomFromText('POINT(100 90)'),\n"
" 50, 'quad_segs=2'),0,0,30);"
msgstr ""
"SELECT ST_Buffer(\n"
" ST_GeomFromText('POINT(100 90)'),\n"
" 50, 'quad_segs=2');"

#. Tag: para
#: reference_sfcgal.xml:141
#, no-c-format
msgid "Hexagon extruded 30 units along Z produces a PolyhedralSurfaceZ"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:149
#, fuzzy, no-c-format
msgid "SELECT ST_GeomFromText('LINESTRING(50 50, 100 90, 95 150)')"
msgstr ""
"SELECT ST_Buffer(\n"
" ST_GeomFromText(\n"
"  'LINESTRING(50 50,150 150,150 50)'\n"
" ), 10, 'side=left');"

#. Tag: para
#: reference_sfcgal.xml:155
#, fuzzy, no-c-format
msgid "Original linestring"
msgstr "元のポリゴン"

#. Tag: programlisting
#: reference_sfcgal.xml:160
#, no-c-format
msgid ""
"SELECT ST_Extrude(\n"
" ST_GeomFromText('LINESTRING(50 50, 100 90, 95 150)'),0,0,10));"
msgstr ""
"SELECT ST_Extrude(\n"
" ST_GeomFromText('LINESTRING(50 50, 100 90, 95 150)'),0,0,10));"

#. Tag: para
#: reference_sfcgal.xml:166
#, no-c-format
msgid "LineString Extruded along Z produces a PolyhedralSurfaceZ"
msgstr ""

#. Tag: refname
#: reference_sfcgal.xml:185
#, no-c-format
msgid "ST_StraightSkeleton"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:187
#, fuzzy, no-c-format
msgid "Compute a straight skeleton from a geometry"
msgstr "ジオメトリの凸包を計算します。"

#. Tag: funcprototype
#: reference_sfcgal.xml:192
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_StraightSkeleton</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_BuildArea</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"

#. Tag: programlisting
#: reference_sfcgal.xml:210
#, no-c-format
msgid ""
"SELECT ST_StraightSkeleton(ST_GeomFromText('POLYGON (( 190 190, 10 190, 10 "
"10, 190 10, 190 20, 160 30, 60 30, 60 130, 190 140, 190 190 ))'));"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:221 reference_sfcgal.xml:893
#, fuzzy, no-c-format
msgid "Original polygon"
msgstr "元のポリゴン"

#. Tag: para
#: reference_sfcgal.xml:230
#, no-c-format
msgid "Straight Skeleton of polygon"
msgstr ""

#. Tag: refname
#: reference_sfcgal.xml:244
#, no-c-format
msgid "ST_ApproximateMedialAxis"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:246
#, fuzzy, no-c-format
msgid "Compute the approximate medial axis of an areal geometry."
msgstr "ジオメトリの凸包を計算します。"

#. Tag: funcprototype
#: reference_sfcgal.xml:251
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_ApproximateMedialAxis</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_BuildArea</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"

#. Tag: para
#: reference_sfcgal.xml:261
#, no-c-format
msgid ""
"Return an approximate medial axis for the areal input based on its straight "
"skeleton. Uses an SFCGAL specific API when built against a capable version "
"(1.2.0+). Otherwise the function is just a wrapper around "
"ST_StraightSkeleton (slower case)."
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:268 reference_sfcgal.xml:660 reference_sfcgal.xml:735
#: reference_sfcgal.xml:945 reference_sfcgal.xml:986 reference_sfcgal.xml:1014
#, no-c-format
msgid "Availability: 2.2.0"
msgstr "Availability: 2.2.0"

#. Tag: programlisting
#: reference_sfcgal.xml:276
#, no-c-format
msgid ""
"SELECT ST_ApproximateMedialAxis(ST_GeomFromText('POLYGON (( 190 190, 10 190, "
"10 10, 190 10, 190 20, 160 30, 60 30, 60 130, 190 140, 190 190 ))'));"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:287
#, no-c-format
msgid "A polygon and its approximate medial axis"
msgstr ""

#. Tag: refname
#: reference_sfcgal.xml:308
#, no-c-format
msgid "ST_IsPlanar"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:310
#, no-c-format
msgid "Check if a surface is or not planar"
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:315
#, fuzzy, no-c-format
msgid ""
"<funcdef>boolean <function>ST_IsPlanar</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_BuildArea</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"

#. Tag: para
#: reference_sfcgal.xml:325
#, no-c-format
msgid ""
"Availability: 2.2.0: This was documented in 2.1.0 but got accidentally left "
"out in 2.1 release."
msgstr ""

#. Tag: refname
#: reference_sfcgal.xml:337
#, no-c-format
msgid "ST_Orientation"
msgstr "ST_Orientation"

#. Tag: refpurpose
#: reference_sfcgal.xml:339
#, no-c-format
msgid "Determine surface orientation"
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:344
#, fuzzy, no-c-format
msgid ""
"<funcdef>integer <function>ST_Orientation</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_OrientedEnvelope</function></funcdef> "
"<paramdef> <type>geometry</type> <parameter>geom</parameter> </paramdef>"

#. Tag: para
#: reference_sfcgal.xml:354
#, no-c-format
msgid ""
"The function only applies to polygons. It returns -1 if the polygon is "
"counterclockwise oriented and 1 if the polygon is clockwise oriented."
msgstr ""

#. Tag: refname
#: reference_sfcgal.xml:366
#, no-c-format
msgid "ST_ForceLHR"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:368
#, no-c-format
msgid "Force LHR orientation"
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:373
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_ForceLHR</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_ConvexHull</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>"

#. Tag: refname
#: reference_sfcgal.xml:394
#, no-c-format
msgid "ST_MinkowskiSum"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:396
#, no-c-format
msgid "Performs Minkowski sum"
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:401
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_MinkowskiSum</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom1</parameter></paramdef> "
"<paramdef><type>geometry</type> <parameter>geom2</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_SharedPaths</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>lineal1</parameter></paramdef> "
"<paramdef><type>geometry</type> <parameter>lineal2</parameter></paramdef>"

#. Tag: para
#: reference_sfcgal.xml:412
#, no-c-format
msgid ""
"This function performs a 2D minkowski sum of a point, line or polygon with a "
"polygon."
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:413
#, no-c-format
msgid ""
"A minkowski sum of two geometries A and B is the set of all points that are "
"the sum of any point in A and B. Minkowski sums are often used in motion "
"planning and computer-aided design. More details on <ulink url=\"https://en."
"wikipedia.org/wiki/Minkowski_addition\">Wikipedia Minkowski addition</ulink>."
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:414
#, no-c-format
msgid ""
"The first parameter can be any 2D geometry (point, linestring, polygon). If "
"a 3D geometry is passed, it will be converted to 2D by forcing Z to 0, "
"leading to possible cases of invalidity. The second parameter must be a 2D "
"polygon."
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:416
#, no-c-format
msgid ""
"Implementation utilizes <ulink url=\"http://doc.cgal.org/latest/"
"Minkowski_sum_2/\">CGAL 2D Minkowskisum</ulink>."
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:424
#, no-c-format
msgid ""
"Minkowski Sum of Linestring and circle polygon where Linestring cuts thru "
"the circle"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:436 reference_sfcgal.xml:471
#, no-c-format
msgid "Before Summing"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:448
#, no-c-format
msgid "After summing"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:457
#, no-c-format
msgid ""
"SELECT ST_MinkowskiSum(line, circle))\n"
"FROM (SELECT\n"
"    ST_MakeLine(ST_Point(10, 10),ST_Point(100, 100)) As line,\n"
"    ST_Buffer(ST_GeomFromText('POINT(50 50)'), 30) As circle) As foo;\n"
"\n"
"-- wkt --\n"
"MULTIPOLYGON(((30 59.9999999999999,30.5764415879031 "
"54.1472903395161,32.2836140246614 48.5194970290472,35.0559116309237 "
"43.3328930094119,38.7867965644036 38.7867965644035,43.332893009412 "
"35.0559116309236,48.5194970290474 32.2836140246614,54.1472903395162 "
"30.5764415879031,60.0000000000001 30,65.8527096604839 "
"30.5764415879031,71.4805029709527 32.2836140246614,76.6671069905881 "
"35.0559116309237,81.2132034355964 38.7867965644036,171.213203435596 "
"128.786796564404,174.944088369076 133.332893009412,177.716385975339 "
"138.519497029047,179.423558412097 144.147290339516,180 150,179.423558412097 "
"155.852709660484,177.716385975339 161.480502970953,174.944088369076 "
"166.667106990588,171.213203435596 171.213203435596,166.667106990588 "
"174.944088369076,\n"
"161.480502970953 177.716385975339,155.852709660484 179.423558412097,150 "
"180,144.147290339516 179.423558412097,138.519497029047 "
"177.716385975339,133.332893009412 174.944088369076,128.786796564403 "
"171.213203435596,38.7867965644035 81.2132034355963,35.0559116309236 "
"76.667106990588,32.2836140246614 71.4805029709526,30.5764415879031 "
"65.8527096604838,30 59.9999999999999)))"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:459
#, no-c-format
msgid "Minkowski Sum of a polygon and multipoint"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:483
#, no-c-format
msgid ""
"After summing: polygon is duplicated and translated to position of points"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:492
#, no-c-format
msgid ""
"SELECT ST_MinkowskiSum(mp, poly)\n"
"FROM (SELECT 'MULTIPOINT(25 50,70 25)'::geometry As mp,\n"
"   'POLYGON((130 150, 20 40, 50 60, 125 100, 130 150))'::geometry As poly\n"
"    ) As foo\n"
"\n"
"\n"
"-- wkt --\n"
"MULTIPOLYGON(\n"
"    ((70 115,100 135,175 175,225 225,70 115)),\n"
"    ((120 65,150 85,225 125,275 175,120 65))\n"
"    )"
msgstr ""

#. Tag: refname
#: reference_sfcgal.xml:498
#, fuzzy, no-c-format
msgid "ST_ConstrainedDelaunayTriangles"
msgstr "ST_DelaunayTriangles"

#. Tag: refpurpose
#: reference_sfcgal.xml:500
#, fuzzy, no-c-format
msgid ""
"Return a constrained Delaunay triangulation around the given input geometry."
msgstr "ジオメトリの頂点のドローネ三角形を返します。"

#. Tag: funcprototype
#: reference_sfcgal.xml:507
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_ConstrainedDelaunayTriangles</function></"
"funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
"paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_PointOnSurface</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef>"

#. Tag: para
#: reference_sfcgal.xml:517
#, fuzzy, no-c-format
msgid ""
"Return a <ulink url=\"https://en.wikipedia.org/wiki/"
"Constrained_Delaunay_triangulation\">Constrained Delaunay triangulation</"
"ulink> around the vertices of the input geometry. Output is a TIN."
msgstr ""
"入力ジオメトリの頂点の周りの<ulink url=\"http://ja.wikipedia.org/wiki/"
"%E3%83%89%E3%83%AD%E3%83%8D%E3%83%BC%E5%9B%B3\">ドロネー三角形</ulink>を返し"
"ます。出力はポリゴンのコレクション (flags=0の場合)、MULTILINESTRING (flags=1"
"の場合)、TIN(flags=2の場合)のいずれかになります。いずれの場合も、入力の頂点を"
"一緒にスナップするために許容誤差が使われます。"

#. Tag: para
#: reference_sfcgal.xml:524
#, fuzzy, no-c-format
msgid "Availability: 3.0.0"
msgstr "Availability: 2.0.0"

#. Tag: para
#: reference_sfcgal.xml:538
#, fuzzy, no-c-format
msgid "ST_ConstrainedDelaunayTriangles of 2 polygons"
msgstr "ST_DelaunayTriangles"

#. Tag: programlisting
#: reference_sfcgal.xml:541
#, fuzzy, no-c-format
msgid ""
"select ST_ConstrainedDelaunayTriangles(\n"
"               ST_Union(\n"
"                       'POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'::"
"geometry,\n"
"                       ST_Buffer('POINT(110 170)'::geometry, 20)\n"
"                   )\n"
"           );"
msgstr ""
"SELECT\n"
"    ST_DelaunayTriangles(\n"
"        ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
"            50 60, 125 100, 175 150))'),\n"
"        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
"        ),0.001,1)\n"
"     As  dtriag;"

#. Tag: para
#: reference_sfcgal.xml:548
#, no-c-format
msgid "of 2 polygons. Triangle edges cross polygon boundaries."
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:551
#, fuzzy, no-c-format
msgid ""
"select ST_DelaunayTriangles(\n"
"               ST_Union(\n"
"                       'POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))'::"
"geometry,\n"
"                       ST_Buffer('POINT(110 170)'::geometry, 20)\n"
"                   )\n"
"           );"
msgstr ""
"SELECT\n"
"    ST_DelaunayTriangles(\n"
"        ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
"            50 60, 125 100, 175 150))'),\n"
"        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
"        ),0.001,1)\n"
"     As  dtriag;"

#. Tag: para
#: reference_sfcgal.xml:560
#, fuzzy, no-c-format
msgid ""
", <xref linkend=\"ST_Tesselate\"/>, <xref linkend=\"ST_ConcaveHull\"/>, "
"<xref linkend=\"ST_Dump\"/>"
msgstr ""
", <xref linkend=\"ST_ConcaveHull\"/>, <xref linkend=\"ST_Dump\"/>, <xref "
"linkend=\"ST_Tesselate\"/>"

#. Tag: refname
#: reference_sfcgal.xml:566
#, no-c-format
msgid "ST_3DIntersection"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:568
#, no-c-format
msgid "Perform 3D intersection"
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:573
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_3DIntersection</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom1</parameter></paramdef> "
"<paramdef><type>geometry</type> <parameter>geom2</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_SharedPaths</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>lineal1</parameter></paramdef> "
"<paramdef><type>geometry</type> <parameter>lineal2</parameter></paramdef>"

#. Tag: para
#: reference_sfcgal.xml:583
#, no-c-format
msgid "Return a geometry that is the shared portion between geom1 and geom2."
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:599 reference_sfcgal.xml:675 reference_sfcgal.xml:750
#, no-c-format
msgid ""
"SELECT ST_Extrude(ST_Buffer(ST_GeomFromText('POINT(100 90)'),\n"
" 50, 'quad_segs=2'),0,0,30) AS geom1,\n"
"        ST_Extrude(ST_Buffer(ST_GeomFromText('POINT(80 80)'),\n"
" 50, 'quad_segs=1'),0,0,30) AS geom2;"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:605
#, no-c-format
msgid "Original 3D geometries overlaid. geom2 is shown semi-transparent"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:610
#, fuzzy, no-c-format
msgid ""
"SELECT ST_3DIntersection(geom1,geom2)\n"
"FROM ( SELECT ST_Extrude(ST_Buffer(ST_GeomFromText('POINT(100 90)'),\n"
" 50, 'quad_segs=2'),0,0,30) AS geom1,\n"
"        ST_Extrude(ST_Buffer(ST_GeomFromText('POINT(80 80)'),\n"
" 50, 'quad_segs=1'),0,0,30) AS geom2 ) As t;"
msgstr ""
"-- ラインストリングを使用\n"
"SELECT ST_BuildArea(ST_Collect(smallc,bigc))\n"
"FROM (SELECT\n"
"    ST_ExteriorRing(ST_Buffer(\n"
"      ST_GeomFromText('POINT(100 90)'), 25)) As smallc,\n"
"    ST_ExteriorRing(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) As "
"bigc) As foo;"

#. Tag: para
#: reference_sfcgal.xml:616
#, no-c-format
msgid "Intersection of geom1 and geom2"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:625
#, fuzzy, no-c-format
msgid "3D linestrings and polygons"
msgstr "マルチラインストリングとラインストリング"

#. Tag: programlisting
#: reference_sfcgal.xml:626
#, no-c-format
msgid ""
"SELECT ST_AsText(ST_3DIntersection(linestring, polygon)) As wkt\n"
"FROM  ST_GeomFromText('LINESTRING Z (2 2 6,1.5 1.5 7,1 1 8,0.5 0.5 8,0 0 "
"10)') AS linestring\n"
" CROSS JOIN ST_GeomFromText('POLYGON((0 0 8, 0 1 8, 1 1 8, 1 0 8, 0 0 8))') "
"AS polygon;\n"
"\n"
"              wkt\n"
"--------------------------------\n"
" LINESTRING Z (1 1 8,0.5 0.5 8)"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:628
#, no-c-format
msgid "Cube (closed Polyhedral Surface) and Polygon Z"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:629
#, no-c-format
msgid ""
"SELECT ST_AsText(ST_3DIntersection(\n"
"                ST_GeomFromText('POLYHEDRALSURFACE Z( ((0 0 0, 0 0 1, 0 1 1, "
"0 1 0, 0 0 0)),\n"
"        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, "
"0 0 0)),\n"
"        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n"
"        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, "
"0 0 1)) )'),\n"
"        'POLYGON Z ((0 0 0, 0 0 0.5, 0 0.5 0.5, 0 0.5 0, 0 0 0))'::geometry))"
msgstr ""

#. Tag: screen
#: reference_sfcgal.xml:630
#, no-c-format
msgid ""
"TIN Z (((0 0 0,0 0 0.5,0 0.5 0.5,0 0 0)),((0 0.5 0,0 0 0,0 0.5 0.5,0 0.5 0)))"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:632
#, no-c-format
msgid ""
"Intersection of 2 solids that result in volumetric intersection is also a "
"solid (ST_Dimension returns 3)"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:633
#, no-c-format
msgid ""
"SELECT ST_AsText(ST_3DIntersection( ST_Extrude(ST_Buffer('POINT(10 20)'::"
"geometry,10,1),0,0,30),\n"
" ST_Extrude(ST_Buffer('POINT(10 20)'::geometry,10,1),2,0,10) ));"
msgstr ""

#. Tag: screen
#: reference_sfcgal.xml:634
#, no-c-format
msgid ""
"POLYHEDRALSURFACE Z (((13.3333333333333 13.3333333333333 10,20 20 0,20 20 "
"10,13.3333333333333 13.3333333333333 10)),\n"
"        ((20 20 10,16.6666666666667 23.3333333333333 10,13.3333333333333 "
"13.3333333333333 10,20 20 10)),\n"
"        ((20 20 0,16.6666666666667 23.3333333333333 10,20 20 10,20 20 0)),\n"
"        ((13.3333333333333 13.3333333333333 10,10 10 0,20 20 "
"0,13.3333333333333 13.3333333333333 10)),\n"
"        ((16.6666666666667 23.3333333333333 10,12 28 10,13.3333333333333 "
"13.3333333333333 10,16.6666666666667 23.3333333333333 10)),\n"
"        ((20 20 0,9.99999999999995 30 0,16.6666666666667 23.3333333333333 "
"10,20 20 0)),\n"
"        ((10 10 0,9.99999999999995 30 0,20 20 0,10 10 0)),((13.3333333333333 "
"13.3333333333333 10,12 12 10,10 10 0,13.3333333333333 13.3333333333333 "
"10)),\n"
"        ((12 28 10,12 12 10,13.3333333333333 13.3333333333333 10,12 28 "
"10)),\n"
"        ((16.6666666666667 23.3333333333333 10,9.99999999999995 30 0,12 28 "
"10,16.6666666666667 23.3333333333333 10)),\n"
"        ((10 10 0,0 20 0,9.99999999999995 30 0,10 10 0)),\n"
"        ((12 12 10,11 11 10,10 10 0,12 12 10)),((12 28 10,11 11 10,12 12 "
"10,12 28 10)),\n"
"        ((9.99999999999995 30 0,11 29 10,12 28 10,9.99999999999995 30 0)),"
"((0 20 0,2 20 10,9.99999999999995 30 0,0 20 0)),\n"
"        ((10 10 0,2 20 10,0 20 0,10 10 0)),((11 11 10,2 20 10,10 10 0,11 11 "
"10)),((12 28 10,11 29 10,11 11 10,12 28 10)),\n"
"        ((9.99999999999995 30 0,2 20 10,11 29 10,9.99999999999995 30 0)),"
"((11 11 10,11 29 10,2 20 10,11 11 10)))"
msgstr ""

#. Tag: refname
#: reference_sfcgal.xml:642
#, no-c-format
msgid "ST_3DDifference"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:644
#, no-c-format
msgid "Perform 3D difference"
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:649
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_3DDifference</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom1</parameter></paramdef> "
"<paramdef><type>geometry</type> <parameter>geom2</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_SharedPaths</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>lineal1</parameter></paramdef> "
"<paramdef><type>geometry</type> <parameter>lineal2</parameter></paramdef>"

#. Tag: para
#: reference_sfcgal.xml:659
#, fuzzy, no-c-format
msgid "Returns that part of geom1 that is not part of geom2."
msgstr "ジオメトリの幾何学的重心を返します。"

#. Tag: para
#: reference_sfcgal.xml:681
#, no-c-format
msgid ""
"Original 3D geometries overlaid. geom2 is the part that will be removed."
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:686
#, fuzzy, no-c-format
msgid ""
"SELECT ST_3DDifference(geom1,geom2)\n"
"FROM ( SELECT ST_Extrude(ST_Buffer(ST_GeomFromText('POINT(100 90)'),\n"
" 50, 'quad_segs=2'),0,0,30) AS geom1,\n"
"        ST_Extrude(ST_Buffer(ST_GeomFromText('POINT(80 80)'),\n"
" 50, 'quad_segs=1'),0,0,30) AS geom2 ) As t;"
msgstr ""
"-- ラインストリングを使用\n"
"SELECT ST_BuildArea(ST_Collect(smallc,bigc))\n"
"FROM (SELECT\n"
"    ST_ExteriorRing(ST_Buffer(\n"
"      ST_GeomFromText('POINT(100 90)'), 25)) As smallc,\n"
"    ST_ExteriorRing(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) As "
"bigc) As foo;"

#. Tag: para
#: reference_sfcgal.xml:692
#, no-c-format
msgid "What's left after removing geom2"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:706
#, fuzzy, no-c-format
msgid ""
", <xref linkend=\"ST_AsX3D\"/>, <xref linkend=\"ST_3DIntersection\"/> <xref "
"linkend=\"ST_3DUnion\"/>"
msgstr ""
", <xref linkend=\"ST_ConcaveHull\"/>, <xref linkend=\"ST_Dump\"/>, <xref "
"linkend=\"ST_Tesselate\"/>"

#. Tag: refname
#: reference_sfcgal.xml:716
#, no-c-format
msgid "ST_3DUnion"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:718
#, no-c-format
msgid "Perform 3D union"
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:723
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_3DUnion</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom1</parameter></paramdef> "
"<paramdef><type>geometry</type> <parameter>geom2</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_SharedPaths</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>lineal1</parameter></paramdef> "
"<paramdef><type>geometry</type> <parameter>lineal2</parameter></paramdef>"

#. Tag: para
#: reference_sfcgal.xml:756
#, no-c-format
msgid "Original 3D geometries overlaid. geom2 is the one with transparency."
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:761
#, fuzzy, no-c-format
msgid ""
"SELECT ST_3DUnion(geom1,geom2)\n"
"FROM ( SELECT ST_Extrude(ST_Buffer(ST_GeomFromText('POINT(100 90)'),\n"
" 50, 'quad_segs=2'),0,0,30) AS geom1,\n"
"        ST_Extrude(ST_Buffer(ST_GeomFromText('POINT(80 80)'),\n"
" 50, 'quad_segs=1'),0,0,30) AS geom2 ) As t;"
msgstr ""
"-- ラインストリングを使用\n"
"SELECT ST_BuildArea(ST_Collect(smallc,bigc))\n"
"FROM (SELECT\n"
"    ST_ExteriorRing(ST_Buffer(\n"
"      ST_GeomFromText('POINT(100 90)'), 25)) As smallc,\n"
"    ST_ExteriorRing(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) As "
"bigc) As foo;"

#. Tag: para
#: reference_sfcgal.xml:767
#, no-c-format
msgid "Union of geom1 and geom2"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:781
#, fuzzy, no-c-format
msgid ""
", <xref linkend=\"ST_AsX3D\"/>, <xref linkend=\"ST_3DIntersection\"/> <xref "
"linkend=\"ST_3DDifference\"/>"
msgstr ""
", <xref linkend=\"ST_ConcaveHull\"/>, <xref linkend=\"ST_Dump\"/>, <xref "
"linkend=\"ST_Tesselate\"/>"

#. Tag: refname
#: reference_sfcgal.xml:792
#, fuzzy, no-c-format
msgid "ST_3DArea"
msgstr "ST_BuildArea"

#. Tag: refpurpose
#: reference_sfcgal.xml:794
#, no-c-format
msgid "Computes area of 3D surface geometries. Will return 0 for solids."
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:799
#, fuzzy, no-c-format
msgid ""
"<funcdef>float<function>ST_3DArea</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom1</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_BuildArea</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"

#. Tag: para
#: reference_sfcgal.xml:817
#, no-c-format
msgid ""
"Note: By default a PolyhedralSurface built from WKT is a surface geometry, "
"not solid. It therefore has surface area. Once converted to a solid, no area."
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:818
#, no-c-format
msgid ""
"SELECT ST_3DArea(geom) As cube_surface_area,\n"
"        ST_3DArea(ST_MakeSolid(geom)) As solid_surface_area\n"
"  FROM (SELECT 'POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n"
"    ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),\n"
"    ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n"
"    ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n"
"    ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),\n"
"    ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'::geometry) As f(geom);\n"
"\n"
" cube_surface_area | solid_surface_area\n"
"-------------------+--------------------\n"
"                 6 |                  0"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:824
#, fuzzy, no-c-format
msgid ""
", <xref linkend=\"ST_MakeSolid\"/>, <xref linkend=\"ST_IsSolid\"/>, <xref "
"linkend=\"ST_Area\"/>"
msgstr ""
", <xref linkend=\"ST_ConcaveHull\"/>, <xref linkend=\"ST_Dump\"/>, <xref "
"linkend=\"ST_Tesselate\"/>"

#. Tag: refname
#: reference_sfcgal.xml:830
#, no-c-format
msgid "ST_Tesselate"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:832
#, no-c-format
msgid ""
"Perform surface Tesselation of a polygon or polyhedralsurface and returns as "
"a TIN or collection of TINS"
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:837
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry <function>ST_Tesselate</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_BuildArea</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"

#. Tag: para
#: reference_sfcgal.xml:846
#, no-c-format
msgid ""
"Takes as input a surface such a MULTI(POLYGON) or POLYHEDRALSURFACE and "
"returns a TIN representation via the process of tessellation using triangles."
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:860
#, no-c-format
msgid ""
"SELECT ST_GeomFromText('POLYHEDRALSURFACE Z( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 "
"0 0)),\n"
"                ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 "
"1, 0 0 1, 0 0 0)),\n"
"                ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n"
"                ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 "
"1, 0 1 1, 0 0 1)) )');"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:866
#, fuzzy, no-c-format
msgid "Original Cube"
msgstr "元のポリゴン"

#. Tag: programlisting
#: reference_sfcgal.xml:871
#, no-c-format
msgid ""
"SELECT ST_Tesselate(ST_GeomFromText('POLYHEDRALSURFACE Z( ((0 0 0, 0 0 1, 0 "
"1 1, 0 1 0, 0 0 0)),\n"
"        ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)), ((0 0 0, 1 0 0, 1 0 1, 0 0 1, "
"0 0 0)),\n"
"        ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n"
"        ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)), ((0 0 1, 1 0 1, 1 1 1, 0 1 1, "
"0 0 1)) )'));"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:872
#, no-c-format
msgid "ST_AsText output:"
msgstr ""

#. Tag: screen
#: reference_sfcgal.xml:873
#, no-c-format
msgid ""
"TIN Z (((0 0 0,0 0 1,0 1 1,0 0 0)),((0 1 0,0 0 0,0 1 1,0 1 0)),\n"
"        ((0 0 0,0 1 0,1 1 0,0 0 0)),\n"
"        ((1 0 0,0 0 0,1 1 0,1 0 0)),((0 0 1,1 0 0,1 0 1,0 0 1)),\n"
"        ((0 0 1,0 0 0,1 0 0,0 0 1)),\n"
"        ((1 1 0,1 1 1,1 0 1,1 1 0)),((1 0 0,1 1 0,1 0 1,1 0 0)),\n"
"        ((0 1 0,0 1 1,1 1 1,0 1 0)),((1 1 0,0 1 0,1 1 1,1 1 0)),\n"
"        ((0 1 1,1 0 1,1 1 1,0 1 1)),((0 1 1,0 0 1,1 0 1,0 1 1)))"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:879
#, no-c-format
msgid "Tesselated Cube with triangles colored"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:887
#, no-c-format
msgid ""
"SELECT 'POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 160, 120 190, "
"10 190 ))'::geometry;"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:898
#, no-c-format
msgid ""
"SELECT\n"
"        ST_Tesselate('POLYGON (( 10 190, 10 70, 80 70, 80 130, 50 160, 120 "
"160, 120 190, 10 190 ))'::geometry);"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:900
#, no-c-format
msgid "ST_AsText output"
msgstr ""

#. Tag: screen
#: reference_sfcgal.xml:901
#, no-c-format
msgid ""
"TIN(((80 130,50 160,80 70,80 130)),((50 160,10 190,10 70,50 160)),\n"
"         ((80 70,50 160,10 70,80 70)),((120 160,120 190,50 160,120 160)),\n"
" ((120 190,10 190,50 160,120 190)))"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:907
#, no-c-format
msgid "Tesselated Polygon"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:920
#, fuzzy, no-c-format
msgid ", <xref linkend=\"ST_DelaunayTriangles\"/>"
msgstr ", <xref linkend=\"ST_LineSubstring\"/>"

#. Tag: refname
#: reference_sfcgal.xml:928
#, no-c-format
msgid "ST_Volume"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:930
#, no-c-format
msgid ""
"Computes the volume of a 3D solid. If applied to surface (even closed) "
"geometries will return 0."
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:935
#, fuzzy, no-c-format
msgid ""
"<funcdef>float <function>ST_Volume</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom1</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_BuildArea</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"

#. Tag: title
#: reference_sfcgal.xml:953
#, fuzzy, no-c-format
msgid "Example"
msgstr "例"

#. Tag: para
#: reference_sfcgal.xml:954
#, no-c-format
msgid ""
"When closed surfaces are created with WKT, they are treated as areal rather "
"than solid. To make them solid, you need to use <xref linkend=\"ST_MakeSolid"
"\"/>. Areal geometries have no volume. Here is an example to demonstrate."
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:956
#, no-c-format
msgid ""
"SELECT ST_Volume(geom) As cube_surface_vol,\n"
"        ST_Volume(ST_MakeSolid(geom)) As solid_surface_vol\n"
"  FROM (SELECT 'POLYHEDRALSURFACE( ((0 0 0, 0 0 1, 0 1 1, 0 1 0, 0 0 0)),\n"
"    ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),\n"
"    ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n"
"    ((1 1 0, 1 1 1, 1 0 1, 1 0 0, 1 1 0)),\n"
"    ((0 1 0, 0 1 1, 1 1 1, 1 1 0, 0 1 0)),\n"
"    ((0 0 1, 1 0 1, 1 1 1, 0 1 1, 0 0 1)) )'::geometry) As f(geom);\n"
"\n"
" cube_surface_vol | solid_surface_vol\n"
"------------------+-------------------\n"
"                0 |                 1"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:962
#, fuzzy, no-c-format
msgid ", <xref linkend=\"ST_MakeSolid\"/>, <xref linkend=\"ST_IsSolid\"/>"
msgstr ", <xref linkend=\"ST_Simplify\"/>, <xref linkend=\"ST_SimplifyVW\"/>"

#. Tag: refname
#: reference_sfcgal.xml:969
#, no-c-format
msgid "ST_MakeSolid"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:971
#, no-c-format
msgid ""
"Cast the geometry into a solid. No check is performed. To obtain a valid "
"solid, the input geometry must be a closed Polyhedral Surface or a closed "
"TIN."
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:976
#, fuzzy, no-c-format
msgid ""
"<funcdef>geometry<function>ST_MakeSolid</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom1</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_BuildArea</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"

#. Tag: refname
#: reference_sfcgal.xml:997
#, no-c-format
msgid "ST_IsSolid"
msgstr ""

#. Tag: refpurpose
#: reference_sfcgal.xml:999
#, no-c-format
msgid "Test if the geometry is a solid. No validity check is performed."
msgstr ""

#. Tag: funcprototype
#: reference_sfcgal.xml:1004
#, fuzzy, no-c-format
msgid ""
"<funcdef>boolean<function>ST_IsSolid</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom1</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_BuildArea</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"

#. Tag: refname
#: reference_sfcgal.xml:1026
#, no-c-format
msgid "ST_3DConvexHull"
msgstr "ST_3DConvexHull"

#. Tag: refpurpose
#: reference_sfcgal.xml:1028
#, fuzzy, no-c-format
msgid "Computes the 3D convex hull of a geometry."
msgstr "ジオメトリの凸包を計算します。"

#. Tag: funcprototype
#: reference_sfcgal.xml:1033
#, no-c-format
msgid ""
"<funcdef>geometry<function>ST_3DConvexHull</function></funcdef> "
"<paramdef><type>geometry</type> <parameter>geom1</parameter></paramdef>"
msgstr ""
"<funcdef>geometry <function>ST_3DConvexHull</function></funcdef> "
"<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>"

#. Tag: programlisting
#: reference_sfcgal.xml:1052
#, no-c-format
msgid ""
"SELECT ST_AsText(ST_3DConvexHull('LINESTRING Z(0 0 5, 1 5 3, 5 7 6, 9 5 3 , "
"5 7 5, 6 3 5)'::geometry));"
msgstr ""

#. Tag: screen
#: reference_sfcgal.xml:1053
#, no-c-format
msgid ""
"POLYHEDRALSURFACE Z (((1 5 3,9 5 3,0 0 5,1 5 3)),((1 5 3,0 0 5,5 7 6,1 5 3)),"
"((5 7 6,5 7 5,1 5 3,5 7 6)),((0 0 5,6 3 5,5 7 6,0 0 5)),((6 3 5,9 5 3,5 7 "
"6,6 3 5)),((0 0 5,9 5 3,6 3 5,0 0 5)),((9 5 3,5 7 5,5 7 6,9 5 3)),((1 5 3,5 "
"7 5,9 5 3,1 5 3)))"
msgstr ""

#. Tag: programlisting
#: reference_sfcgal.xml:1055
#, no-c-format
msgid ""
"WITH f AS (SELECT i, ST_Extrude(geom, 0,0, i ) AS geom\n"
"FROM ST_Subdivide(ST_Letters('CH'),5) WITH ORDINALITY AS sd(geom,i)\n"
"      )\n"
"      SELECT ST_3DConvexHull(ST_Collect(f.geom) )\n"
"      FROM f;"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:1062
#, no-c-format
msgid "Original geometry overlaid with 3D convex hull"
msgstr ""

#. Tag: para
#: reference_sfcgal.xml:1069
#, no-c-format
msgid ", <xref linkend=\"ST_AsX3D\"/>"
msgstr ""

#~ msgid ""
#~ "These functions compute geometric constructions, or alter geometry size "
#~ "or shape."
#~ msgstr ""
#~ "これらの関数は幾何的構造の計算、すなわちジオメトリのサイズや形状を変更しま"
#~ "す。"

#~ msgid "Geometry Processing"
#~ msgstr "ジオメトリ処理関数"

#~ msgid "ST_Buffer"
#~ msgstr "ST_Buffer"

#~ msgid ""
#~ "Computes a geometry covering all points within a given distance from a "
#~ "geometry."
#~ msgstr ""
#~ "あるジオメトリからの距離が指定された距離以下となる点全ての集合となるジオメ"
#~ "トリを返します。"

#~ msgid ""
#~ "<funcprototype> <funcdef>geometry <function>ST_Buffer</function></"
#~ "funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
#~ "paramdef> <paramdef><type>float </type> <parameter>radius_of_buffer</"
#~ "parameter></paramdef> <paramdef choice=\"opt\"><type>text </type> "
#~ "<parameter>buffer_style_parameters = ''</parameter></paramdef> </"
#~ "funcprototype> <funcprototype> <funcdef>geometry <function>ST_Buffer</"
#~ "function></funcdef> <paramdef><type>geometry </type> <parameter>g1</"
#~ "parameter></paramdef> <paramdef><type>float </type> "
#~ "<parameter>radius_of_buffer</parameter></paramdef> "
#~ "<paramdef><type>integer </type> <parameter>num_seg_quarter_circle</"
#~ "parameter></paramdef> </funcprototype> <funcprototype> <funcdef>geography "
#~ "<function>ST_Buffer</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>g1</parameter></paramdef> <paramdef><type>float </type> "
#~ "<parameter>radius_of_buffer</parameter></paramdef> <paramdef choice=\"opt"
#~ "\"><type>text </type> <parameter>buffer_style_parameters</parameter></"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>geography "
#~ "<function>ST_Buffer</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>g1</parameter></paramdef> <paramdef><type>float </type> "
#~ "<parameter>radius_of_buffer</parameter></paramdef> "
#~ "<paramdef><type>integer </type> <parameter>num_seg_quarter_circle</"
#~ "parameter></paramdef> </funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>geometry <function>ST_Buffer</function></"
#~ "funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
#~ "paramdef> <paramdef><type>float </type> <parameter>radius_of_buffer</"
#~ "parameter></paramdef> <paramdef choice=\"opt\"><type>text </type> "
#~ "<parameter>buffer_style_parameters = ''</parameter></paramdef> </"
#~ "funcprototype> <funcprototype> <funcdef>geometry <function>ST_Buffer</"
#~ "function></funcdef> <paramdef><type>geometry </type> <parameter>g1</"
#~ "parameter></paramdef> <paramdef><type>float </type> "
#~ "<parameter>radius_of_buffer</parameter></paramdef> "
#~ "<paramdef><type>integer </type> <parameter>num_seg_quarter_circle</"
#~ "parameter></paramdef> </funcprototype> <funcprototype> <funcdef>geography "
#~ "<function>ST_Buffer</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>g1</parameter></paramdef> <paramdef><type>float </type> "
#~ "<parameter>radius_of_buffer</parameter></paramdef> <paramdef choice=\"opt"
#~ "\"><type>text </type> <parameter>buffer_style_parameters</parameter></"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>geography "
#~ "<function>ST_Buffer</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>g1</parameter></paramdef> <paramdef><type>float </type> "
#~ "<parameter>radius_of_buffer</parameter></paramdef> "
#~ "<paramdef><type>integer </type> <parameter>num_seg_quarter_circle</"
#~ "parameter></paramdef> </funcprototype>"

#~ msgid ""
#~ "Computes a a POLYGON or MULTIPOLYGON that represents all points whose "
#~ "distance from a geometry/geography is less than or equal to a given "
#~ "distance. A negative distance shrinks the geometry rather than expanding "
#~ "it. A negative distance may shrink a polygon completely, in which case "
#~ "POLYGON EMPTY is returned. For points and lines negative distances always "
#~ "return empty results."
#~ msgstr ""
#~ "あるジオメトリ/ジオグラフィからの距離が指定された距離以下となる全ての点を"
#~ "表現するPOLYGONまたはMULTIPOLYGONを計算します。距離に負数を指定すると、ジ"
#~ "オメトリは拡大されずに縮小されます。負の距離はポリゴンを完全に縮退させる可"
#~ "能性があり、その場合には、POLYGON EMPTYが返ります。ポイントとラインの負の"
#~ "距離は常に空を返します。"

#~ msgid ""
#~ "For geometry, the distance is specified in the units of the Spatial "
#~ "Reference System of the geometry. For geography, the distance is "
#~ "specified in meters."
#~ msgstr ""
#~ "ジオメトリの場合、指定される距離の単位は、ジオメトリの空間参照系の単位で"
#~ "す。ジオグラフィの場合、指定される距離の単位はメートルです。"

#~ msgid ""
#~ "The optional third parameter controls the buffer accuracy and style. The "
#~ "accuracy of circular arcs in the buffer is specified as the number of "
#~ "line segments used to approximate a quarter circle (default is 8). The "
#~ "buffer style can be specifed by providing a list of blank-separated "
#~ "key=value pairs as follows:"
#~ msgstr ""
#~ "3番目のパラメータは任意で、バッファの精度とスタイルを扱います。バッファの"
#~ "円弧の精度は四分の一円の近似に使用される辺の数です (デフォルトは8)。バッ"
#~ "ファのスタイルは キー=値 のペアを空白区切りでリストにして指定します。キー"
#~ "は次の通りです。"

#~ msgid ""
#~ "'quad_segs=#' : number of line segments used to approximate a quarter "
#~ "circle (default is 8)."
#~ msgstr "'quad_segs=#' : 四分の一円近似に使う辺の数 (デフォルトは8)。"

#~ msgid ""
#~ "'endcap=round|flat|square' : endcap style (defaults to \"round\"). 'butt' "
#~ "is accepted as a synonym for 'flat'."
#~ msgstr ""
#~ "'endcap=round|flat|square' : 終端スタイル (デフォルトは \"round"
#~ "\")。'butt'は'flat'の同義語として受け付けます。"

#~ msgid ""
#~ "'join=round|mitre|bevel' : join style (defaults to \"round\"). 'miter' is "
#~ "accepted as a synonym for 'mitre'."
#~ msgstr ""
#~ "'join=round|mitre|bevel' : 接続スタイル (デフォルトは\"round"
#~ "\")。'miter'も'mitre'の同義語として受け付けます。"

#~ msgid ""
#~ "'mitre_limit=#.#' : mitre ratio limit (only affects mitered join style). "
#~ "'miter_limit' is accepted as a synonym for 'mitre_limit'."
#~ msgstr ""
#~ "'mitre_limit=#.#' : マイター比 (訳注: 継ぎ目の内側と外側の距離と線幅との"
#~ "比)の最大値 (継ぎ目スタイルがmiterである場合のみ有"
#~ "効)。'miter_limit'は'mitre_limit'の同義語として受け付けます。"

#~ msgid ""
#~ "'side=both|left|right' : 'left' or 'right' performs a single-sided buffer "
#~ "on the geometry, with the buffered side relative to the direction of the "
#~ "line. This is only applicable to LINESTRING geometry and does not affect "
#~ "POINT or POLYGON geometries. By default end caps are square."
#~ msgstr ""
#~ "'side=both|left|right' : 'left'または'right'については、線の方向から見た相"
#~ "対的なサイドで、ジオメトリの片側バッファを実行します。これはLINESTRINGジオ"
#~ "メトリにだけ関連して、POINTまたはPOLYGONジオメトリには影響がありません。デ"
#~ "フォルトでは終端スタイルは四角形です。"

#~ msgid ""
#~ "For geography, this is a wrapper around the geometry implementation. It "
#~ "determines a planar spatial reference system that best fits the bounding "
#~ "box of the geography object (trying UTM, Lambert Azimuthal Equal Area "
#~ "(LAEA) North/South pole, and finally Mercator ). The buffer is computed "
#~ "in the planar space, and then transformed back to WGS84. This may not "
#~ "produce the desired behavior if the input object is much larger than a "
#~ "UTM zone or crosses the dateline"
#~ msgstr ""
#~ "ジオグラフィでは、この関数はジオメトリ実装をラップした関数です。ジオグラ"
#~ "フィオブジェクトおｎバウンディングボックスに最も適した平面空間参照系を決定"
#~ "します (UTM、北極南極のランベルト正積方位図法 (LAEA)、最後はメルカトルを試"
#~ "していきます)。バッファは平面空間上で計算され、WGS84に戻されます。入力オブ"
#~ "ジェクトがUTMゾーンより非常に大きい場合や日付変更線を超える場合には、望ま"
#~ "しくない振る舞いになる場合があります。"

#~ msgid ""
#~ "Buffer output is always a valid polygonal geometry. Buffer can handle "
#~ "invalid inputs, so buffering by distance 0 is sometimes used as a way of "
#~ "repairing invalid polygons. <xref linkend=\"ST_MakeValid\"/> can also be "
#~ "used for this purpose."
#~ msgstr ""
#~ "バッファ出力は常に妥当なポリゴンジオメトリです。バッファは不正な入力を処理"
#~ "できるので、不正なポリゴンを修復する方法として、距離0のバッファリングが使"
#~ "われます。同じ目的の関数としては<xref linkend=\"ST_MakeValid\"/>が使われま"
#~ "す。"

#~ msgid ""
#~ "Buffering is sometimes used to perform a within-distance search. For this "
#~ "use case it is more efficient to use <xref linkend=\"ST_DWithin\"/>."
#~ msgstr ""
#~ "バッファ作成は時々、距離内にある地物を検索する際に使われます。この使い方に"
#~ "ついては、<xref linkend=\"ST_DWithin\"/>の方が効率的です。"

#~ msgid ""
#~ "This function ignores the Z dimension. It always gives a 2D result even "
#~ "when used on a 3D geometry."
#~ msgstr ""
#~ "この関数はZ値を無視します。この関数を3次元ジオメトリ上で使用したとしても、"
#~ "常に2次元の結果となります。"

#~ msgid ""
#~ "Enhanced: 2.5.0 - ST_Buffer geometry support was enhanced to allow for "
#~ "side buffering specification <code>side=both|left|right</code>."
#~ msgstr ""
#~ "Enhanced: 2.5.0 - ST_Bufferのジオメトリ対応版が強化され、バッファを施す側"
#~ "を<code>side=both|left|right</code>で指定できるようになりました。"

#~ msgid ""
#~ "Availability: 1.5 - ST_Buffer was enhanced to support different endcaps "
#~ "and join types. These are useful for example to convert road linestrings "
#~ "into polygon roads with flat or square edges instead of rounded edges. "
#~ "Thin wrapper for geography was added."
#~ msgstr ""
#~ "Availability: 1.5 - ST_Bufferが強化され、様々な終端と継ぎ目に対応するよう"
#~ "になりました。たとえば、道路ラインストリングを道路ポリゴンに変換する際に終"
#~ "端を丸でなく平面や四角で処理したい場合などに使えます。ジオグラフィ用の薄い"
#~ "ラッパが追加されました。"

#~ msgid "Performed by the GEOS module."
#~ msgstr "GEOSモジュールで実現しています。"

#~ msgid "&sfs_compliant; s2.1.1.3"
#~ msgstr "&sfs_compliant; s2.1.1.3"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.17"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.17"

#~ msgid "quad_segs=8 (default)"
#~ msgstr "quad_segs=8 (デフォルト)"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText('POINT(100 90)'),\n"
#~ " 50, 'quad_segs=8');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText('POINT(100 90)'),\n"
#~ " 50, 'quad_segs=8');"

#~ msgid "quad_segs=2 (lame)"
#~ msgstr "quad_segs=2 (不十分)"

#~ msgid "endcap=round join=round (default)"
#~ msgstr "endcap=round join=round (デフォルト)"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'endcap=round join=round');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'endcap=round join=round');"

#~ msgid "endcap=square"
#~ msgstr "endcap=square"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'endcap=square join=round');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'endcap=square join=round');"

#~ msgid "endcap=flat"
#~ msgstr "endcap=flat"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'endcap=flat join=round');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'endcap=flat join=round');"

#~ msgid "join=bevel"
#~ msgstr "join=bevel"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'join=bevel');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'join=bevel');"

#~ msgid "join=mitre mitre_limit=5.0 (default mitre limit)"
#~ msgstr "join=mitre mitre_limit=5.0 (デフォルトの最大マイター比)"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'join=mitre mitre_limit=5.0');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'join=mitre mitre_limit=5.0');"

#~ msgid "join=mitre mitre_limit=1"
#~ msgstr "join=mitre mitre_limit=1"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'join=mitre mitre_limit=1.0');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'join=mitre mitre_limit=1.0');"

#~ msgid "side=left"
#~ msgstr "side=left"

#~ msgid "side=right"
#~ msgstr "side=right"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'side=right');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'side=right');"

#~ msgid "side=left join=mitre"
#~ msgstr "side=left join=mitre"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'side=left join=mitre');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ " ST_GeomFromText(\n"
#~ "  'LINESTRING(50 50,150 150,150 50)'\n"
#~ " ), 10, 'side=left join=mitre');"

#~ msgid "right-hand-winding, polygon boundary side=left"
#~ msgstr "右回り、ポリゴン境界は左"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ "ST_ForceRHR(\n"
#~ "ST_Boundary(\n"
#~ " ST_GeomFromText(\n"
#~ "'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))),\n"
#~ " ), 20, 'side=left');"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ "ST_ForceRHR(\n"
#~ "ST_Boundary(\n"
#~ " ST_GeomFromText(\n"
#~ "'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))),\n"
#~ " ), 20, 'side=left');"

#~ msgid "right-hand-winding, polygon boundary side=right"
#~ msgstr "右回り、ポリゴン境界は右"

#~ msgid ""
#~ "SELECT ST_Buffer(\n"
#~ "ST_ForceRHR(\n"
#~ "ST_Boundary(\n"
#~ " ST_GeomFromText(\n"
#~ "'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))\n"
#~ "), 20,'side=right')"
#~ msgstr ""
#~ "SELECT ST_Buffer(\n"
#~ "ST_ForceRHR(\n"
#~ "ST_Boundary(\n"
#~ " ST_GeomFromText(\n"
#~ "'POLYGON ((50 50, 50 150, 150 150, 150 50, 50 50))'))\n"
#~ "), 20,'side=right')"

#~ msgid ""
#~ "--A buffered point approximates a circle\n"
#~ "-- A buffered point forcing approximation of (see diagram)\n"
#~ "-- 2 points per quarter circle is poly with 8 sides (see diagram)\n"
#~ "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) As "
#~ "promisingcircle_pcount,\n"
#~ "ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) As "
#~ "lamecircle_pcount;\n"
#~ "\n"
#~ "promisingcircle_pcount | lamecircle_pcount\n"
#~ "------------------------+-------------------\n"
#~ "             33 |                9\n"
#~ "\n"
#~ "--A lighter but lamer circle\n"
#~ "-- only 2 points per quarter circle is an octagon\n"
#~ "--Below is a 100 meter octagon\n"
#~ "-- Note coordinates are in NAD 83 long lat which we transform\n"
#~ "to Mass state plane meter and then buffer to get measurements in meters;\n"
#~ "SELECT ST_AsText(ST_Buffer(\n"
#~ "ST_Transform(\n"
#~ "ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986)\n"
#~ ",100,2)) As octagon;\n"
#~ "----------------------\n"
#~ "POLYGON((236057.59057465 900908.759918696,236028.301252769 "
#~ "900838.049240578,235\n"
#~ "957.59057465 900808.759918696,235886.879896532 "
#~ "900838.049240578,235857.59057465\n"
#~ "900908.759918696,235886.879896532 900979.470596815,235957.59057465 "
#~ "901008.759918\n"
#~ "696,236028.301252769 900979.470596815,236057.59057465 900908.759918696))"
#~ msgstr ""
#~ "-- ポイントに対する近似円バッファ\n"
#~ "-- 4分の1円を2点で近似するようポイントに施したバッファは8辺のポリゴンで"
#~ "す。\n"
#~ "-- (ダイアグラム参照)\n"
#~ "SELECT ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50)) As "
#~ "promisingcircle_pcount,\n"
#~ "ST_NPoints(ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50, 2)) As "
#~ "lamecircle_pcount;\n"
#~ "\n"
#~ "promisingcircle_pcount | lamecircle_pcount\n"
#~ "------------------------+-------------------\n"
#~ "             33 |                9\n"
#~ "\n"
#~ "-- 手軽だけれども不十分な円(4分の1円で2点だけの八角形)\n"
#~ "-- 次に示すのは100メートルの八角形です。\n"
#~ "-- 座標系は、元はNAD 83経度緯度で、\n"
#~ "-- メートル単位マサチューセッツ州平面に変換してから、\n"
#~ "-- メートルでバッファを取っています。\n"
#~ "SELECT ST_AsText(ST_Buffer(\n"
#~ "ST_Transform(\n"
#~ "ST_SetSRID(ST_Point(-71.063526, 42.35785),4269), 26986)\n"
#~ ",100,2)) As octagon;\n"
#~ "----------------------\n"
#~ "POLYGON((236057.59057465 900908.759918696,236028.301252769 "
#~ "900838.049240578,235\n"
#~ "957.59057465 900808.759918696,235886.879896532 "
#~ "900838.049240578,235857.59057465\n"
#~ "900908.759918696,235886.879896532 900979.470596815,235957.59057465 "
#~ "901008.759918\n"
#~ "696,236028.301252769 900979.470596815,236057.59057465 900908.759918696))"

#~ msgid ""
#~ ", <xref linkend=\"ST_DWithin\"/>, <xref linkend=\"ST_SetSRID\"/>, <xref "
#~ "linkend=\"ST_Transform\"/>, <xref linkend=\"ST_Union\"/>, <xref linkend="
#~ "\"ST_MakeValid\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_DWithin\"/>, <xref linkend=\"ST_SetSRID\"/>, <xref "
#~ "linkend=\"ST_Transform\"/>, <xref linkend=\"ST_Union\"/>, <xref linkend="
#~ "\"ST_MakeValid\"/>"

#~ msgid "Creates a polygonal geometry formed by the linework of a geometry."
#~ msgstr "与えられたジオメトリの構成ラインから面ジオメトリを生成します。"

#~ msgid ""
#~ "Creates an areal geometry formed by the constituent linework of the input "
#~ "geometry. The input can be LINESTRINGS, MULTILINESTRINGS, POLYGONS, "
#~ "MULTIPOLYGONS, and GeometryCollections. The result is a Polygon or "
#~ "MultiPolygon, depending on input. If the input linework does not form "
#~ "polygons, NULL is returned."
#~ msgstr ""
#~ "与えられたジオメトリの構成ラインから面ジオメトリを生成します。入力として"
#~ "LINESTRING, MULTILINESTRING, POLYGON, MULTIPOLYGON, GEOMETRYCOLLECTIONを取"
#~ "ることができます。返り値は、ポリゴンまたはマルチポリゴンで、どちらになるか"
#~ "は入力に依存します。入力構成ラインがポリゴンを形成しない場合はNULLを返しま"
#~ "す。"

#~ msgid "This function assumes all inner geometries represent holes"
#~ msgstr "この関数は全ての内部ジオメトリが穴を表現すると仮定します。"

#~ msgid ""
#~ "Input linework must be correctly noded for this function to work properly"
#~ msgstr ""
#~ "この関数が正しく動作するには、入力ラインに正しくノードが作成されている必要"
#~ "があります。"

#~ msgid "Availability: 1.1.0"
#~ msgstr "Availability: 1.1.0"

#~ msgid "These will create a donut"
#~ msgstr "ドーナツを生成します。"

#~ msgid ""
#~ "--using polygons\n"
#~ "SELECT ST_BuildArea(ST_Collect(smallc,bigc))\n"
#~ "FROM (SELECT\n"
#~ "    ST_Buffer(\n"
#~ "      ST_GeomFromText('POINT(100 90)'), 25) As smallc,\n"
#~ "    ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50) As bigc) As foo;"
#~ msgstr ""
#~ "-- ポリゴンを使用\n"
#~ "SELECT ST_BuildArea(ST_Collect(smallc,bigc))\n"
#~ "FROM (SELECT\n"
#~ "    ST_Buffer(\n"
#~ "      ST_GeomFromText('POINT(100 90)'), 25) As smallc,\n"
#~ "    ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50) As bigc) As foo;"

#~ msgid ""
#~ ", <xref linkend=\"ST_MakePolygon\"/>, <xref linkend=\"ST_MakeValid\"/>, "
#~ "<xref linkend=\"ST_BdPolyFromText\"/>, <xref linkend=\"ST_BdMPolyFromText"
#~ "\"/> (wrappers to this function with standard OGC interface)"
#~ msgstr ""
#~ ", <xref linkend=\"ST_MakePolygon\"/>, <xref linkend=\"ST_MakeValid\"/>, "
#~ "<xref linkend=\"ST_BdPolyFromText\"/>, <xref linkend=\"ST_BdMPolyFromText"
#~ "\"/> (wrappers to this function with standard OGC interface)"

#~ msgid "ST_Centroid"
#~ msgstr "ST_Centroid"

#~ msgid ""
#~ "<funcprototype> <funcdef>geometry <function>ST_Centroid</function></"
#~ "funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>geography "
#~ "<function>ST_Centroid</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>g1</parameter></paramdef> <paramdef choice=\"opt"
#~ "\"><type>boolean </type> <parameter>use_spheroid=true</parameter></"
#~ "paramdef> </funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>geometry <function>ST_Centroid</function></"
#~ "funcdef> <paramdef><type>geometry </type> <parameter>g1</parameter></"
#~ "paramdef> </funcprototype> <funcprototype> <funcdef>geography "
#~ "<function>ST_Centroid</function></funcdef> <paramdef><type>geography </"
#~ "type> <parameter>g1</parameter></paramdef> <paramdef choice=\"opt"
#~ "\"><type>boolean </type> <parameter>use_spheroid=true</parameter></"
#~ "paramdef> </funcprototype>"

#~ msgid ""
#~ "Computes a point which is the geometric center of mass of a geometry. For "
#~ "[<varname>MULTI</varname>]<varname>POINT</varname>s, the centroid is the "
#~ "arithmetic mean of the input coordinates. For [<varname>MULTI</"
#~ "varname>]<varname>LINESTRING</varname>s, the centroid is computed using "
#~ "the weighted length of each line segment. For [<varname>MULTI</"
#~ "varname>]<varname>POLYGON</varname>s, the centroid is computed in terms "
#~ "of area. If an empty geometry is supplied, an empty "
#~ "<varname>GEOMETRYCOLLECTION</varname> is returned. If <varname>NULL</"
#~ "varname> is supplied, <varname>NULL</varname> is returned. If "
#~ "<varname>CIRCULARSTRING</varname> or <varname>COMPOUNDCURVE</varname> are "
#~ "supplied, they are converted to linestring with CurveToLine first, then "
#~ "same than for <varname>LINESTRING</varname>"
#~ msgstr ""
#~ "ジオメトリの幾何学的重心を計算します。[<varname>MULTI</"
#~ "varname>]<varname>POINT</varname>に対しては、入力座標の算術平均として計算"
#~ "されます。 [<varname>MULTI</varname>]<varname>LINESTRING</varname>に対して"
#~ "は、各辺の重み付き長さとして計算されます。 [<varname>MULTI</"
#~ "varname>]<varname>POLYGON</varname>に対しては、面積から計算されます。空ジ"
#~ "オメトリが与えられた場合には、空の<varname>GEOMETRYCOLLECTION</varname>が"
#~ "返されます。<varname>NULL</varname>が与えられた場合には、<varname>NULL</"
#~ "varname>が返されます。<varname>CIRCULARSTRING</varname>または"
#~ "<varname>COMPOUNDCURVE</varname>が与えられた場合には、まずCurveToLineで直"
#~ "線に変換されてから、<varname>LINESTRING</varname>と同じ計算を行います。"

#~ msgid ""
#~ "For mixed-dimension input, the result is equal to the centroid of the "
#~ "component Geometries of highest dimension (since the lower-dimension "
#~ "geometries contribute zero \"weight\" to the centroid)."
#~ msgstr ""
#~ "入力が混合次元の場合には、結果は最大次元のジオメトリの重心と同じになりま"
#~ "す (低次元ジオメトリは重心に0の「重み」を与えるためです)。"

#~ msgid ""
#~ "Note that for polygonal geometries the centroid does not necessarily lie "
#~ "in the interior of the polygon. For example, see the diagram below of the "
#~ "centroid of a C-shaped polygon. To construct a point guaranteed to lie in "
#~ "the interior of a polygon use <xref linkend=\"ST_PointOnSurface\"/>."
#~ msgstr ""
#~ "ポリゴンジオメトリに対しては、重心は必ずしもポリゴンの内部にあるわけではな"
#~ "いことに注意して下さい。たとえば、下図のCの形のポリゴンの重心をご覧下さ"
#~ "い。ポリゴン内部にポイントがあることを保障するには<xref linkend="
#~ "\"ST_PointOnSurface\"/>を使います。"

#~ msgid ""
#~ "New in 2.3.0 : supports <varname>CIRCULARSTRING</varname> and "
#~ "<varname>COMPOUNDCURVE</varname> (using CurveToLine)"
#~ msgstr ""
#~ "New in 2.3.0 : <varname>CIRCULARSTRING</varname>と<varname>COMPOUNDCURVE</"
#~ "varname>に対応するようになりました (CurveToLineを使います)。"

#~ msgid "Availability: 2.4.0 support for geography was introduced."
#~ msgstr "Availability: 2.4.0 ジオグラフィが導入されました。"

#~ msgid "&sfs_compliant;"
#~ msgstr "&sfs_compliant;"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 8.1.4, 9.5.5"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 8.1.4, 9.5.5"

#~ msgid ""
#~ "In the following illustrations the green dot is the centroid of the "
#~ "source geometry."
#~ msgstr "次に示す図では、緑点が入力ジオメトリの重心です。"

#~ msgid "Centroid of a <varname>MULTIPOINT</varname>"
#~ msgstr "<varname>MULTIPOINT</varname>の重心"

#~ msgid "Centroid of a <varname>LINESTRING</varname>"
#~ msgstr "<varname>LINESTRING</varname>の重心"

#~ msgid "Centroid of a <varname>POLYGON</varname>"
#~ msgstr "<varname>POLYGON</varname>の重心"

#~ msgid "Centroid of a <varname>GEOMETRYCOLLECTION</varname>"
#~ msgstr "<varname>GEOMETRYCOLLECTION</varname>の重心"

#~ msgid ""
#~ "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, "
#~ "0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));\n"
#~ "                st_astext\n"
#~ "------------------------------------------\n"
#~ " POINT(2.30769230769231 3.30769230769231)\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_centroid(g))\n"
#~ "FROM  ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 "
#~ "2, 0.5 2, 0 2)')  AS g ;\n"
#~ "------------------------------------------\n"
#~ "POINT(0.5 1)\n"
#~ "\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_centroid(g))\n"
#~ "FROM  ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, "
#~ "0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))' ) AS g;\n"
#~ "------------------------------------------\n"
#~ "POINT(0.5 1)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_Centroid('MULTIPOINT ( -1 0, -1 2, -1 3, -1 4, -1 7, "
#~ "0 1, 0 3, 1 1, 2 0, 6 0, 7 8, 9 8, 10 6 )'));\n"
#~ "                st_astext\n"
#~ "------------------------------------------\n"
#~ " POINT(2.30769230769231 3.30769230769231)\n"
#~ "(1 row)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_centroid(g))\n"
#~ "FROM  ST_GeomFromText('CIRCULARSTRING(0 2, -1 1,0 0, 0.5 0, 1 0, 2 1, 1 "
#~ "2, 0.5 2, 0 2)')  AS g ;\n"
#~ "------------------------------------------\n"
#~ "POINT(0.5 1)\n"
#~ "\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_centroid(g))\n"
#~ "FROM  ST_GeomFromText('COMPOUNDCURVE(CIRCULARSTRING(0 2, -1 1,0 0),(0 0, "
#~ "0.5 0, 1 0),CIRCULARSTRING( 1 0, 2 1, 1 2),(1 2, 0.5 2, 0 2))' ) AS g;\n"
#~ "------------------------------------------\n"
#~ "POINT(0.5 1)"

#~ msgid ", <xref linkend=\"ST_GeometricMedian\"/>"
#~ msgstr ", <xref linkend=\"ST_GeometricMedian\"/>"

#~ msgid "ST_ConcaveHull"
#~ msgstr "ST_ConcaveHull"

#~ msgid ""
#~ "Computes a possibly concave geometry that encloses all input geometry "
#~ "vertices"
#~ msgstr ""
#~ "全ての入力ジオメトリの頂点を囲むことができる凹多角形のジオメトリを計算しま"
#~ "す。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_ConcaveHull</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>target_percent</parameter></"
#~ "paramdef> <paramdef choice=\"opt\"><type>boolean </type> "
#~ "<parameter>allow_holes = false</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_ConcaveHull</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>target_percent</parameter></"
#~ "paramdef> <paramdef choice=\"opt\"><type>boolean </type> "
#~ "<parameter>allow_holes = false</parameter></paramdef>"

#~ msgid ""
#~ "A concave hull of a geometry represents a possibly concave geometry that "
#~ "encloses the input geometry. The result is a single polygon, line or "
#~ "point. It will not contain holes unless the optional "
#~ "<varname>allow_holes</varname> argument is specified as true."
#~ msgstr ""
#~ "ジオメトリの凹包は入力ジオメトリを囲む凹多角形のジオメトリを表現します。返"
#~ "り値は単一のポリゴン、ラインストリングまたはポイントです。任意引数"
#~ "<varname>allow_holes</varname>をTRUEに指定しない限り、穴を持ちません。"

#~ msgid ""
#~ "One can think of a concave hull as a geometry obtained by \"shrink-"
#~ "wrapping\" a set of geometries. This is different to the convex hull, "
#~ "which is more like wrapping a rubber band around the geometries. It is "
#~ "slower to compute than the convex hull but generally has a smaller area "
#~ "and represents a more natural boundary for the input geometry."
#~ msgstr ""
#~ "凹包はジオメトリ集合の収縮包装で得られるジオメトリとみることができます。ジ"
#~ "オメトリの周囲にゴムバンドをかけたような凸包と違う点です。凸包より計算時間"
#~ "がかかりますが、一般により小さい面積で、より入力ジオメトリに対して自然な境"
#~ "界を表現します。"

#~ msgid ""
#~ "The <varname>target_percent</varname> is the percentage of area of the "
#~ "convex hull the solution tries to approach. A target_percent of 1 gives "
#~ "the same result as the convex hull. A target_percent between 0 and 0.99 "
#~ "produces a result that should have a smaller area than the convex hull."
#~ msgstr ""
#~ "<varname>target_percent</varname>は、この関数が漸近を試みる、凸包の面積の"
#~ "百分率です。target_percentに1を与えると、凸包と同じ結果が得られます。 "
#~ "target_percentが0から0.99の間では、凸包より小さい面積の結果を返します。"

#~ msgid ""
#~ "The smaller the target percent, the longer it takes to process the "
#~ "concave hull, and the more likely to run into topological exceptions. "
#~ "Also the more floating points and number of points you accrue. First try "
#~ "0.99 which does a single pass, is usually very fast, sometimes as fast as "
#~ "computing the convex hull, and usually gives much better than 99% of "
#~ "shrink since it almost always overshoots. Second hope of 0.98 is slower, "
#~ "others get slower usually quadratically. To reduce precision and float "
#~ "points, use <xref linkend=\"ST_SimplifyPreserveTopology\"/> or <xref "
#~ "linkend=\"ST_SnapToGrid\"/> after ST_ConcaveHull. ST_SnapToGrid is a bit "
#~ "faster, but could result in invalid geometries whereas "
#~ "ST_SimplifyPreserveTopology almost always preserves the validity of the "
#~ "geometry."
#~ msgstr ""
#~ "目標割合を小さくすると、凹包処理が長くなり、トポロジ例外が発生しやすくなり"
#~ "ます。蓄積される浮動小数点数とポイントの数もまた多くなります。最初に0.99で"
#~ "実行してみて下さい。普通は非常に速く、時々凸包と同じ速さです。99%縮小では"
#~ "ほとんどの場合行き過ぎになるので、通常は99%縮小より良い結果になります。次"
#~ "に0.98で実行すると、2乗のオーダーで遅くなります。ST_ConcaveHull実行後に、"
#~ "精度と浮動小数点数を減らすために、<xref linkend="
#~ "\"ST_SimplifyPreserveTopology\"/>または<xref linkend=\"ST_SnapToGrid\"/>を"
#~ "使用します。ST_SnapToGridは少し早くなりますが、不正なジオメトリが得られる"
#~ "ことがあります。ST_SimplifyPreserveTopologyは常にジオメトリの妥当性を確保"
#~ "します。"

#~ msgid ""
#~ "This is not an aggregate function. To compute the concave hull of a set "
#~ "of geometries, use with <xref linkend=\"ST_Collect\"/> or <xref linkend="
#~ "\"ST_Union\"/> (e.g. <code>ST_ConcaveHull(ST_Collect(somepointfield), "
#~ "0.80)</code>."
#~ msgstr ""
#~ "集約関数ではありません。ジオメトリ集合の凹包を計算するには、<xref linkend="
#~ "\"ST_Collect\"/>または<xref linkend=\"ST_Union\"/>を使います "
#~ "(<code>ST_ConcaveHull(ST_Collect(somepointfield), 0.80)</code>等)。"

#~ msgid ""
#~ "For use with sets of points or linestrings use <code>ST_Collect</code>. "
#~ "Use <code>ST_Union</code> for polygons, since it may fail with invalid "
#~ "geometries."
#~ msgstr ""
#~ "ポイントまたはラインストリングの集合を使うには<code>ST_Collect</code>を使"
#~ "います。ポリゴンの集合を使うには、無効なジオメトリで失敗する可能性があるた"
#~ "め<code>ST_Union</code>を使います。"

#~ msgid ""
#~ "More real world examples and brief explanation of the technique are shown "
#~ "<ulink url=\"http://www.bostongis.com/postgis_concavehull.snippet"
#~ "\">http://www.bostongis.com/postgis_concavehull.snippet</ulink>"
#~ msgstr ""
#~ "現実世界の例と技術面でのしっかりした説明は、<ulink url=\"http://www."
#~ "bostongis.com/postgis_concavehull.snippet\">http://www.bostongis.com/"
#~ "postgis_concavehull.snippet</ulink>にあります。"

#~ msgid ""
#~ "Also check out Simon Greener's article on demonstrating ConcaveHull "
#~ "introduced in Oracle 11G R2. <ulink url=\"http://www.spatialdbadvisor.com/"
#~ "oracle_spatial_tips_tricks/172/concave-hull-geometries-in-"
#~ "oracle-11gr2\">http://www.spatialdbadvisor.com/"
#~ "oracle_spatial_tips_tricks/172/concave-hull-geometries-in-oracle-11gr2</"
#~ "ulink>. The solution we get at 0.75 target percent of convex hull is "
#~ "similar to the shape Simon gets with Oracle SDO_CONCAVEHULL_BOUNDARY."
#~ msgstr ""
#~ "Oracle 11G R2で導入された凹包のデモンストレーションに関するSimon Greenerさ"
#~ "んの記事も見てください。<ulink url=\"http://www.spatialdbadvisor.com/"
#~ "oracle_spatial_tips_tricks/172/concave-hull-geometries-in-"
#~ "oracle-11gr2\">http://www.spatialdbadvisor.com/"
#~ "oracle_spatial_tips_tricks/172/concave-hull-geometries-in-oracle-11gr2</"
#~ "ulink>にあります。凸包に対する目標割合を0.75にした際の形状がSimonさん"
#~ "OracleのSDO_CONCAVEHULL_BOUNDARYで得た形状と似ています。"

#~ msgid "Performed by the GEOS module"
#~ msgstr "GEOSモジュールによって実現しています。"

#~ msgid ""
#~ "--Get estimate of infected area based on point observations\n"
#~ "SELECT d.disease_type,\n"
#~ "    ST_ConcaveHull(ST_Collect(d.pnt_geom), 0.99) As geom\n"
#~ "    FROM disease_obs As d\n"
#~ "    GROUP BY d.disease_type;"
#~ msgstr ""
#~ "-- 観察ポイントを基に感染域の見積もりを得ます\n"
#~ "SELECT d.disease_type,\n"
#~ "    ST_ConcaveHull(ST_Collect(d.pnt_geom), 0.99) As geom\n"
#~ "    FROM disease_obs As d\n"
#~ "    GROUP BY d.disease_type;"

#~ msgid ""
#~ "ST_ConcaveHull of 2 polygons encased in target 100% shrink concave hull"
#~ msgstr " 縮小目標割合100%にした場合の2ポリゴンのST_ConcaveHull"

#~ msgid ""
#~ "-- geometries overlaid with concavehull\n"
#~ "-- at target 100% shrink (this is the same as convex hull - since no "
#~ "shrink)\n"
#~ "SELECT\n"
#~ "    ST_ConcaveHull(\n"
#~ "        ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
#~ "            50 60, 125 100, 175 150))'),\n"
#~ "        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
#~ "        ), 1)\n"
#~ "     As convexhull;"
#~ msgstr ""
#~ "-- 目標縮小率を100%にした (凸包と同じとなり、縮小していません)場合の凹包"
#~ "で\n"
#~ "-- 覆ったジオメトリ\n"
#~ "SELECT\n"
#~ "    ST_ConcaveHull(\n"
#~ "        ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
#~ "            50 60, 125 100, 175 150))'),\n"
#~ "        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
#~ "        ), 1)\n"
#~ "     As convexhull;"

#~ msgid ""
#~ "-- geometries overlaid with concavehull at target 90% of convex hull area"
#~ msgstr "凸包に対する縮小目標割合を90%にした凹包で覆われるジオメトリ"

#~ msgid ""
#~ "-- geometries overlaid with concavehull at target 90% shrink\n"
#~ "SELECT\n"
#~ "    ST_ConcaveHull(\n"
#~ "        ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
#~ "            50 60, 125 100, 175 150))'),\n"
#~ "        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
#~ "        ), 0.9)\n"
#~ "     As target_90;"
#~ msgstr ""
#~ "-- 目標縮小率を90%にした 場合の凹包で覆ったジオメトリ\n"
#~ "SELECT\n"
#~ "    ST_ConcaveHull(\n"
#~ "        ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
#~ "            50 60, 125 100, 175 150))'),\n"
#~ "        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
#~ "        ), 0.9)\n"
#~ "     As target_90;"

#~ msgid "L Shape points overlaid with convex hull"
#~ msgstr "凸包で覆われたL字型のポイント群"

#~ msgid ""
#~ "-- this produces a table of 42 points that form an L shape\n"
#~ "SELECT (ST_DumpPoints(ST_GeomFromText(\n"
#~ "'MULTIPOINT(14 14,34 14,54 14,74 14,94 14,114 14,134 14,\n"
#~ "150 14,154 14,154 6,134 6,114 6,94 6,74 6,54 6,34 6,\n"
#~ "14 6,10 6,8 6,7 7,6 8,6 10,6 30,6 50,6 70,6 90,6 110,6 130,\n"
#~ "6 150,6 170,6 190,6 194,14 194,14 174,14 154,14 134,14 114,\n"
#~ "14 94,14 74,14 54,14 34,14 14)'))).geom\n"
#~ "    INTO TABLE l_shape;\n"
#~ "\n"
#~ "SELECT ST_ConvexHull(ST_Collect(geom))\n"
#~ "FROM l_shape;"
#~ msgstr ""
#~ "-- 42ポイントでL字型を形成するテーブルを生成\n"
#~ "SELECT (ST_DumpPoints(ST_GeomFromText(\n"
#~ "'MULTIPOINT(14 14,34 14,54 14,74 14,94 14,114 14,134 14,\n"
#~ "150 14,154 14,154 6,134 6,114 6,94 6,74 6,54 6,34 6,\n"
#~ "14 6,10 6,8 6,7 7,6 8,6 10,6 30,6 50,6 70,6 90,6 110,6 130,\n"
#~ "6 150,6 170,6 190,6 194,14 194,14 174,14 154,14 134,14 114,\n"
#~ "14 94,14 74,14 54,14 34,14 14)'))).geom\n"
#~ "    INTO TABLE l_shape;\n"
#~ "\n"
#~ "SELECT ST_ConvexHull(ST_Collect(geom))\n"
#~ "FROM l_shape;"

#~ msgid "ST_ConcaveHull of L points at target 99% of convex hull"
#~ msgstr "凸包に対する縮小目標割合を99%としたL字型のポイント群の凹包"

#~ msgid ""
#~ "SELECT ST_ConcaveHull(ST_Collect(geom), 0.99)\n"
#~ "    FROM l_shape;"
#~ msgstr ""
#~ "SELECT ST_ConcaveHull(ST_Collect(geom), 0.99)\n"
#~ "    FROM l_shape;"

#~ msgid "Concave Hull of L points at target 80% convex hull area"
#~ msgstr "凸包に対する縮小目標割合を80%としたL字型のポイント群の凹包"

#~ msgid ""
#~ "-- Concave Hull L shape points\n"
#~ "    -- at target 80% of convexhull\n"
#~ "    SELECT ST_ConcaveHull(ST_Collect(geom), 0.80)\n"
#~ "    FROM l_shape;"
#~ msgstr ""
#~ "-- 凸包に対する縮小目標割合を80%としたL字型のポイント群の凹包\n"
#~ "    SELECT ST_ConcaveHull(ST_Collect(geom), 0.80)\n"
#~ "    FROM l_shape;"

#~ msgid "multilinestring overlaid with Convex hull"
#~ msgstr "凸包に覆われたマルチラインストリング"

#~ msgid ""
#~ "multilinestring with overlaid with Concave hull of linestrings at 99% "
#~ "target -- first hop"
#~ msgstr ""
#~ "凸包に対する縮小目標割合を99% (第1段階)とした凹包に覆われたマルチラインス"
#~ "トリング"

#~ msgid ""
#~ "SELECT ST_ConcaveHull(ST_GeomFromText('MULTILINESTRING((106 164,30 112,74 "
#~ "70,82 112,130 94,\n"
#~ "    130 62,122 40,156 32,162 76,172 88),\n"
#~ "(132 178,134 148,128 136,96 128,132 108,150 130,\n"
#~ "170 142,174 110,156 96,158 90,158 88),\n"
#~ "(22 64,66 28,94 38,94 68,114 76,112 30,\n"
#~ "132 10,168 18,178 34,186 52,184 74,190 100,\n"
#~ "190 122,182 148,178 170,176 184,156 164,146 178,\n"
#~ "132 186,92 182,56 158,36 150,62 150,76 128,88 118))'),0.99)"
#~ msgstr ""
#~ "SELECT ST_ConcaveHull(ST_GeomFromText('MULTILINESTRING((106 164,30 112,74 "
#~ "70,82 112,130 94,\n"
#~ "    130 62,122 40,156 32,162 76,172 88),\n"
#~ "(132 178,134 148,128 136,96 128,132 108,150 130,\n"
#~ "170 142,174 110,156 96,158 90,158 88),\n"
#~ "(22 64,66 28,94 38,94 68,114 76,112 30,\n"
#~ "132 10,168 18,178 34,186 52,184 74,190 100,\n"
#~ "190 122,182 148,178 170,176 184,156 164,146 178,\n"
#~ "132 186,92 182,56 158,36 150,62 150,76 128,88 118))'),0.99)"

#~ msgid ""
#~ ", <xref linkend=\"ST_ConvexHull\"/>, <xref linkend="
#~ "\"ST_SimplifyPreserveTopology\"/>, <xref linkend=\"ST_SnapToGrid\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_ConvexHull\"/>, <xref linkend="
#~ "\"ST_SimplifyPreserveTopology\"/>, <xref linkend=\"ST_SnapToGrid\"/>"

#~ msgid ""
#~ "Computes the convex hull of a geometry. The convex hull is the smallest "
#~ "convex geometry that encloses all geometries in the input."
#~ msgstr ""
#~ "ジオメトリの凸包を計算します。凸包は、入力ジオメトリのすべてを囲む最小の凸"
#~ "ジオメトリです。"

#~ msgid ""
#~ "One can think of the convex hull as the geometry obtained by wrapping an "
#~ "rubber band around a set of geometries. This is different from a concave "
#~ "hull which is analogous to \"shrink-wrapping\" the geometries. A convex "
#~ "hull is often used to determine an affected area based on a set of point "
#~ "observations."
#~ msgstr ""
#~ "凸包は、ジオメトリ集合にゴムバンドをかけて得られたジオメトリとみることがで"
#~ "きます。ジオメトリの収縮包装に似ている凹包と違う点です。凸包は、しばしば観"
#~ "察値のポイントの集合を基にして、影響を受ける範囲を決定するのに使用します。"

#~ msgid ""
#~ "In the general case the convex hull is a Polygon. The convex hull of two "
#~ "or more collinear points is a two-point LineString. The convex hull of "
#~ "one or more identical points is a Point."
#~ msgstr ""
#~ "凸包は一般的にポリゴンです。二つ以上の同一線上のポイントの凸包は、2点のラ"
#~ "インストリングになります。一つ以上の同一ポイントの凸包はポイントです。"

#~ msgid ""
#~ "This is not an aggregate function. To compute the convex hull of a set of "
#~ "geometries, use <xref linkend=\"ST_Collect\"/> to aggregate them into a "
#~ "geometry collection (e.g. <code>ST_ConvexHull(ST_Collect(geom))</code>."
#~ msgstr ""
#~ "集約関数ではありません。ジオメトリ集合の凸包を計算するには、ジオメトリ集合"
#~ "をジオメトリコレクションに集約する<xref linkend=\"ST_Collect\"/>を使いま"
#~ "す (<code>ST_ConvexHull(ST_Collect(geom))</code>等)。"

#~ msgid "&sqlmm_compliant; SQL-MM 3: 5.1.16"
#~ msgstr "&sqlmm_compliant; SQL-MM 3: 5.1.16"

#~ msgid "Convex Hull of a MultiLinestring and a MultiPoint"
#~ msgstr "マルチラインストリングとマルチポイントの凸包"

#~ msgid ""
#~ "SELECT ST_AsText(ST_ConvexHull(\n"
#~ "    ST_Collect(\n"
#~ "        ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 "
#~ "30))'),\n"
#~ "            ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)')\n"
#~ "            )) );\n"
#~ "---st_astext--\n"
#~ "POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_ConvexHull(\n"
#~ "    ST_Collect(\n"
#~ "        ST_GeomFromText('MULTILINESTRING((100 190,10 8),(150 10, 20 "
#~ "30))'),\n"
#~ "            ST_GeomFromText('MULTIPOINT(50 5, 150 30, 50 10, 10 10)')\n"
#~ "            )) );\n"
#~ "---st_astext--\n"
#~ "POLYGON((50 5,10 8,10 10,100 190,150 30,150 10,50 5))"

#~ msgid "Using with ST_Collect to compute the convex hulls of geometry sets."
#~ msgstr "ST_Collectを使ってジオメトリ集合の凸包を計算します。"

#~ msgid ""
#~ "--Get estimate of infected area based on point observations\n"
#~ "SELECT d.disease_type,\n"
#~ "    ST_ConvexHull(ST_Collect(d.geom)) As geom\n"
#~ "    FROM disease_obs As d\n"
#~ "    GROUP BY d.disease_type;"
#~ msgstr ""
#~ "-- 観測ポイントに基づく感染面積の推定\n"
#~ "SELECT d.disease_type,\n"
#~ "    ST_ConvexHull(ST_Collect(d.geom)) As geom\n"
#~ "    FROM disease_obs As d\n"
#~ "    GROUP BY d.disease_type;"

#~ msgid ""
#~ ", <xref linkend=\"ST_ConcaveHull\"/>, <xref linkend="
#~ "\"ST_MinimumBoundingCircle\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_ConcaveHull\"/>, <xref linkend="
#~ "\"ST_MinimumBoundingCircle\"/>"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_DelaunayTriangles</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>tolerance</parameter></paramdef> "
#~ "<paramdef><type>int4 </type> <parameter>flags</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_DelaunayTriangles</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g1</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>tolerance</parameter></paramdef> "
#~ "<paramdef><type>int4 </type> <parameter>flags</parameter></paramdef>"

#~ msgid "2D Examples"
#~ msgstr "2次元の例"

#~ msgid ""
#~ "-- our original geometry --\n"
#~ "    ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
#~ "            50 60, 125 100, 175 150))'),\n"
#~ "        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
#~ "        )"
#~ msgstr ""
#~ "-- 元のジオメトリ --\n"
#~ "    ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
#~ "            50 60, 125 100, 175 150))'),\n"
#~ "        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
#~ "        )"

#~ msgid ""
#~ "ST_DelaunayTriangles of 2 polygons: delaunay triangle polygons each "
#~ "triangle themed in different color"
#~ msgstr ""
#~ "二つのポリゴンのST_DelaunayTriangles: ポリゴンごとに異なる色をつけたドロ"
#~ "ネー三角形ポリゴン"

#~ msgid ""
#~ "-- geometries overlaid multilinestring triangles\n"
#~ "SELECT\n"
#~ "    ST_DelaunayTriangles(\n"
#~ "        ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
#~ "            50 60, 125 100, 175 150))'),\n"
#~ "        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
#~ "        ))\n"
#~ "     As  dtriag;"
#~ msgstr ""
#~ "-- マルチラインストリングによる三角形を載せたジオメトリ\n"
#~ "SELECT\n"
#~ "    ST_DelaunayTriangles(\n"
#~ "        ST_Union(ST_GeomFromText('POLYGON((175 150, 20 40,\n"
#~ "            50 60, 125 100, 175 150))'),\n"
#~ "        ST_Buffer(ST_GeomFromText('POINT(110 170)'), 20)\n"
#~ "        ))\n"
#~ "     As  dtriag;"

#~ msgid "-- delaunay triangles as multilinestring"
#~ msgstr "マルチラインストリングにしたドロネー三角形"

#~ msgid "-- delaunay triangles of 45 points as 55 triangle polygons"
#~ msgstr "45個のポイントから生成した55個のドロネー三角形"

#~ msgid ""
#~ "-- this produces a table of 42 points that form an L shape\n"
#~ "SELECT (ST_DumpPoints(ST_GeomFromText(\n"
#~ "'MULTIPOINT(14 14,34 14,54 14,74 14,94 14,114 14,134 14,\n"
#~ "150 14,154 14,154 6,134 6,114 6,94 6,74 6,54 6,34 6,\n"
#~ "14 6,10 6,8 6,7 7,6 8,6 10,6 30,6 50,6 70,6 90,6 110,6 130,\n"
#~ "6 150,6 170,6 190,6 194,14 194,14 174,14 154,14 134,14 114,\n"
#~ "14 94,14 74,14 54,14 34,14 14)'))).geom\n"
#~ "    INTO TABLE l_shape;\n"
#~ "-- output as individual polygon triangles\n"
#~ "SELECT ST_AsText((ST_Dump(geom)).geom) As wkt\n"
#~ "FROM ( SELECT ST_DelaunayTriangles(ST_Collect(geom)) As geom\n"
#~ "FROM l_shape) As foo;\n"
#~ "\n"
#~ "---wkt ---\n"
#~ "POLYGON((6 194,6 190,14 194,6 194))\n"
#~ "POLYGON((14 194,6 190,14 174,14 194))\n"
#~ "POLYGON((14 194,14 174,154 14,14 194))\n"
#~ "POLYGON((154 14,14 174,14 154,154 14))\n"
#~ "POLYGON((154 14,14 154,150 14,154 14))\n"
#~ "POLYGON((154 14,150 14,154 6,154 14))\n"
#~ ":\n"
#~ ":"
#~ msgstr ""
#~ "-- L字型に42個のポイントを持つテーブルを生成\n"
#~ "SELECT (ST_DumpPoints(ST_GeomFromText(\n"
#~ "'MULTIPOINT(14 14,34 14,54 14,74 14,94 14,114 14,134 14,\n"
#~ "150 14,154 14,154 6,134 6,114 6,94 6,74 6,54 6,34 6,\n"
#~ "14 6,10 6,8 6,7 7,6 8,6 10,6 30,6 50,6 70,6 90,6 110,6 130,\n"
#~ "6 150,6 170,6 190,6 194,14 194,14 174,14 154,14 134,14 114,\n"
#~ "14 94,14 74,14 54,14 34,14 14)'))).geom\n"
#~ "    INTO TABLE l_shape;\n"
#~ "-- 個別の三角形ポリゴンとして出力\n"
#~ "SELECT ST_AsText((ST_Dump(geom)).geom) As wkt\n"
#~ "FROM ( SELECT ST_DelaunayTriangles(ST_Collect(geom)) As geom\n"
#~ "FROM l_shape) As foo;\n"
#~ "\n"
#~ "---wkt ---\n"
#~ "POLYGON((6 194,6 190,14 194,6 194))\n"
#~ "POLYGON((14 194,6 190,14 174,14 194))\n"
#~ "POLYGON((14 194,14 174,154 14,14 194))\n"
#~ "POLYGON((154 14,14 174,14 154,154 14))\n"
#~ "POLYGON((154 14,14 154,150 14,154 14))\n"
#~ "POLYGON((154 14,150 14,154 6,154 14))\n"
#~ ":\n"
#~ ":"

#~ msgid "3D Examples"
#~ msgstr "3次元の例"

#~ msgid ""
#~ "-- 3D multipoint --\n"
#~ "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText(\n"
#~ "'MULTIPOINT Z(14 14 10,\n"
#~ "150 14 100,34 6 25, 20 10 150)'))) As wkt;\n"
#~ "\n"
#~ "-----wkt----\n"
#~ "GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10))\n"
#~ " ,POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"
#~ msgstr ""
#~ "-- 3次元マルチポイント --\n"
#~ "SELECT ST_AsText(ST_DelaunayTriangles(ST_GeomFromText(\n"
#~ "'MULTIPOINT Z(14 14 10,\n"
#~ "150 14 100,34 6 25, 20 10 150)'))) As wkt;\n"
#~ "\n"
#~ "----- WKT ----\n"
#~ "GEOMETRYCOLLECTION Z (POLYGON Z ((14 14 10,20 10 150,34 6 25,14 14 10))\n"
#~ " ,POLYGON Z ((14 14 10,34 6 25,150 14 100,14 14 10)))"

#~ msgid "ST_FilterByM"
#~ msgstr "ST_FilterByM"

#~ msgid "Removes vertices based on their M value"
#~ msgstr "M値に基づいて頂点を削除します。"

#~ msgid ""
#~ "Filters out vertex points based on their M-value. Returns a geometry with "
#~ "only vertex points that have a M-value larger or equal to the min value "
#~ "and smaller or equal to the max value. If max-value argument is left out "
#~ "only min value is considered. If fourth argument is left out the m-value "
#~ "will not be in the resulting geometry. If resulting geometry have too few "
#~ "vertex points left for its geometry type an empty geometry will be "
#~ "returned. In a geometry collection geometries without enough points will "
#~ "just be left out silently."
#~ msgstr ""
#~ "M値に基づいた頂点ポイントのフィルタリングを行います。返されるジオメトリは"
#~ "最小値(min値)以上かつ最大値(max値)以下のM値を持つポイントだけでできていま"
#~ "す。最大値の引数が指定されていない場合には、最小値のみ考慮されます。第4引"
#~ "数が指定されていない場合には、M値は結果ジオメトリに存在しません。結果ジオ"
#~ "メトリの頂点ポイントの数が、ジオメトリを構成するに必要な数に達しない場合に"
#~ "は、空ジオメトリが返されます。ジオメトリコレクション内の、十分なポイントを"
#~ "持たないジオメトリ要素は消えます。"

#~ msgid ""
#~ "This function is mainly intended to be used in conjunction with "
#~ "ST_SetEffectiveArea. ST_EffectiveArea sets the effective area of a vertex "
#~ "in its m-value. With ST_FilterByM it then is possible to get a simplified "
#~ "version of the geometry without any calculations, just by filtering"
#~ msgstr ""
#~ "この関数は主にST_SetEffectiveAreaとの併用を意図しています。"
#~ "ST_SetEffectiveAreaは頂点の有効面積をM値に設定します。ST_FilterByMによる"
#~ "フィルタリングだけで、他の計算なしに簡略化されたジオメトリを得られます。"

#~ msgid ""
#~ "There is a difference in what ST_SimplifyVW returns when not enough "
#~ "points meet the criteria compared to ST_FilterByM. ST_SimplifyVW returns "
#~ "the geometry with enough points while ST_FilterByM returns an empty "
#~ "geometry"
#~ msgstr ""
#~ "ポイント数が基準を満たすのに十分でない時のST_SimplifyVWの返り値と"
#~ "ST_FilterByMの返り値とで違いがあります。ST_FilterByMは空ジオメトリを返し、"
#~ "ST_SimplifyVWは十分なポイントを持つジオメトリを返します。"

#~ msgid "Note that the returned geometry might be invalid"
#~ msgstr "返されるジオメトリは不正である場合があることに注意して下さい。"

#~ msgid "This function returns all dimensions, including the Z and M values"
#~ msgstr "この関数は全ての次元を返し、Z値もM値も残ります。"

#~ msgid "Availability: 2.5.0"
#~ msgstr "Availability: 2.5.0"

#~ msgid "A linestring is filtered"
#~ msgstr "フィルタリングされたラインストリング"

#~ msgid ""
#~ "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified\n"
#~ "FROM (SELECT  ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 "
#~ "10)'::geometry) geom) As foo;\n"
#~ "-result\n"
#~ "         simplified\n"
#~ "----------------------------\n"
#~ " LINESTRING(5 2,7 25,10 10)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_FilterByM(geom,30)) simplified\n"
#~ "FROM (SELECT  ST_SetEffectiveArea('LINESTRING(5 2, 3 8, 6 20, 7 25, 10 "
#~ "10)'::geometry) geom) As foo;\n"
#~ "-- 結果 --\n"
#~ "         simplified\n"
#~ "----------------------------\n"
#~ " LINESTRING(5 2,7 25,10 10)"

#~ msgid ", <xref linkend=\"ST_SimplifyVW\"/>"
#~ msgstr ", <xref linkend=\"ST_SimplifyVW\"/>"

#~ msgid "ST_GeneratePoints"
#~ msgstr "ST_GeneratePoints"

#~ msgid "Generates random points contained in a Polygon or MultiPolygon."
#~ msgstr "ポリゴン内やマルチポリゴン内にランダムなポイントを生成します。"

#~ msgid ""
#~ "<funcprototype> <funcdef>geometry <function>ST_GeneratePoints</function></"
#~ "funcdef> <paramdef> <parameter>g</parameter> <type>geometry</type> </"
#~ "paramdef> <paramdef> <parameter>npoints</parameter> <type>integer</type> "
#~ "</paramdef> </funcprototype> <funcprototype> <funcdef>geometry "
#~ "<function>ST_GeneratePoints</function></funcdef> <paramdef> "
#~ "<type>geometry</type> <parameter>g</parameter> </paramdef> <paramdef> "
#~ "<type>integer</type> <parameter>npoints</parameter> </paramdef> "
#~ "<paramdef> <type>integer</type> <parameter>seed</parameter> </paramdef> </"
#~ "funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>geometry <function>ST_GeneratePoints</function></"
#~ "funcdef> <paramdef> <parameter>g</parameter> <type>geometry</type> </"
#~ "paramdef> <paramdef> <parameter>npoints</parameter> <type>integer</type> "
#~ "</paramdef> </funcprototype> <funcprototype> <funcdef>geometry "
#~ "<function>ST_GeneratePoints</function></funcdef> <paramdef> "
#~ "<type>geometry</type> <parameter>g</parameter> </paramdef> <paramdef> "
#~ "<type>integer</type> <parameter>npoints</parameter> </paramdef> "
#~ "<paramdef> <type>integer</type> <parameter>seed</parameter> </paramdef> </"
#~ "funcprototype>"

#~ msgid ""
#~ "ST_GeneratePoints generates a given number of pseudo-random points which "
#~ "lie within the input area. The optional <code>seed</code> is used to "
#~ "regenerate a deterministic sequence of points, and must be greater than "
#~ "zero."
#~ msgstr ""
#~ "ST_GeneratePointsは、入力の面内に指定した個数のポイントが出現するまで疑似"
#~ "乱数によるポイントを生成します。任意引数の<code>seed</code>は、ポイント列"
#~ "の再生成が決定的にするために使い、0より大きい数でなければなりません。"

#~ msgid "Enhanced: 3.0.0, added seed parameter"
#~ msgstr "Enhanced: 3.0.0 seedパラメータの追加"

#~ msgid ""
#~ "Generated 12 Points overlaid on top of original polygon using a random "
#~ "seed value 1996"
#~ msgstr ""
#~ "乱数シード値に1996を使った元のポリゴンの上に重なった12個のポイント生成"

#~ msgid ""
#~ "SELECT ST_GeneratePoints(geom, 12, 1996)\n"
#~ "FROM (\n"
#~ "    SELECT ST_Buffer(\n"
#~ "        ST_GeomFromText(\n"
#~ "        'LINESTRING(50 50,150 150,150 50)'),\n"
#~ "        10, 'endcap=round join=round') AS geom\n"
#~ ") AS s;"
#~ msgstr ""
#~ "SELECT ST_GeneratePoints(geom, 12, 1996)\n"
#~ "FROM (\n"
#~ "    SELECT ST_Buffer(\n"
#~ "        ST_GeomFromText(\n"
#~ "        'LINESTRING(50 50,150 150,150 50)'),\n"
#~ "        10, 'endcap=round join=round') AS geom\n"
#~ ") AS s;"

#~ msgid "ST_GeometricMedian"
#~ msgstr "ST_GeometricMedian"

#~ msgid "Returns the geometric median of a MultiPoint."
#~ msgstr "マルチポイントの幾何学的中央値を返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_GeometricMedian</function> </funcdef> "
#~ "<paramdef> <type>geometry</type> <parameter>geom</parameter></paramdef> "
#~ "<paramdef choice=\"opt\"><type>float8</type> <parameter>tolerance = NULL</"
#~ "parameter></paramdef> <paramdef choice=\"opt\"><type>int</type> "
#~ "<parameter>max_iter = 10000</parameter></paramdef> <paramdef choice=\"opt"
#~ "\"><type>boolean</type> <parameter>fail_if_not_converged = false</"
#~ "parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_GeometricMedian</function> </funcdef> "
#~ "<paramdef> <type>geometry</type> <parameter>geom</parameter></paramdef> "
#~ "<paramdef choice=\"opt\"><type>float8</type> <parameter>tolerance = NULL</"
#~ "parameter></paramdef> <paramdef choice=\"opt\"><type>int</type> "
#~ "<parameter>max_iter = 10000</parameter></paramdef> <paramdef choice=\"opt"
#~ "\"><type>boolean</type> <parameter>fail_if_not_converged = false</"
#~ "parameter></paramdef>"

#~ msgid ""
#~ "Computes the approximate geometric median of a MultiPoint geometry using "
#~ "the Weiszfeld algorithm. The geometric median is the point minimizing the "
#~ "sum of distances to the input points. It provides a centrality measure "
#~ "that is less sensitive to outlier points than the centroid (center of "
#~ "mass)."
#~ msgstr ""
#~ "マルチポイントジオメトリの幾何中央値の近似値を、Weiszfeldアルゴリズムを"
#~ "使って計算します。幾何中央値は、入力ポイントとの距離の合計を最小にするポイ"
#~ "ントです。幾何中央値によって、重心よりもはみ出しにくい中心測定ができます。"

#~ msgid ""
#~ "The algorithm iterates until the distance change between successive "
#~ "iterations is less than the supplied <varname>tolerance</varname> "
#~ "parameter. If this condition has not been met after "
#~ "<varname>max_iterations</varname> iterations, the function produces an "
#~ "error and exits, unless <varname>fail_if_not_converged</varname> is set "
#~ "to <code>false</code> (the default)."
#~ msgstr ""
#~ "このアルゴリズムでは、成功した回次の間の距離の変化が、<varname>tolerance</"
#~ "varname>パラメータよりも小さくなるまで繰り返します。"
#~ "<varname>max_iterations</varname>回を超えた場合には、関数は"
#~ "<varname>fail_if_not_converged</varname>を<code>FALSE</code>に指定してい"
#~ "る (デフォルト)場合を除いて、エラーを生成して終了します。"

#~ msgid ""
#~ "If a <varname>tolerance</varname> argument is not provided, the tolerance "
#~ "value is calculated based on the extent of the input geometry."
#~ msgstr ""
#~ "<varname>tolerance</varname>値が渡されていない場合には、デフォルトの許容値"
#~ "は、入力ジオメトリの範囲を基に計算されます。"

#~ msgid ""
#~ "If present, the input point M values are interpreted as their relative "
#~ "weights."
#~ msgstr "存在する場合には、入力ポイントのM値は相対的な重みに解釈されます。"

#~ msgid "Enhanced: 2.5.0 Added support for M as weight of points."
#~ msgstr "Enhanced: 2.5.0 ポイントの重みとしてのM値の対応が追加されました。"

#~ msgid "&M_support;"
#~ msgstr "&M_support;"

#~ msgid ""
#~ "Comparison of the centroid (turquoise point) and geometric median (red "
#~ "point) of a four-point MultiPoint (yellow points)."
#~ msgstr ""
#~ "4点のマルチポイント (黄色の点)から得た重心 (青緑色の点)と幾何学的中央値 "
#~ "(赤色の点)との比較。"

#~ msgid ""
#~ "WITH test AS (\n"
#~ "SELECT 'MULTIPOINT((0 0), (1 1), (2 2), (200 200))'::geometry geom)\n"
#~ "SELECT\n"
#~ "  ST_AsText(ST_Centroid(geom)) centroid,\n"
#~ "  ST_AsText(ST_GeometricMedian(geom)) median\n"
#~ "FROM test;\n"
#~ "      centroid      |                 median\n"
#~ "--------------------+----------------------------------------\n"
#~ " POINT(50.75 50.75) | POINT(1.9761550281255 1.9761550281255)\n"
#~ "(1 row)"
#~ msgstr ""
#~ "WITH test AS (\n"
#~ "SELECT 'MULTIPOINT((0 0), (1 1), (2 2), (200 200))'::geometry geom)\n"
#~ "SELECT\n"
#~ "  ST_AsText(ST_Centroid(geom)) centroid,\n"
#~ "  ST_AsText(ST_GeometricMedian(geom)) median\n"
#~ "FROM test;\n"
#~ "      centroid      |                 median\n"
#~ "--------------------+----------------------------------------\n"
#~ " POINT(50.75 50.75) | POINT(1.9761550281255 1.9761550281255)\n"
#~ "(1 row)"

#~ msgid "ST_LineMerge"
#~ msgstr "ST_LineMerge"

#~ msgid "Return the lines formed by sewing together a MultiLineString."
#~ msgstr "MULTILINESTRINGを縫い合わせて形成したラインを返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_LineMerge</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>amultilinestring</parameter></"
#~ "paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_LineMerge</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>amultilinestring</parameter></"
#~ "paramdef>"

#~ msgid ""
#~ "Returns a LineString or MultiLineString formed by joining together the "
#~ "constituent line work of a MultiLineString. Lines are joined at their "
#~ "endpoints at 2-way intersections. Lines are not joined across "
#~ "intersections of 3-way or greater degree."
#~ msgstr ""
#~ "MULTILINESTRINGを構成するラインを結合して形成されたLINESTRINGまたは"
#~ "MULTILINESTRINGを返します。ラインは2方向交点の終端で結合します。ラインは3"
#~ "方向以上の交点では結合しません。"

#~ msgid ""
#~ "Only use with MultiLineString/LineStrings. If you pass a Polygon or "
#~ "GeometryCollection into this function, it returns an empty "
#~ "GeometryCollection"
#~ msgstr ""
#~ "MULTILINESTRING/LINESTRINGでのみ使います。POLYGONまたはGEOMETRYCOLLECTION"
#~ "をこの関数に渡した場合には、EMPTY GEOMETRYCOLLECTIONが返ります。"

#~ msgid "This function will strip the M dimension."
#~ msgstr "この関数はM値を取り除きます。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_LineMerge(\n"
#~ "'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45 -33,-46 -32))'\n"
#~ "                ));\n"
#~ "st_astext\n"
#~ "--------------------------------------------------------------------------------------------------\n"
#~ "LINESTRING(-29 -27,-30 -29.7,-36 -31,-45 -33,-46 -32)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_LineMerge(\n"
#~ "'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45 -33,-46 -32))'\n"
#~ "                ));\n"
#~ "st_astext\n"
#~ "--------------------------------------------------------------------------------------------------\n"
#~ "LINESTRING(-29 -27,-30 -29.7,-36 -31,-45 -33,-46 -32)"

#~ msgid ""
#~ "If merging is not possible due to non-touching lines, the original "
#~ "MultiLineString is returned."
#~ msgstr ""
#~ "接触するラインが無くマージができない場合には、元のMULTILINESTRINGが返され"
#~ "ます。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_LineMerge(\n"
#~ "'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 "
#~ "-32))'\n"
#~ "));\n"
#~ "st_astext\n"
#~ "----------------\n"
#~ "MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_LineMerge(\n"
#~ "'MULTILINESTRING((-29 -27,-30 -29.7,-36 -31,-45 -33),(-45.2 -33.2,-46 "
#~ "-32))'\n"
#~ "));\n"
#~ "st_astext\n"
#~ "----------------\n"
#~ "MULTILINESTRING((-45.2 -33.2,-46 -32),(-29 -27,-30 -29.7,-36 -31,-45 -33))"

#~ msgid "Example showing Z-dimension handling."
#~ msgstr "Z値処理を示す例。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_LineMerge(\n"
#~ "      'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), "
#~ "(-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))'\n"
#~ "        ));\n"
#~ "st_astext\n"
#~ "--------------------------------------------------------------------------------------------------\n"
#~ "LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 "
#~ "-32 11)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_LineMerge(\n"
#~ "      'MULTILINESTRING((-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 6), "
#~ "(-29 -27 12,-30 -29.7 5), (-45 -33 1,-46 -32 11))'\n"
#~ "        ));\n"
#~ "st_astext\n"
#~ "--------------------------------------------------------------------------------------------------\n"
#~ "LINESTRING Z (-30 -29.7 5,-29 -27 11,-30 -29.7 10,-36 -31 5,-45 -33 1,-46 "
#~ "-32 11)"

#~ msgid "ST_MaximumInscribedCircle"
#~ msgstr "ST_MaximumInscribedCircle"

#~ msgid ""
#~ "Computes the largest circle that is fully contained within a geometry."
#~ msgstr "ジオメトリに完全に含まれる最大の円を計算します。"

#~ msgid ""
#~ "<funcdef>(geometry, geometry, double precision) "
#~ "<function>ST_MaximumInscribedCircle</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>(geometry, geometry, double precision) "
#~ "<function>ST_MaximumInscribedCircle</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geom</parameter></paramdef>"

#~ msgid ""
#~ "Finds the largest circle that is fully contained within a geometry. "
#~ "Returns a record with the center point of the circle, a point on the "
#~ "geometry that is nearest to the center, and the radius of the circle."
#~ msgstr ""
#~ "完全にジオメトリ内に含まれる最大の円を探します。円の中心点、中心に最も近い"
#~ "ジオメトリ、円の半径からなるレコードを返します。"

#~ msgid ""
#~ "For polygonal inputs, the circle is inscribed within the external ring, "
#~ "using the internal rings as boundaries. For linear and point inputs, the "
#~ "circle is inscribed within the convex hull of the input, using the input "
#~ "as further boundaries."
#~ msgstr ""
#~ "ポリゴン入力の場合、円は外環に内接して、内環を境界として使用します。ライン"
#~ "またはポイントの入力では、円は入力の凸包に内接して、入力はさらに境界として"
#~ "使用します。"

#~ msgid "Availability: 3.1.0 - requires GEOS &gt;= 3.9.0."
#~ msgstr "Availability: 3.1.0 - GEOS 3.9.0以上が必要です。"

#~ msgid ""
#~ "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS "
#~ "nearest\n"
#~ "    FROM ST_MaximumInscribedCircle('POLYGON ((50 50, 150 50, 150 150, 50 "
#~ "150, 50 50))')\n"
#~ "\n"
#~ " radius |     center     |    nearest\n"
#~ "--------+----------------+---------------\n"
#~ "     50 | POINT(100 100) | POINT(100 50)"
#~ msgstr ""
#~ "SELECT radius, ST_AsText(center) AS center, ST_AsText(nearest) AS "
#~ "nearest\n"
#~ "    FROM ST_MaximumInscribedCircle('POLYGON ((50 50, 150 50, 150 150, 50 "
#~ "150, 50 50))')\n"
#~ "\n"
#~ " radius |     center     |    nearest\n"
#~ "--------+----------------+---------------\n"
#~ "     50 | POINT(100 100) | POINT(100 50)"

#~ msgid ""
#~ "Maximum inscribed circle of a triangle polygon. Center, nearest point, "
#~ "and radius are returned."
#~ msgstr "三角形ポリゴンの最大の内接円。中心点、最近点、半径が返ります。"

#~ msgid ""
#~ "Maximum inscribed circle of a multi-linestring. Center, nearest point, "
#~ "and radius are returned."
#~ msgstr ""
#~ "マルチラインストリングの最大の内接円。中心点、最近点と半径が返ります。"

#~ msgid ", <xref linkend=\"ST_MinimumBoundingRadius\"/>"
#~ msgstr ", <xref linkend=\"ST_MinimumBoundingRadius\"/>"

#~ msgid "ST_MinimumBoundingCircle"
#~ msgstr "ST_MinimumBoundingCircle"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_MinimumBoundingCircle</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef choice=\"opt\"><type>integer </type> "
#~ "<parameter>num_segs_per_qt_circ=48</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_MinimumBoundingCircle</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef choice=\"opt\"><type>integer </type> "
#~ "<parameter>num_segs_per_qt_circ=48</parameter></paramdef>"

#~ msgid ""
#~ "<para>Returns the smallest circle polygon that contains a geometry.</para>"
#~ msgstr "<para>入力ジオメトリを含む最小の円を返します。</para>"

#~ msgid ""
#~ "The circle is approximated by a polygon with a default of 48 segments per "
#~ "quarter circle. Because the polygon is an approximation of the minimum "
#~ "bounding circle, some points in the input geometry may not be contained "
#~ "within the polygon. The approximation can be improved by increasing the "
#~ "number of segments, with little performance penalty. For applications "
#~ "where a polygonal approximation is not suitable, ST_MinimumBoundingRadius "
#~ "may be used."
#~ msgstr ""
#~ "円はポリゴンで近似されます。デフォルトでは、4分の1円で48辺です。このポリゴ"
#~ "ンは円の最小バウンディングボックスの近似であるので、入力ジオメトリのいくつ"
#~ "かの点はポリゴンに入らない可能性があります。この近似は辺の数を増やすことに"
#~ "よって改善され、辺の数を増やすことで得られる不利益は小さいです。ポリゴン近"
#~ "似が適切でない場合のアプリケーションにおいては、ST_MinimumBoundingRadiusを"
#~ "使います。"

#~ msgid ""
#~ "It is often used with MULTI and Geometry Collections. Although it is not "
#~ "an aggregate - you can use it in conjunction with ST_Collect to get the "
#~ "minimum bounding circle of a set of geometries. "
#~ "ST_MinimumBoundingCircle(ST_Collect(somepointfield))."
#~ msgstr ""
#~ "しばしば、MULTI系とジオメトリコレクションで使用します。しかし、集約関数で"
#~ "はありません。ST_Collectと併用して、ジオメトリの集合の最小包含円を得ます。"
#~ "ST_MinimumBoundingCircle(ST_Collect(somepointfield))とします。"

#~ msgid ""
#~ "The ratio of the area of a polygon divided by the area of its Minimum "
#~ "Bounding Circle is often referred to as the Roeck test."
#~ msgstr ""
#~ "ポリゴンの面積を最小包含円の面積で割った割合は、しばしばRoeckテストとして"
#~ "参照されます。"

#~ msgid "Availability: 1.4.0"
#~ msgstr "Availability: 1.4.0"

#~ msgid ""
#~ "SELECT d.disease_type,\n"
#~ "    ST_MinimumBoundingCircle(ST_Collect(d.geom)) As geom\n"
#~ "    FROM disease_obs As d\n"
#~ "    GROUP BY d.disease_type;"
#~ msgstr ""
#~ "SELECT d.disease_type,\n"
#~ "    ST_MinimumBoundingCircle(ST_Collect(d.geom)) As geom\n"
#~ "    FROM disease_obs As d\n"
#~ "    GROUP BY d.disease_type;"

#~ msgid ""
#~ "Minimum bounding circle of a point and linestring. Using 8 segs to "
#~ "approximate a quarter circle"
#~ msgstr ""
#~ "ポイントとラインストリングの最小包含円です。4分の1円の近似に8区分使用して"
#~ "います。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_MinimumBoundingCircle(\n"
#~ "        ST_Collect(\n"
#~ "            ST_GeomFromText('LINESTRING(55 75,125 150)'),\n"
#~ "                ST_Point(20, 80)), 8\n"
#~ "                )) As wktmbc;\n"
#~ "wktmbc\n"
#~ "-----------\n"
#~ "POLYGON((135.59714732062 115,134.384753327498 "
#~ "102.690357210921,130.79416296937 90.8537670908995,124.963360620072 "
#~ "79.9451031602111,117.116420743937 70.3835792560632,107.554896839789 "
#~ "62.5366393799277,96.6462329091006 56.70583703063,84.8096427890789 "
#~ "53.115246672502,72.5000000000001 51.9028526793802,60.1903572109213 "
#~ "53.1152466725019,48.3537670908996 56.7058370306299,37.4451031602112 "
#~ "62.5366393799276,27.8835792560632 70.383579256063,20.0366393799278 "
#~ "79.9451031602109,14.20583703063 90.8537670908993,10.615246672502 "
#~ "102.690357210921,9.40285267938019 115,10.6152466725019 "
#~ "127.309642789079,14.2058370306299 139.1462329091,20.0366393799275 "
#~ "150.054896839789,27.883579256063 159.616420743937,\n"
#~ "37.4451031602108 167.463360620072,48.3537670908992 "
#~ "173.29416296937,60.190357210921 176.884753327498,\n"
#~ "72.4999999999998 178.09714732062,84.8096427890786 "
#~ "176.884753327498,96.6462329091003 173.29416296937,107.554896839789 "
#~ "167.463360620072,\n"
#~ "117.116420743937 159.616420743937,124.963360620072 "
#~ "150.054896839789,130.79416296937 139.146232909101,134.384753327498 "
#~ "127.309642789079,135.59714732062 115))"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_MinimumBoundingCircle(\n"
#~ "        ST_Collect(\n"
#~ "            ST_GeomFromText('LINESTRING(55 75,125 150)'),\n"
#~ "                ST_Point(20, 80)), 8\n"
#~ "                )) As wktmbc;\n"
#~ "wktmbc\n"
#~ "-----------\n"
#~ "POLYGON((135.59714732062 115,134.384753327498 "
#~ "102.690357210921,130.79416296937 90.8537670908995,124.963360620072 "
#~ "79.9451031602111,117.116420743937 70.3835792560632,107.554896839789 "
#~ "62.5366393799277,96.6462329091006 56.70583703063,84.8096427890789 "
#~ "53.115246672502,72.5000000000001 51.9028526793802,60.1903572109213 "
#~ "53.1152466725019,48.3537670908996 56.7058370306299,37.4451031602112 "
#~ "62.5366393799276,27.8835792560632 70.383579256063,20.0366393799278 "
#~ "79.9451031602109,14.20583703063 90.8537670908993,10.615246672502 "
#~ "102.690357210921,9.40285267938019 115,10.6152466725019 "
#~ "127.309642789079,14.2058370306299 139.1462329091,20.0366393799275 "
#~ "150.054896839789,27.883579256063 159.616420743937,\n"
#~ "37.4451031602108 167.463360620072,48.3537670908992 "
#~ "173.29416296937,60.190357210921 176.884753327498,\n"
#~ "72.4999999999998 178.09714732062,84.8096427890786 "
#~ "176.884753327498,96.6462329091003 173.29416296937,107.554896839789 "
#~ "167.463360620072,\n"
#~ "117.116420743937 159.616420743937,124.963360620072 "
#~ "150.054896839789,130.79416296937 139.146232909101,134.384753327498 "
#~ "127.309642789079,135.59714732062 115))"

#~ msgid "ST_MinimumBoundingRadius"
#~ msgstr "ST_MinimumBoundingRadius"

#~ msgid ""
#~ "Returns the center point and radius of the smallest circle that contains "
#~ "a geometry."
#~ msgstr "ジオメトリを完全に包含する最小円の中心ポイントと半径を返します。"

#~ msgid ""
#~ "<funcdef>(geometry, double precision) <function>ST_MinimumBoundingRadius</"
#~ "function></funcdef> <paramdef><type>geometry</type> <parameter>geom</"
#~ "parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>(geometry, double precision) <function>ST_MinimumBoundingRadius</"
#~ "function></funcdef> <paramdef><type>geometry</type> <parameter>geom</"
#~ "parameter></paramdef>"

#~ msgid ""
#~ "Returns a record containing the center point and radius of the smallest "
#~ "circle that contains a geometry."
#~ msgstr "ジオメトリを完全に包含する最小円の中心ポイントと半径を返します。"

#~ msgid ""
#~ "Use in conjunction with <xref linkend=\"ST_Collect\"/> to get the minimum "
#~ "bounding circle of a set of geometries."
#~ msgstr ""
#~ "ジオメトリの集合の最小包含円を得るには<xref linkend=\"ST_Collect\"/>と併用"
#~ "します。"

#~ msgid "Availability - 2.3.0"
#~ msgstr "Availability: 2.3.0"

#~ msgid ", <xref linkend=\"ST_MinimumBoundingCircle\"/>"
#~ msgstr ", <xref linkend=\"ST_MinimumBoundingCircle\"/>"

#~ msgid ""
#~ "SELECT ST_AsText(center), radius FROM "
#~ "ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 "
#~ "65136,26096 65427,26426 65078))');\n"
#~ "\n"
#~ "                st_astext                 |      radius\n"
#~ "------------------------------------------+------------------\n"
#~ " POINT(26284.8418027133 65267.1145090825) | 247.436045591407"
#~ msgstr ""
#~ "SELECT ST_AsText(center), radius FROM "
#~ "ST_MinimumBoundingRadius('POLYGON((26426 65078,26531 65242,26075 "
#~ "65136,26096 65427,26426 65078))');\n"
#~ "\n"
#~ "                st_astext                 |      radius\n"
#~ "------------------------------------------+------------------\n"
#~ " POINT(26284.8418027133 65267.1145090825) | 247.436045591407"

#~ msgid "Returns a minimum-area rectangle containing a geometry."
#~ msgstr "ジオメトリを囲む最小の回転四角形を返します。"

#~ msgid ""
#~ "Returns the minimum-area rotated rectangle enclosing a geometry. Note "
#~ "that more than one such rectangle may exist. May return a Point or "
#~ "LineString in the case of degenerate inputs."
#~ msgstr ""
#~ "ジオメトリを囲む最小の回転四角形を返します。最小回転四角形が複数個存在する"
#~ "ことがあるので注意して下さい。入力が退化している場合には、ポイントまたはラ"
#~ "インストリングを返すことがあります。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 "
#~ "2))'));\n"
#~ "\n"
#~ "                st_astext\n"
#~ "                ------------------------------------------------\n"
#~ "                POLYGON((3 2,2.88 2.16,-1.12 -0.84,-1 -1,3 2))"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_OrientedEnvelope('MULTIPOINT ((0 0), (-1 -1), (3 "
#~ "2))'));\n"
#~ "\n"
#~ "                st_astext\n"
#~ "                ------------------------------------------------\n"
#~ "                POLYGON((3 2,2.88 2.16,-1.12 -0.84,-1 -1,3 2))"

#~ msgid "Oriented envelope of a point and linestring."
#~ msgstr "ポイントとラインストリングの回転したエンベロープ。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_OrientedEnvelope(\n"
#~ "        ST_Collect(\n"
#~ "            ST_GeomFromText('LINESTRING(55 75,125 150)'),\n"
#~ "                ST_Point(20, 80))\n"
#~ "                )) As wktenv;\n"
#~ "wktenv\n"
#~ "-----------\n"
#~ "POLYGON((19.9999999999997 79.9999999999999,33.0769230769229 "
#~ "60.3846153846152,138.076923076924 130.384615384616,125.000000000001 "
#~ "150.000000000001,19.9999999999997 79.9999999999999))"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_OrientedEnvelope(\n"
#~ "        ST_Collect(\n"
#~ "            ST_GeomFromText('LINESTRING(55 75,125 150)'),\n"
#~ "                ST_Point(20, 80))\n"
#~ "                )) As wktenv;\n"
#~ "wktenv\n"
#~ "-----------\n"
#~ "POLYGON((19.9999999999997 79.9999999999999,33.0769230769229 "
#~ "60.3846153846152,138.076923076924 130.384615384616,125.000000000001 "
#~ "150.000000000001,19.9999999999997 79.9999999999999))"

#~ msgid "ST_OffsetCurve"
#~ msgstr "ST_OffsetCurve"

#~ msgid ""
#~ "Returns an offset line at a given distance and side from an input line."
#~ msgstr "与えられた距離と方面に入力ラインをずらしたラインを返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_OffsetCurve</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>line</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>signed_distance</parameter></"
#~ "paramdef> <paramdef choice=\"opt\"><type>text </type> "
#~ "<parameter>style_parameters=''</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_OffsetCurve</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>line</parameter></paramdef> "
#~ "<paramdef><type>float </type> <parameter>signed_distance</parameter></"
#~ "paramdef> <paramdef choice=\"opt\"><type>text </type> "
#~ "<parameter>style_parameters=''</parameter></paramdef>"

#~ msgid ""
#~ "Return an offset line at a given distance and side from an input line. "
#~ "All points of the returned geometries are not further than the given "
#~ "distance from the input geometry. Useful for computing parallel lines "
#~ "about a center line."
#~ msgstr ""
#~ "与えられた距離と方面に入力ラインをずらしたラインを返します。返されるジオメ"
#~ "トリの全てのポイントは、入力ジオメトリより与えられた距離以上には離れませ"
#~ "ん。中心線に対する平行線を計算するのに使用します。"

#~ msgid ""
#~ "For positive distance the offset is on the left side of the input line "
#~ "and retains the same direction. For a negative distance it is on the "
#~ "right side and in the opposite direction."
#~ msgstr ""
#~ "距離が正の場合には、入力ラインの左側にずらして、方向が保持されます。負の場"
#~ "合には、右側にずらし、逆方向のラインになります。"

#~ msgid ""
#~ "Units of distance are measured in units of the spatial reference system."
#~ msgstr "距離の単位は空間参照系の単位です。"

#~ msgid ""
#~ "Note that output may be a MULTILINESTRING or EMPTY for some jigsaw-shaped "
#~ "input geometries."
#~ msgstr ""
#~ "入力ジオメトリがジグソーパズルのような形状の場合には、出力が"
#~ "MULTILINESTRINGまたはEMPTYになることがあるので、注意して下さい。"

#~ msgid ""
#~ "The optional third parameter allows specifying a list of blank-separated "
#~ "key=value pairs to tweak operations as follows:"
#~ msgstr ""
#~ "任意指定の第3引数では、空白区切りのkey=valueペアの一覧を指定して、次のよう"
#~ "な操作をすることができます。"

#~ msgid ""
#~ "'quad_segs=#' : number of segments used to approximate a quarter circle "
#~ "(defaults to 8)."
#~ msgstr ""
#~ "'quad_segs=#' : 4分の1円区分数に近づけるために使われる区分の数 (デフォルト"
#~ "は8)。"

#~ msgid ""
#~ "'join=round|mitre|bevel' : join style (defaults to \"round\"). 'miter' is "
#~ "also accepted as a synonym for 'mitre'."
#~ msgstr ""
#~ "'join=round|mitre|bevel' : 接続スタイル (デフォルトは\"round"
#~ "\")。'miter'も'mitre'の同義語として受け付けます。"

#~ msgid ""
#~ "'mitre_limit=#.#' : mitre ratio limit (only affects mitred join style). "
#~ "'miter_limit' is also accepted as a synonym for 'mitre_limit'."
#~ msgstr ""
#~ "'mitre_limit=#.#' : マイターの割合制限 (接続スタイルがマイターである場合の"
#~ "み影響が出ます)。'miter_limit'も'mitre_limit'の同義語として受け付けます。"

#~ msgid "Availability: 2.0"
#~ msgstr "Availability: 2.0"

#~ msgid ""
#~ "Enhanced: 2.5 - added support for GEOMETRYCOLLECTION and MULTILINESTRING"
#~ msgstr "Enhanced: 2.5 - GEOMETRYCOLLECTIONとULTILINESTRINGへの対応追加"

#~ msgid "Compute an open buffer around roads"
#~ msgstr "道路の周りの開いたバッファの算出"

#~ msgid ""
#~ "SELECT ST_Union(\n"
#~ " ST_OffsetCurve(f.geom,  f.width/2, 'quad_segs=4 join=round'),\n"
#~ " ST_OffsetCurve(f.geom, -f.width/2, 'quad_segs=4 join=round')\n"
#~ ") as track\n"
#~ "FROM someroadstable;"
#~ msgstr ""
#~ "SELECT ST_Union(\n"
#~ " ST_OffsetCurve(f.geom,  f.width/2, 'quad_segs=4 join=round'),\n"
#~ " ST_OffsetCurve(f.geom, -f.width/2, 'quad_segs=4 join=round')\n"
#~ ") as track\n"
#~ "FROM someroadstable;"

#~ msgid "15, 'quad_segs=4 join=round' original line and its offset 15 units."
#~ msgstr "15, 'quad_segs=4 join=round' 元のラインと15単位ずらしたライン。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_OffsetCurve(ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)'),\n"
#~ "    15, 'quad_segs=4 join=round'));\n"
#~ "--output --\n"
#~ "LINESTRING(164 1,18 1,12.2597485145237 2.1418070123307,\n"
#~ "    7.39339828220179 5.39339828220179,\n"
#~ "    5.39339828220179 7.39339828220179,\n"
#~ "    2.14180701233067 12.2597485145237,1 18,1 195)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_OffsetCurve(ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)'),\n"
#~ "    15, 'quad_segs=4 join=round'));\n"
#~ "-- 出力 --\n"
#~ "LINESTRING(164 1,18 1,12.2597485145237 2.1418070123307,\n"
#~ "    7.39339828220179 5.39339828220179,\n"
#~ "    5.39339828220179 7.39339828220179,\n"
#~ "    2.14180701233067 12.2597485145237,1 18,1 195)"

#~ msgid "-15, 'quad_segs=4 join=round' original line and its offset -15 units"
#~ msgstr "-15, 'quad_segs=4 join=round' 元のラインと-15単位ずらしたライン。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_OffsetCurve(geom,\n"
#~ "    -15, 'quad_segs=4 join=round')) As notsocurvy\n"
#~ "    FROM ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)') As geom;\n"
#~ "-- notsocurvy --\n"
#~ "LINESTRING(31 195,31 31,164 31)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_OffsetCurve(geom,\n"
#~ "    -15, 'quad_segs=4 join=round')) As notsocurvy\n"
#~ "    FROM ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)') As geom;\n"
#~ "-- 曲線になりません --\n"
#~ "LINESTRING(31 195,31 31,164 31)"

#~ msgid ""
#~ "double-offset to get more curvy, note the first reverses direction, so "
#~ "-30 + 15 = -15"
#~ msgstr ""
#~ "二重にずらして曲線を得ます。1回目で逆方向にしていて、-30 + 15 = -15として"
#~ "います。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_OffsetCurve(ST_OffsetCurve(geom,\n"
#~ "    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')) As "
#~ "morecurvy\n"
#~ "    FROM ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)') As geom;\n"
#~ "-- morecurvy --\n"
#~ "LINESTRING(164 31,46 31,40.2597485145236 32.1418070123307,\n"
#~ "35.3933982822018 35.3933982822018,\n"
#~ "32.1418070123307 40.2597485145237,31 46,31 195)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_OffsetCurve(ST_OffsetCurve(geom,\n"
#~ "    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')) As "
#~ "morecurvy\n"
#~ "    FROM ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)') As geom;\n"
#~ "-- 曲線になります --\n"
#~ "LINESTRING(164 31,46 31,40.2597485145236 32.1418070123307,\n"
#~ "35.3933982822018 35.3933982822018,\n"
#~ "32.1418070123307 40.2597485145237,31 46,31 195)"

#~ msgid ""
#~ "double-offset to get more curvy,combined with regular offset 15 to get "
#~ "parallel lines. Overlaid with original."
#~ msgstr ""
#~ "二重にずらして曲線を得て、順方向に15ずらして平行線を得ます。元のラインを覆"
#~ "います。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_Collect(\n"
#~ "    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n"
#~ "    ST_OffsetCurve(ST_OffsetCurve(geom,\n"
#~ "    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n"
#~ "    )\n"
#~ ") As parallel_curves\n"
#~ "    FROM ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)') As geom;\n"
#~ "-- parallel curves  --\n"
#~ "MULTILINESTRING((164 1,18 1,12.2597485145237 2.1418070123307,\n"
#~ "7.39339828220179 5.39339828220179,5.39339828220179 7.39339828220179,\n"
#~ "2.14180701233067 12.2597485145237,1 18,1 195),\n"
#~ "(164 31,46 31,40.2597485145236 32.1418070123307,35.3933982822018 "
#~ "35.3933982822018,\n"
#~ "32.1418070123307 40.2597485145237,31 46,31 195))"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_Collect(\n"
#~ "    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=round'),\n"
#~ "    ST_OffsetCurve(ST_OffsetCurve(geom,\n"
#~ "    -30, 'quad_segs=4 join=round'), -15, 'quad_segs=4 join=round')\n"
#~ "    )\n"
#~ ") As parallel_curves\n"
#~ "    FROM ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)') As geom;\n"
#~ "-- 平行曲線 --\n"
#~ "MULTILINESTRING((164 1,18 1,12.2597485145237 2.1418070123307,\n"
#~ "7.39339828220179 5.39339828220179,5.39339828220179 7.39339828220179,\n"
#~ "2.14180701233067 12.2597485145237,1 18,1 195),\n"
#~ "(164 31,46 31,40.2597485145236 32.1418070123307,35.3933982822018 "
#~ "35.3933982822018,\n"
#~ "32.1418070123307 40.2597485145237,31 46,31 195))"

#~ msgid "15, 'quad_segs=4 join=bevel' shown with original line"
#~ msgstr "15, 'quad_segs=4 join=bevel' と元のライン"

#~ msgid ""
#~ "SELECT ST_AsText(ST_OffsetCurve(ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)'),\n"
#~ "        15, 'quad_segs=4 join=bevel'));\n"
#~ "-- output --\n"
#~ "LINESTRING(164 1,18 1,7.39339828220179 5.39339828220179,\n"
#~ "    5.39339828220179 7.39339828220179,1 18,1 195)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_OffsetCurve(ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)'),\n"
#~ "        15, 'quad_segs=4 join=bevel'));\n"
#~ "-- 出力 --\n"
#~ "LINESTRING(164 1,18 1,7.39339828220179 5.39339828220179,\n"
#~ "    5.39339828220179 7.39339828220179,1 18,1 195)"

#~ msgid "15,-15 collected, join=mitre mitre_limit=2.1"
#~ msgstr ""
#~ "join=mitre mitre_limit=2.1で、15ずらしたものと-15ずらしたものとを集めたも"
#~ "の。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_Collect(\n"
#~ "    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=mitre mitre_limit=2.2'),\n"
#~ "    ST_OffsetCurve(geom, -15, 'quad_segs=4 join=mitre mitre_limit=2.2')\n"
#~ "    ) )\n"
#~ "    FROM ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)') As geom;\n"
#~ "-- output --\n"
#~ "MULTILINESTRING((164 1,11.7867965644036 1,1 11.7867965644036,1 195),\n"
#~ "    (31 195,31 31,164 31))"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_Collect(\n"
#~ "    ST_OffsetCurve(geom, 15, 'quad_segs=4 join=mitre mitre_limit=2.2'),\n"
#~ "    ST_OffsetCurve(geom, -15, 'quad_segs=4 join=mitre mitre_limit=2.2')\n"
#~ "    ) )\n"
#~ "    FROM ST_GeomFromText(\n"
#~ "'LINESTRING(164 16,144 16,124 16,104 16,84 16,64 16,\n"
#~ "    44 16,24 16,20 16,18 16,17 17,\n"
#~ "    16 18,16 20,16 40,16 60,16 80,16 100,\n"
#~ "    16 120,16 140,16 160,16 180,16 195)') As geom;\n"
#~ "-- 出力 --\n"
#~ "MULTILINESTRING((164 1,11.7867965644036 1,1 11.7867965644036,1 195),\n"
#~ "    (31 195,31 31,164 31))"

#~ msgid "ST_PointOnSurface"
#~ msgstr "ST_PointOnSurface"

#~ msgid "Computes a point guaranteed to lie in a polygon, or on a geometry."
#~ msgstr ""
#~ "ポリゴン内またはジオメトリ上にあるのが保証されたポイントを返します。"

#~ msgid ""
#~ "Returns a <varname>POINT</varname> which is guaranteed to lie in the "
#~ "interior of a surface (POLYGON, MULTIPOLYGON, and CURVED POLYGON). In "
#~ "PostGIS this function also works on line and point geometries."
#~ msgstr ""
#~ "サーフェス (POLYGON、MULTIPOLYGON、CURVED POLYGON)内部にあることが保証され"
#~ "た<varname>POINT</varname>を返します。PostGISでは、この関数はラインジオメ"
#~ "トリとポイントジオメトリ上でも動作します。"

#~ msgid "&sfs_compliant; s3.2.14.2 // s3.2.18.2"
#~ msgstr "&sfs_compliant; s3.2.14.2 // s3.2.18.2"

#~ msgid ""
#~ "&sqlmm_compliant; SQL-MM 3: 8.1.5, 9.5.6. The specifications define "
#~ "ST_PointOnSurface for surface geometries only. PostGIS extends the "
#~ "function to support all common geometry types. Other databases (Oracle, "
#~ "DB2, ArcSDE) seem to support this function only for surfaces. SQL Server "
#~ "2008 supports all common geometry types."
#~ msgstr ""
#~ "&sqlmm_compliant; SQL-MM 3: 8.1.5, 9.5.6. 仕様では、サーフェスジオメトリの"
#~ "みのST_PointOnSurfaceが定義されています。PostGISは、すべての一般的なジオメ"
#~ "トリタイプに対応するよう拡張しています。他のデータベース (Oracle、DB2、"
#~ "ArcSDE)は、サーフェスに対してのみこの機能をサポートしているようです。SQL "
#~ "Server 2008では、すべての一般的なジオメトリタイプに対応しています。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));\n"
#~ " st_astext\n"
#~ "------------\n"
#~ " POINT(0 5)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));\n"
#~ " st_astext\n"
#~ "------------\n"
#~ " POINT(0 5)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::"
#~ "geometry));\n"
#~ "   st_astext\n"
#~ "----------------\n"
#~ " POINT(2.5 2.5)\n"
#~ "\n"
#~ "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 "
#~ "1, 0 10 2)')));\n"
#~ "   st_asewkt\n"
#~ "----------------\n"
#~ " POINT(0 0 1)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_PointOnSurface('POINT(0 5)'::geometry));\n"
#~ " st_astext\n"
#~ "------------\n"
#~ " POINT(0 5)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_PointOnSurface('LINESTRING(0 5, 0 10)'::geometry));\n"
#~ " st_astext\n"
#~ "------------\n"
#~ " POINT(0 5)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_PointOnSurface('POLYGON((0 0, 0 5, 5 5, 5 0, 0 0))'::"
#~ "geometry));\n"
#~ "   st_astext\n"
#~ "----------------\n"
#~ " POINT(2.5 2.5)\n"
#~ "\n"
#~ "SELECT ST_AsEWKT(ST_PointOnSurface(ST_GeomFromEWKT('LINESTRING(0 5 1, 0 0 "
#~ "1, 0 10 2)')));\n"
#~ "   st_asewkt\n"
#~ "----------------\n"
#~ " POINT(0 0 1)"

#~ msgid ", <xref linkend=\"ST_MaximumInscribedCircle\"/>"
#~ msgstr ", <xref linkend=\"ST_MaximumInscribedCircle\"/>"

#~ msgid "ST_Polygonize"
#~ msgstr "ST_Polygonize"

#~ msgid ""
#~ "Computes a collection of polygons formed from the linework of a set of "
#~ "geometries."
#~ msgstr ""
#~ "ジオメトリ集合のラインから形成されるポリゴンのコレクションを計算します。"

#~ msgid ""
#~ "<funcprototype> <funcdef>geometry <function>ST_Polygonize</function></"
#~ "funcdef> <paramdef><type>geometry set</type> <parameter>geomfield</"
#~ "parameter></paramdef> </funcprototype> <funcprototype> <funcdef>geometry "
#~ "<function>ST_Polygonize</function></funcdef> <paramdef><type>geometry[]</"
#~ "type> <parameter>geom_array</parameter></paramdef> </funcprototype>"
#~ msgstr ""
#~ "<funcprototype> <funcdef>geometry <function>ST_Polygonize</function></"
#~ "funcdef> <paramdef><type>geometry set</type> <parameter>geomfield</"
#~ "parameter></paramdef> </funcprototype> <funcprototype> <funcdef>geometry "
#~ "<function>ST_Polygonize</function></funcdef> <paramdef><type>geometry[]</"
#~ "type> <parameter>geom_array</parameter></paramdef> </funcprototype>"

#~ msgid ""
#~ "Creates a GeometryCollection containing the polygons formed by the "
#~ "constituent linework of a set of geometries. Input linework must be "
#~ "correctly noded for this function to work properly."
#~ msgstr ""
#~ "ジオメトリ集合の構成要素であるラインから形成されるポリゴンを含むジオメトリ"
#~ "コレクションを計算します。この関数が確実に動作するために、入力ラインは正し"
#~ "いノードを持たなければなりません。"

#~ msgid ""
#~ "To ensure input is fully noded use <xref linkend=\"ST_Node\"/> on the "
#~ "input geometry before polygonizing."
#~ msgstr ""
#~ "入力が完全にノードを持っているようにするには、ポリゴン化の前に入力ジオメト"
#~ "リに対して<xref linkend=\"ST_Node\"/>を使います。"

#~ msgid ""
#~ "GeometryCollections are often difficult to deal with with third party "
#~ "tools. Use <xref linkend=\"ST_Dump\"/> to convert the polygonize result "
#~ "into separate polygons."
#~ msgstr ""
#~ "ジオメトリコレクションは、サードパーティ製ツールでは、しばしば取り扱いが難"
#~ "しいとされることがあります。ポリゴン化の結果を個々のポリゴンに変換するには"
#~ "<xref linkend=\"ST_Dump\"/>を使います。"

#~ msgid "Availability: 1.0.0RC1"
#~ msgstr "Availability: 1.0.0RC1"

#~ msgid "Examples: Polygonizing single linestrings"
#~ msgstr "例: 単一ラインストリングのポリゴン化"

#~ msgid ""
#~ "SELECT ST_AsEWKT(ST_Polygonize(geom_4269)) As geomtextrep\n"
#~ "FROM (SELECT geom_4269 FROM ma.suffolk_edges ORDER BY tlid LIMIT 45) As "
#~ "foo;\n"
#~ "\n"
#~ "geomtextrep\n"
#~ "-------------------------------------\n"
#~ " SRID=4269;GEOMETRYCOLLECTION(POLYGON((-71.040878 42.285678,-71.040943 "
#~ "42.2856,-71.04096 42.285752,-71.040878 42.285678)),\n"
#~ " POLYGON((-71.17166 42.353675,-71.172026 42.354044,-71.17239 "
#~ "42.354358,-71.171794 42.354971,-71.170511 42.354855,\n"
#~ " -71.17112 42.354238,-71.17166 42.353675)))\n"
#~ "(1 row)\n"
#~ "\n"
#~ "--Use ST_Dump to dump out the polygonize geoms into individual polygons\n"
#~ "SELECT ST_AsEWKT((ST_Dump(foofoo.polycoll)).geom) As geomtextrep\n"
#~ "FROM (SELECT ST_Polygonize(geom_4269) As polycoll\n"
#~ "    FROM (SELECT geom_4269 FROM ma.suffolk_edges\n"
#~ "        ORDER BY tlid LIMIT 45) As foo) As foofoo;\n"
#~ "\n"
#~ "geomtextrep\n"
#~ "------------------------\n"
#~ " SRID=4269;POLYGON((-71.040878 42.285678,-71.040943 42.2856,-71.04096 "
#~ "42.285752,\n"
#~ "-71.040878 42.285678))\n"
#~ " SRID=4269;POLYGON((-71.17166 42.353675,-71.172026 42.354044,-71.17239 "
#~ "42.354358\n"
#~ ",-71.171794 42.354971,-71.170511 42.354855,-71.17112 42.354238,-71.17166 "
#~ "42.353675))\n"
#~ "(2 rows)"
#~ msgstr ""
#~ "SELECT ST_AsEWKT(ST_Polygonize(geom_4269)) As geomtextrep\n"
#~ "FROM (SELECT geom_4269 FROM ma.suffolk_edges ORDER BY tlid LIMIT 45) As "
#~ "foo;\n"
#~ "\n"
#~ "geomtextrep\n"
#~ "-------------------------------------\n"
#~ " SRID=4269;GEOMETRYCOLLECTION(POLYGON((-71.040878 42.285678,-71.040943 "
#~ "42.2856,-71.04096 42.285752,-71.040878 42.285678)),\n"
#~ " POLYGON((-71.17166 42.353675,-71.172026 42.354044,-71.17239 "
#~ "42.354358,-71.171794 42.354971,-71.170511 42.354855,\n"
#~ " -71.17112 42.354238,-71.17166 42.353675)))\n"
#~ "(1 row)\n"
#~ "\n"
#~ "-- ST_Dumpでポリゴン化されたジオメトリを個々のポリゴンにダンプします\n"
#~ "SELECT ST_AsEWKT((ST_Dump(foofoo.polycoll)).geom) As geomtextrep\n"
#~ "FROM (SELECT ST_Polygonize(geom_4269) As polycoll\n"
#~ "    FROM (SELECT geom_4269 FROM ma.suffolk_edges\n"
#~ "        ORDER BY tlid LIMIT 45) As foo) As foofoo;\n"
#~ "\n"
#~ "geomtextrep\n"
#~ "------------------------\n"
#~ " SRID=4269;POLYGON((-71.040878 42.285678,-71.040943 42.2856,-71.04096 "
#~ "42.285752,\n"
#~ "-71.040878 42.285678))\n"
#~ " SRID=4269;POLYGON((-71.17166 42.353675,-71.172026 42.354044,-71.17239 "
#~ "42.354358\n"
#~ ",-71.171794 42.354971,-71.170511 42.354855,-71.17112 42.354238,-71.17166 "
#~ "42.353675))\n"
#~ "(2 rows)"

#~ msgid ", <xref linkend=\"ST_Dump\"/>"
#~ msgstr ", <xref linkend=\"ST_Dump\"/>"

#~ msgid "ST_ReducePrecision"
#~ msgstr "ST_ReducePrecision"

#~ msgid "Returns a valid geometry with points rounded to a grid tolerance."
#~ msgstr ""
#~ "全ての与えられたグリッド許容値に丸められたポイントからなる妥当なジオメトリ"
#~ "を返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_ReducePrecision</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g</parameter></paramdef> "
#~ "<paramdef><type>float8 </type> <parameter>gridsize</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_ReducePrecision</function></funcdef> "
#~ "<paramdef><type>geometry </type> <parameter>g</parameter></paramdef> "
#~ "<paramdef><type>float8 </type> <parameter>gridsize</parameter></paramdef>"

#~ msgid ""
#~ "Returns a valid geometry with all points rounded to the provided grid "
#~ "tolerance, and features below the tolerance removed."
#~ msgstr ""
#~ "全ての与えられたグリッド許容値に丸められたポイントからなる妥当なジオメトリ"
#~ "を返します。許容値より下の地物は削除されます。"

#~ msgid ""
#~ "Unlike <xref linkend=\"ST_SnapToGrid\"/> the returned geometry will be "
#~ "valid, with no ring self-intersections or collapsed components."
#~ msgstr ""
#~ "<xref linkend=\"ST_SnapToGrid\"/>と違い、返されるジオメトリは妥当で、自己"
#~ "交差の環や崩壊した要素を伴いません。"

#~ msgid "Precision reduction can be used to:"
#~ msgstr "精度提言は次の場合に使います。"

#~ msgid "match coordinate precision to the data accuracy"
#~ msgstr "座標精度をデータ精度に合わせる"

#~ msgid "reduce the number of coordinates needed to represent a geometry"
#~ msgstr "ジオメトリを表現するのに必要な座標の数を減らす"

#~ msgid ""
#~ "ensure valid geometry output to formats which use lower precision (e.g. "
#~ "text formats such as WKT, GeoJSON or KML when the number of output "
#~ "decimal places is limited)."
#~ msgstr ""
#~ "低精度書式 (出力桁数が制限されるWKT, GeoJSON, KML等のテキスト書式)への出力"
#~ "ジオメトリの妥当性の確保。"

#~ msgid ""
#~ "export valid geometry to systems which use lower or limited precision (e."
#~ "g. SDE, Oracle tolerance value)"
#~ msgstr ""
#~ "妥当なジオメトリの低精度や制度制限のあるシステム (SDE, Oracle許容値等)への"
#~ "エクスポート"

#~ msgid ""
#~ "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));\n"
#~ "    st_astext\n"
#~ "-----------------\n"
#~ " POINT(1.4 19.3)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));\n"
#~ "  st_astext\n"
#~ "-------------\n"
#~ " POINT(1 19)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));\n"
#~ "  st_astext\n"
#~ "-------------\n"
#~ " POINT(0 20)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 0.1));\n"
#~ "    st_astext\n"
#~ "-----------------\n"
#~ " POINT(1.4 19.3)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 1.0));\n"
#~ "  st_astext\n"
#~ "-------------\n"
#~ " POINT(1 19)\n"
#~ "\n"
#~ "SELECT ST_AsText(ST_ReducePrecision('POINT(1.412 19.323)', 10));\n"
#~ "  st_astext\n"
#~ "-------------\n"
#~ " POINT(0 20)"

#~ msgid "Precision reduction can reduce number of vertices"
#~ msgstr "精度を落とすことで頂点数を減らすことができます。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, "
#~ "20.3 30, 40 40)', 1));\n"
#~ "  st_astext\n"
#~ "-------------\n"
#~ " LINESTRING (10 10, 20 30, 40 40)"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_ReducePrecision('LINESTRING (10 10, 19.6 30.1, 20 30, "
#~ "20.3 30, 40 40)', 1));\n"
#~ "  st_astext\n"
#~ "-------------\n"
#~ " LINESTRING (10 10, 20 30, 40 40)"

#~ msgid "Precision reduction splits polygons if needed to ensure validity"
#~ msgstr ""
#~ "妥当性を確保するために必要な場合には、精度を落とす際にポリゴンを分割しま"
#~ "す。"

#~ msgid ""
#~ "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 "
#~ "40, 50 10, 10 10))', 10));\n"
#~ "  st_astext\n"
#~ "-------------\n"
#~ " MULTIPOLYGON (((60 60, 70 30, 40 40, 60 60)), ((40 40, 50 10, 10 10, 40 "
#~ "40)))"
#~ msgstr ""
#~ "SELECT ST_AsText(ST_ReducePrecision('POLYGON ((10 10, 60 60.1, 70 30, 40 "
#~ "40, 50 10, 10 10))', 10));\n"
#~ "  st_astext\n"
#~ "-------------\n"
#~ " MULTIPOLYGON (((60 60, 70 30, 40 40, 60 60)), ((40 40, 50 10, 10 10, 40 "
#~ "40)))"

#~ msgid "ST_SharedPaths"
#~ msgstr "ST_SharedPaths"

#~ msgid ""
#~ "Returns a collection containing paths shared by the two input linestrings/"
#~ "multilinestrings."
#~ msgstr ""
#~ "二つのLINESTRING/MULTILINESTRINGの入力が共有するパスのコレクションを返しま"
#~ "す。"

#~ msgid ""
#~ "Returns a collection containing paths shared by the two input geometries. "
#~ "Those going in the same direction are in the first element of the "
#~ "collection, those going in the opposite direction are in the second "
#~ "element. The paths themselves are given in the direction of the first "
#~ "geometry."
#~ msgstr ""
#~ "二つの入力ジオメトリが共有するパスのコレクションを返します。順方向に行くも"
#~ "のはコレクションの一つ目の要素にあり、逆方向は二つ目の要素にあります。これ"
#~ "らのパス自体は一つ目のジオメトリの方向をもとにします。"

#~ msgid "Examples: Finding shared paths"
#~ msgstr "例: 共有パスの探索"

#~ msgid ""
#~ "The shared path of multilinestring and linestring overlaid with original "
#~ "geometries."
#~ msgstr ""
#~ "マルチラインストリングとラインストリングとの共有パスと元のジオメトリ。"

#~ msgid ""
#~ "SELECT ST_AsText(\n"
#~ "  ST_SharedPaths(\n"
#~ "    ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 "
#~ "125),\n"
#~ "       (51 150,101 150,76 175,51 150))'),\n"
#~ "    ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161, 76 "
#~ "175)')\n"
#~ "    )\n"
#~ "  ) As wkt\n"
#~ "\n"
#~ "                                wkt\n"
#~ "-------------------------------------------------------------\n"
#~ "GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),\n"
#~ " (101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"
#~ msgstr ""
#~ "SELECT ST_AsText(\n"
#~ "  ST_SharedPaths(\n"
#~ "    ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 "
#~ "125),\n"
#~ "       (51 150,101 150,76 175,51 150))'),\n"
#~ "    ST_GeomFromText('LINESTRING(151 100,126 156.25,126 125,90 161, 76 "
#~ "175)')\n"
#~ "    )\n"
#~ "  ) As wkt\n"
#~ "\n"
#~ "                                wkt\n"
#~ "-------------------------------------------------------------\n"
#~ "GEOMETRYCOLLECTION(MULTILINESTRING((126 156.25,126 125),\n"
#~ " (101 150,90 161),(90 161,76 175)),MULTILINESTRING EMPTY)"

#~ msgid ""
#~ "-- same example but linestring orientation flipped\n"
#~ "SELECT ST_AsText(\n"
#~ "  ST_SharedPaths(\n"
#~ "   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 "
#~ "100)'),\n"
#~ "   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 "
#~ "125),\n"
#~ "       (51 150,101 150,76 175,51 150))')\n"
#~ "    )\n"
#~ "  ) As wkt\n"
#~ "\n"
#~ "                                wkt\n"
#~ "-------------------------------------------------------------\n"
#~ "GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,\n"
#~ "MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"
#~ msgstr ""
#~ "-- 同じ例ですがラインストリングの引数の順序を入れ替えています\n"
#~ "SELECT ST_AsText(\n"
#~ "  ST_SharedPaths(\n"
#~ "   ST_GeomFromText('LINESTRING(76 175,90 161,126 125,126 156.25,151 "
#~ "100)'),\n"
#~ "   ST_GeomFromText('MULTILINESTRING((26 125,26 200,126 200,126 125,26 "
#~ "125),\n"
#~ "       (51 150,101 150,76 175,51 150))')\n"
#~ "    )\n"
#~ "  ) As wkt\n"
#~ "\n"
#~ "                                wkt\n"
#~ "-------------------------------------------------------------\n"
#~ "GEOMETRYCOLLECTION(MULTILINESTRING EMPTY,\n"
#~ "MULTILINESTRING((76 175,90 161),(90 161,101 150),(126 125,126 156.25)))"

#~ msgid ""
#~ ", <xref linkend=\"ST_GeometryN\"/>, <xref linkend=\"ST_NumGeometries\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_GeometryN\"/>, <xref linkend=\"ST_NumGeometries\"/>"

#~ msgid "ST_Simplify"
#~ msgstr "ST_Simplify"

#~ msgid ""
#~ "Returns a simplified version of a geometry, using the Douglas-Peucker "
#~ "algorithm."
#~ msgstr ""
#~ "Douglas-Peukerアルゴリズムを使用して、与えられたジオメトリを簡略化したもの"
#~ "を返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_Simplify</function></funcdef> "
#~ "<paramdef><type>geometry</type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>float</type> <parameter>tolerance</parameter></paramdef> "
#~ "<paramdef><type>boolean</type> <parameter>preserveCollapsed</parameter></"
#~ "paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_Simplify</function></funcdef> "
#~ "<paramdef><type>geometry</type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>float</type> <parameter>tolerance</parameter></paramdef> "
#~ "<paramdef><type>boolean</type> <parameter>preserveCollapsed</parameter></"
#~ "paramdef>"

#~ msgid ""
#~ "Returns a \"simplified\" version of the given geometry using the Douglas-"
#~ "Peucker algorithm. Will actually do something only with (multi)lines and "
#~ "(multi)polygons but you can safely call it with any kind of geometry. "
#~ "Since simplification occurs on a object-by-object basis you can also feed "
#~ "a GeometryCollection to this function."
#~ msgstr ""
#~ "与えられたジオメトリを「簡略化」したものを返します。Douglas-Peukerアルゴリ"
#~ "ズムを使用します。(MULTI)LINEと(MULTI)POLYGONとで実際に動作をしますが、ど"
#~ "のような種類のジオメトリでも安全に呼ぶことができます。簡略化はオブジェクト"
#~ "ごとに行われるので、ジオメトリコレクションでこの関数を呼ぶことができます。"

#~ msgid ""
#~ "The \"preserve collapsed\" flag will retain objects that would otherwise "
#~ "be too small given the tolerance. For example, a 1m long line simplified "
#~ "with a 10m tolerance. If the preserve flag is given, the line will not "
#~ "disappear. This flag is useful for rendering engines, to avoid having "
#~ "large numbers of very small objects disappear from a map leaving "
#~ "surprising gaps."
#~ msgstr ""
#~ "\"preserve collapsed\"フラグによって、許容範囲より非常に小さいオブジェクト"
#~ "が保持されます。例えば、1メートル長のラインを10メートルの許容範囲で簡略化"
#~ "する場合です。\"preserve\"フラグを与えると、ラインは消去されません。このフ"
#~ "ラグは、多数の非常に小さいオブジェクトを持っていて、これらが想定外の隙間を"
#~ "残して地図から消えることを避けるのに使えます。"

#~ msgid ""
#~ "Note that returned geometry might lose its simplicity (see <xref linkend="
#~ "\"ST_IsSimple\"/>)"
#~ msgstr ""
#~ "返されるジオメトリは単純性 (<xref linkend=\"ST_IsSimple\"/>参照)を失うこと"
#~ "があります。"

#~ msgid ""
#~ "Note topology may not be preserved and may result in invalid geometries. "
#~ "Use (see <xref linkend=\"ST_SimplifyPreserveTopology\"/>) to preserve "
#~ "topology."
#~ msgstr ""
#~ "トポロジは保存されているとは限らず、不正なジオメトリを返すことがあります。"
#~ "トポロジを保存するには<xref linkend=\"ST_SimplifyPreserveTopology\"/>を使"
#~ "います。"

#~ msgid "Availability: 1.2.2"
#~ msgstr "Availability: 1.2.2"

#~ msgid "A circle simplified too much becomes a triangle, medium an octagon,"
#~ msgstr "簡略化をやりすぎて三角形になった円、八角形になった円です。"

#~ msgid ""
#~ "SELECT ST_Npoints(geom) AS np_before,\n"
#~ "       ST_NPoints(ST_Simplify(geom,0.1)) AS np01_notbadcircle,\n"
#~ "       ST_NPoints(ST_Simplify(geom,0.5)) AS np05_notquitecircle,\n"
#~ "       ST_NPoints(ST_Simplify(geom,1)) AS np1_octagon,\n"
#~ "       ST_NPoints(ST_Simplify(geom,10)) AS np10_triangle,\n"
#~ "       (ST_Simplify(geom,100) is null) AS  np100_geometrygoesaway\n"
#~ "  FROM\n"
#~ "    (SELECT ST_Buffer('POINT(1 3)', 10,12) As geom) AS foo;\n"
#~ "\n"
#~ " np_before | np01_notbadcircle | np05_notquitecircle | np1_octagon | "
#~ "np10_triangle | np100_geometrygoesaway\n"
#~ "-----------+-------------------+---------------------+-------------"
#~ "+---------------+------------------------\n"
#~ "        49 |                33 |                  17 |           9 "
#~ "|             4 | t"
#~ msgstr ""
#~ "SELECT ST_Npoints(geom) AS np_before,\n"
#~ "       ST_NPoints(ST_Simplify(geom,0.1)) AS np01_notbadcircle,\n"
#~ "       ST_NPoints(ST_Simplify(geom,0.5)) AS np05_notquitecircle,\n"
#~ "       ST_NPoints(ST_Simplify(geom,1)) AS np1_octagon,\n"
#~ "       ST_NPoints(ST_Simplify(geom,10)) AS np10_triangle,\n"
#~ "       (ST_Simplify(geom,100) is null) AS  np100_geometrygoesaway\n"
#~ "  FROM\n"
#~ "    (SELECT ST_Buffer('POINT(1 3)', 10,12) As geom) AS foo;\n"
#~ "\n"
#~ " np_before | np01_notbadcircle | np05_notquitecircle | np1_octagon | "
#~ "np10_triangle | np100_geometrygoesaway\n"
#~ "-----------+-------------------+---------------------+-------------"
#~ "+---------------+------------------------\n"
#~ "        49 |                33 |                  17 |           9 "
#~ "|             4 | t"

#~ msgid ""
#~ ", <xref linkend=\"ST_SimplifyPreserveTopology\"/>, Topology <xref linkend="
#~ "\"TP_ST_Simplify\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_SimplifyPreserveTopology\"/>, Topology <xref linkend="
#~ "\"TP_ST_Simplify\"/>"

#~ msgid "ST_SimplifyPreserveTopology"
#~ msgstr "ST_SimplifyPreserveTopology"

#~ msgid ""
#~ "Returns a simplified and valid version of a geometry, using the Douglas-"
#~ "Peucker algorithm."
#~ msgstr ""
#~ "Douglas-Peukerアルゴリズムを使用して、与えられたジオメトリを簡略化したもの"
#~ "を返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_SimplifyPreserveTopology</function></"
#~ "funcdef> <paramdef><type>geometry</type> <parameter>geomA</parameter></"
#~ "paramdef> <paramdef><type>float</type> <parameter>tolerance</parameter></"
#~ "paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_SimplifyPreserveTopology</function></"
#~ "funcdef> <paramdef><type>geometry</type> <parameter>geomA</parameter></"
#~ "paramdef> <paramdef><type>float</type> <parameter>tolerance</parameter></"
#~ "paramdef>"

#~ msgid ""
#~ "Returns a \"simplified\" version of the given geometry using the Douglas-"
#~ "Peucker algorithm. Will avoid creating derived geometries (polygons in "
#~ "particular) that are invalid. Will actually do something only with "
#~ "(multi)lines and (multi)polygons but you can safely call it with any kind "
#~ "of geometry. Since simplification occurs on a object-by-object basis you "
#~ "can also feed a GeometryCollection to this function."
#~ msgstr ""
#~ "与えられたジオメトリを「簡略化」したものを返します。Douglas-Peukerアルゴリ"
#~ "ズムを使用します。不正な派生ジオメトリ (特にポリゴン)の生成を回避します。"
#~ "(MULTI)LINEと(MULTI)POLYGONとで実際に動作をしますが、どのような種類のジオ"
#~ "メトリでも安全に呼ぶことができます。簡略化はオブジェクトごとに行われるの"
#~ "で、ジオメトリコレクションでこの関数を呼ぶことができます。"

#~ msgid "Availability: 1.3.3"
#~ msgstr "Availability: 1.3.3"

#~ msgid ""
#~ "Same example as Simplify, but we see Preserve Topology prevents "
#~ "oversimplification. The circle can at most become a square."
#~ msgstr ""
#~ "Simplyfyと同じ例ですが、トポロジ保存で簡略化の行きすぎを阻止します。円は最"
#~ "低でも四角形になります。"

#~ msgid ""
#~ "SELECT ST_Npoints(geom) As np_before, "
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,0.1)) As np01_notbadcircle, "
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,0.5)) As "
#~ "np05_notquitecircle,\n"
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,1)) As np1_octagon, "
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,10)) As np10_square,\n"
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,100)) As  np100_stillsquare\n"
#~ "FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) As geom) As foo;\n"
#~ "\n"
#~ "--result--\n"
#~ " np_before | np01_notbadcircle | np05_notquitecircle | np1_octagon | "
#~ "np10_square | np100_stillsquare\n"
#~ "-----------+-------------------+---------------------+-------------"
#~ "+---------------+-------------------\n"
#~ "        49 |                33 |                  17 |           9 "
#~ "|             5 |                 5"
#~ msgstr ""
#~ "SELECT ST_Npoints(geom) As np_before, "
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,0.1)) As np01_notbadcircle, "
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,0.5)) As "
#~ "np05_notquitecircle,\n"
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,1)) As np1_octagon, "
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,10)) As np10_square,\n"
#~ "ST_NPoints(ST_SimplifyPreserveTopology(geom,100)) As  np100_stillsquare\n"
#~ "FROM (SELECT ST_Buffer('POINT(1 3)', 10,12) As geom) As foo;\n"
#~ "\n"
#~ "-- 結果 --\n"
#~ " np_before | np01_notbadcircle | np05_notquitecircle | np1_octagon | "
#~ "np10_square | np100_stillsquare\n"
#~ "-----------+-------------------+---------------------+-------------"
#~ "+---------------+-------------------\n"
#~ "        49 |                33 |                  17 |           9 "
#~ "|             5 |                 5"

#~ msgid "ST_SimplifyVW"
#~ msgstr "ST_SimplifyVW"

#~ msgid ""
#~ "Returns a simplified version of a geometry, using the Visvalingam-Whyatt "
#~ "algorithm"
#~ msgstr ""
#~ "Visvalingam-Whyattアルゴリズムを使用して、入力ジオメトリを簡略化したジオメ"
#~ "トリを返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_SimplifyVW</function></funcdef> "
#~ "<paramdef><type>geometry</type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>float</type> <parameter>tolerance</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_SimplifyVW</function></funcdef> "
#~ "<paramdef><type>geometry</type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>float</type> <parameter>tolerance</parameter></paramdef>"

#~ msgid ""
#~ "Returns a \"simplified\" version of the given geometry using the "
#~ "Visvalingam-Whyatt algorithm. Will actually do something only with "
#~ "(multi)lines and (multi)polygons but you can safely call it with any kind "
#~ "of geometry. Since simplification occurs on a object-by-object basis you "
#~ "can also feed a GeometryCollection to this function."
#~ msgstr ""
#~ "Visvalingam-Whyattアルゴリズムを用いて、入力ジオメトリを「簡略化」したジオ"
#~ "メトリを返します。(マルチ)ラインと(マルチ)ポリゴンでのみ動作しますが、どの"
#~ "種類のジオメトリでも安全に呼ぶことができます。(MULTI)LINEと(MULTI)POLYGON"
#~ "とで実際に動作をしますが、どのような種類のジオメトリでも安全に呼ぶことがで"
#~ "きます。簡略化はオブジェクトごとに行われるので、ジオメトリコレクションでこ"
#~ "の関数を呼ぶことができます。"

#~ msgid ""
#~ "This function handles 3D and the third dimension will affect the result."
#~ msgstr "この関数は3次元を扱います。第3次元は結果に影響を与えます。"

#~ msgid "A LineString is simplified with a minimum area threshold of 30."
#~ msgstr "ラインストリングを最小範囲のしきい値を30で簡略化しています。"

#~ msgid ""
#~ "select ST_AsText(ST_SimplifyVW(geom,30)) simplified\n"
#~ "FROM (SELECT  'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) "
#~ "As foo;\n"
#~ "-result\n"
#~ " simplified\n"
#~ "------------------------------\n"
#~ "LINESTRING(5 2,7 25,10 10)"
#~ msgstr ""
#~ "select ST_AsText(ST_SimplifyVW(geom,30)) simplified\n"
#~ "FROM (SELECT  'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) "
#~ "As foo;\n"
#~ "-result\n"
#~ " simplified\n"
#~ "------------------------------\n"
#~ "LINESTRING(5 2,7 25,10 10)"

#~ msgid ""
#~ ", <xref linkend=\"ST_Simplify\"/>, <xref linkend="
#~ "\"ST_SimplifyPreserveTopology\"/>, Topology <xref linkend=\"TP_ST_Simplify"
#~ "\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_Simplify\"/>, <xref linkend="
#~ "\"ST_SimplifyPreserveTopology\"/>, Topology <xref linkend=\"TP_ST_Simplify"
#~ "\"/>"

#~ msgid "ST_ChaikinSmoothing"
#~ msgstr "ST_ChaikinSmoothing"

#~ msgid ""
#~ "Returns a smoothed version of a geometry, using the Chaikin algorithm"
#~ msgstr ""
#~ " チャイキンのアルゴリズムを使って、与えられたジオメトリの平滑化されたもの"
#~ "を返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_ChaikinSmoothing</function></funcdef> "
#~ "<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef> "
#~ "<paramdef><type>integer</type> <parameter>nIterations = 1</parameter></"
#~ "paramdef> <paramdef><type>boolean</type> <parameter>preserveEndPoints = "
#~ "false</parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_ChaikinSmoothing</function></funcdef> "
#~ "<paramdef><type>geometry</type> <parameter>geom</parameter></paramdef> "
#~ "<paramdef><type>integer</type> <parameter>nIterations = 1</parameter></"
#~ "paramdef> <paramdef><type>boolean</type> <parameter>preserveEndPoints = "
#~ "false</parameter></paramdef>"

#~ msgid ""
#~ "Returns a \"smoothed\" version of the given geometry using the Chaikin "
#~ "algorithm. See <ulink url=\"http://www.idav.ucdavis.edu/education/"
#~ "CAGDNotes/Chaikins-Algorithm/Chaikins-Algorithm.html\">Chaikins-"
#~ "Algorithm</ulink> for an explanation of the process. For each iteration "
#~ "the number of vertex points will double. The function puts new vertex "
#~ "points at 1/4 of the line before and after each point and removes the "
#~ "original point. To reduce the number of points use one of the "
#~ "simplification functions on the result. The new points gets interpolated "
#~ "values for all included dimensions, also z and m."
#~ msgstr ""
#~ "チャイキンのアルゴリズムを使って、与えられたジオメトリの「平滑化された」も"
#~ "のを返します。処理の説明については<ulink url=\"http://www.idav.ucdavis."
#~ "edu/education/CAGDNotes/Chaikins-Algorithm/Chaikins-Algorithm.html"
#~ "\">Chaikins-Algorithm</ulink>をご覧下さい。繰り返しごとに頂点の数は倍にな"
#~ "ります。この関数は新しい頂点を、各ポイントの前後に、ラインの1/4の位置に置"
#~ "き、元のポイントを削除します。ポイント数を減らすには、結果に対して簡略化関"
#~ "数を使います。新しいポイントの、ZとMを含むジオメトリの全ての次元に補間値が"
#~ "付きます。"

#~ msgid "Second argument, number of iterations is limited to max 5 iterations"
#~ msgstr "第2引数は繰り返し回数で最大5回です。"

#~ msgid ""
#~ "Note third argument is only valid for polygons, and will be ignored for "
#~ "linestrings"
#~ msgstr "第3引数はポリゴンにのみ有効です。ラインストリングでは無視されます。"

#~ msgid ""
#~ "Note that returned geometry will get more points than the original. To "
#~ "reduce the number of points again use one of the simplification functions "
#~ "on the result. (see <xref linkend=\"ST_Simplify\"/> and <xref linkend="
#~ "\"ST_SimplifyVW\"/>)"
#~ msgstr ""
#~ "返却ジオメトリが元のジオメトリより多くのポイントを得ることに注意して下さ"
#~ "い。再びポイント数を低減するには、単純化関数を使います (<xref linkend="
#~ "\"ST_Simplify\"/>と<xref linkend=\"ST_SimplifyVW\"/>参照)。"

#~ msgid "A triangle is smoothed"
#~ msgstr "トライアングルの平滑化"

#~ msgid ""
#~ "select ST_AsText(ST_ChaikinSmoothing(geom)) smoothed\n"
#~ "FROM (SELECT  'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) As foo;\n"
#~ "┌───────────────────────────────────────────┐\n"
#~ "│                 smoothed                  │\n"
#~ "├───────────────────────────────────────────┤\n"
#~ "│ POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2)) │\n"
#~ "└───────────────────────────────────────────┘"
#~ msgstr ""
#~ "select ST_AsText(ST_ChaikinSmoothing(geom)) smoothed\n"
#~ "FROM (SELECT  'POLYGON((0 0, 8 8, 0 16, 0 0))'::geometry geom) As foo;\n"
#~ "┌───────────────────────────────────────────┐\n"
#~ "│                 smoothed                  │\n"
#~ "├───────────────────────────────────────────┤\n"
#~ "│ POLYGON((2 2,6 6,6 10,2 14,0 12,0 4,2 2)) │\n"
#~ "└───────────────────────────────────────────┘"

#~ msgid "ST_SetEffectiveArea"
#~ msgstr "ST_SetEffectiveArea"

#~ msgid ""
#~ "Sets the effective area for each vertex, using the Visvalingam-Whyatt "
#~ "algorithm."
#~ msgstr ""
#~ "Visvalingam-Whyattアルゴリズムを使って有効範囲となる個々の頂点を置きます。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_SetEffectiveArea</function></funcdef> "
#~ "<paramdef><type>geometry</type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>float</type> <parameter>threshold = 0</parameter></"
#~ "paramdef> <paramdef><type>integer</type> <parameter>set_area = 1</"
#~ "parameter></paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_SetEffectiveArea</function></funcdef> "
#~ "<paramdef><type>geometry</type> <parameter>geomA</parameter></paramdef> "
#~ "<paramdef><type>float</type> <parameter>threshold = 0</parameter></"
#~ "paramdef> <paramdef><type>integer</type> <parameter>set_area = 1</"
#~ "parameter></paramdef>"

#~ msgid ""
#~ "Sets the effective area for each vertex, using the Visvalingam-Whyatt "
#~ "algorithm. The effective area is stored as the M-value of the vertex. If "
#~ "the optional \"theshold\" parameter is used, a simplified geometry will "
#~ "be returned, containing only vertices with an effective area greater than "
#~ "or equal to the threshold value."
#~ msgstr ""
#~ "Visvalingam-Whyattアルゴリズムから有効範囲となる個々の頂点を置きます。有効"
#~ "範囲はジオメトリのM値として格納されます。任意引数である第2引数を使うと、し"
#~ "きい値以上の有効範囲となる頂点だけで構築されるジオメトリを返します。"

#~ msgid ""
#~ "This function can be used for server-side simplification when a threshold "
#~ "is specified. Another option is to use a threshold value of zero. In this "
#~ "case, the full geometry will be returned with effective areas as M-"
#~ "values, which can be used by the client to simplify very quickly."
#~ msgstr ""
#~ "この関数は、しきい値を使うことでサーバサイド簡略化に使えます。もう一つの任"
#~ "意引数はしきい値を0にする際に使用します。この場合、完全なジオメトリを得ま"
#~ "すが、クライアントが非常に高速に簡略化するために使うM値として格納している"
#~ "有効範囲を持っています。"

#~ msgid ""
#~ "Will actually do something only with (multi)lines and (multi)polygons but "
#~ "you can safely call it with any kind of geometry. Since simplification "
#~ "occurs on a object-by-object basis you can also feed a GeometryCollection "
#~ "to this function."
#~ msgstr ""
#~ "(MULTI)LINEと(MULTI)POLYGONとで実際に動作をしますが、どのような種類のジオ"
#~ "メトリでも安全に呼ぶことができます。簡略化はオブジェクトごとに行われるの"
#~ "で、ジオメトリコレクションでこの関数を呼ぶことができます。"

#~ msgid ""
#~ "The output geometry will lose all previous information in the M-values"
#~ msgstr "出力ジオメトリは、入力時に持っていたM値の情報の全てを失います。"

#~ msgid ""
#~ "This function handles 3D and the third dimension will affect the "
#~ "effective area"
#~ msgstr "この関数は3次元を扱います。第3次元は結果に影響を与えます。"

#~ msgid ""
#~ "Calculating the effective area of a LineString. Because we use a "
#~ "threshold value of zero, all vertices in the input geometry are returned."
#~ msgstr ""
#~ "ラインストリングの有効範囲の計算。しきい値を0にしているので、入力ジオメト"
#~ "リの全ての頂点が返ります。"

#~ msgid ""
#~ "select ST_AsText(ST_SetEffectiveArea(geom)) all_pts, "
#~ "ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30\n"
#~ "FROM (SELECT  'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) "
#~ "As foo;\n"
#~ "-result\n"
#~ " all_pts | thrshld_30\n"
#~ "-----------+-------------------+\n"
#~ "LINESTRING M (5 2 3.40282346638529e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 "
#~ "3.40282346638529e+38) | LINESTRING M (5 2 3.40282346638529e+38,7 25 "
#~ "49.5,10 10 3.40282346638529e+38)"
#~ msgstr ""
#~ "select ST_AsText(ST_SetEffectiveArea(geom)) all_pts, "
#~ "ST_AsText(ST_SetEffectiveArea(geom,30) ) thrshld_30\n"
#~ "FROM (SELECT  'LINESTRING(5 2, 3 8, 6 20, 7 25, 10 10)'::geometry geom) "
#~ "As foo;\n"
#~ "-- 結果 --\n"
#~ " all_pts | thrshld_30\n"
#~ "-----------+-------------------+\n"
#~ "LINESTRING M (5 2 3.40282346638529e+38,3 8 29,6 20 1.5,7 25 49.5,10 10 "
#~ "3.40282346638529e+38) | LINESTRING M (5 2 3.40282346638529e+38,7 25 "
#~ "49.5,10 10 3.40282346638529e+38)"

#~ msgid "ST_VoronoiLines"
#~ msgstr "ST_VoronoiLines"

#~ msgid ""
#~ "Returns the boundaries of the Voronoi diagram of the vertices of a "
#~ "geometry."
#~ msgstr "ジオメトリの頂点からボロノイ図のセルを返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_VoronoiLines</function></funcdef> "
#~ "<paramdef> <parameter>g1</parameter> <type>geometry</type> </paramdef> "
#~ "<paramdef choice=\"opt\"> <parameter>tolerance</parameter> <type>float8</"
#~ "type> </paramdef> <paramdef choice=\"opt\"> <parameter>extend_to</"
#~ "parameter> <type>geometry</type> </paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_VoronoiLines</function></funcdef> "
#~ "<paramdef> <parameter>g1</parameter> <type>geometry</type> </paramdef> "
#~ "<paramdef choice=\"opt\"> <parameter>tolerance</parameter> <type>float8</"
#~ "type> </paramdef> <paramdef choice=\"opt\"> <parameter>extend_to</"
#~ "parameter> <type>geometry</type> </paramdef>"

#~ msgid ""
#~ "ST_VoronoiLines computes a two-dimensional <ulink url=\"https://en."
#~ "wikipedia.org/wiki/Voronoi_diagram\">Voronoi diagram</ulink> from the "
#~ "vertices of the supplied geometry and returns the boundaries between "
#~ "cells in that diagram as a MultiLineString. Returns null if input "
#~ "geometry is null. Returns an empty geometry collection if the input "
#~ "geometry contains only one vertex. Returns an empty geometry collection "
#~ "if the extend_to envelope has zero area."
#~ msgstr ""
#~ "ST_VoronoiLinesは、与えられたジオメトリの頂点から、2次元<ulink url="
#~ "\"https://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%AD%E3%83%8E%E3%82%A4%E5%9B"
#~ "%B3\">ボロノイ図</ulink>を計算します。図の細胞間の境界をMULTILINESTRINGで"
#~ "返します。入力ジオメトリがNULLの場合には、NULLを返します。入力ジオメトリに"
#~ "頂点が一つだけしか無い場合には、空ジオメトリコレクションを返します。"
#~ "extend_toのエンベロープの面積が0の場合には、空ジオメトリコレクションを返し"
#~ "ます。"

#~ msgid "Optional parameters:"
#~ msgstr "任意パラメータ:"

#~ msgid ""
#~ "'tolerance' : The distance within which vertices will be considered "
#~ "equivalent. Robustness of the algorithm can be improved by supplying a "
#~ "nonzero tolerance distance. (default = 0.0)"
#~ msgstr ""
#~ "'tolerance' : この距離以内の点は等価とします。0でない許容距離を指定するこ"
#~ "とで、アルゴリズムのロバスト性が改善します。デフォルトは0.0です。"

#~ msgid ""
#~ "'extend_to' : If a geometry is supplied as the \"extend_to\" parameter, "
#~ "the diagram will be extended to cover the envelope of the \"extend_to\" "
#~ "geometry, unless that envelope is smaller than the default envelope "
#~ "(default = NULL, default envelope is boundingbox of input geometry "
#~ "extended by about 50% in each direction)."
#~ msgstr ""
#~ "'extend_to': ジオメトリが\"extend_to\"パラメータとして渡された場合には、エ"
#~ "ンベロープがデフォルトエンベロープより小さい場合を除いて、ボロノイ図は"
#~ "\"extend_to\"ジオメトリのエンベロープを覆う範囲になります (デフォルトは"
#~ "NULLで、デフォルトのエンベロープは入力ジオメトリのバウンディングボックスか"
#~ "ら各方向に50%ずつ拡張したものです)。"

#~ msgid "Voronoi lines with tolerance of 30 units"
#~ msgstr "許容範囲を30単位としたボロノイ図"

#~ msgid ""
#~ "SELECT ST_VoronoiLines(geom, 30) As geom\n"
#~ "FROM (SELECT 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::"
#~ "geometry As geom ) As g"
#~ msgstr ""
#~ "SELECT ST_VoronoiLines(geom, 30) As geom\n"
#~ "FROM (SELECT 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::"
#~ "geometry As geom ) As g"

#~ msgid ""
#~ "-- ST_AsText output\n"
#~ "MULTILINESTRING((135.555555555556 270,36.8181818181818 92.2727272727273),"
#~ "(36.8181818181818 92.2727272727273,-110 43.3333333333333),(230 "
#~ "-45.7142857142858,36.8181818181818 92.2727272727273))"
#~ msgstr ""
#~ "-- ST_AsText 出力\n"
#~ "MULTILINESTRING((135.555555555556 270,36.8181818181818 92.2727272727273),"
#~ "(36.8181818181818 92.2727272727273,-110 43.3333333333333),(230 "
#~ "-45.7142857142858,36.8181818181818 92.2727272727273))"

#~ msgid ""
#~ ", <xref linkend=\"ST_VoronoiPolygons\"/>, <xref linkend=\"ST_Collect\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_VoronoiPolygons\"/>, <xref linkend=\"ST_Collect\"/>"

#~ msgid "ST_VoronoiPolygons"
#~ msgstr "ST_VoronoiPolygons"

#~ msgid ""
#~ "Returns the cells of the Voronoi diagram of the vertices of a geometry."
#~ msgstr "ジオメトリの頂点からボロノイ図のセルを返します。"

#~ msgid ""
#~ "<funcdef>geometry <function>ST_VoronoiPolygons</function></funcdef> "
#~ "<paramdef> <parameter>g1</parameter> <type>geometry</type> </paramdef> "
#~ "<paramdef choice=\"opt\"> <parameter>tolerance</parameter> <type>float8</"
#~ "type> </paramdef> <paramdef choice=\"opt\"> <parameter>extend_to</"
#~ "parameter> <type>geometry</type> </paramdef>"
#~ msgstr ""
#~ "<funcdef>geometry <function>ST_VoronoiPolygons</function></funcdef> "
#~ "<paramdef> <parameter>g1</parameter> <type>geometry</type> </paramdef> "
#~ "<paramdef choice=\"opt\"> <parameter>tolerance</parameter> <type>float8</"
#~ "type> </paramdef> <paramdef choice=\"opt\"> <parameter>extend_to</"
#~ "parameter> <type>geometry</type> </paramdef>"

#~ msgid ""
#~ "ST_VoronoiPolygons computes a two-dimensional <ulink url=\"https://en."
#~ "wikipedia.org/wiki/Voronoi_diagram\">Voronoi diagram</ulink> from the "
#~ "vertices of the supplied geometry. The result is a GeometryCollection of "
#~ "Polygons that covers an envelope larger than the extent of the input "
#~ "vertices. Returns null if input geometry is null. Returns an empty "
#~ "geometry collection if the input geometry contains only one vertex. "
#~ "Returns an empty geometry collection if the extend_to envelope has zero "
#~ "area."
#~ msgstr ""
#~ "ST_VoronoiPolygonsは、与えられたジオメトリの頂点から、2次元<ulink url="
#~ "\"https://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%AD%E3%83%8E%E3%82%A4%E5%9B"
#~ "%B3\">ボロノイ図</ulink>を計算します。結果は、入力頂点の範囲より大きいエン"
#~ "ベロープを覆うポリゴンのジオメトリコレクションです。入力ジオメトリがNULLの"
#~ "場合には、NULLを返します。入力ジオメトリに頂点が一つだけしか無い場合には、"
#~ "空ジオメトリコレクションを返します。extend_toのエンベロープの面積が0の場合"
#~ "には、空ジオメトリコレクションを返します。"

#~ msgid "Points overlaid on top of Voronoi diagram"
#~ msgstr "Points overlaid on top of Voronoi diagram"

#~ msgid ""
#~ "SELECT\n"
#~ "    ST_VoronoiPolygons(geom) As geom\n"
#~ "FROM (SELECT 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::"
#~ "geometry As geom ) As g;"
#~ msgstr ""
#~ "SELECT\n"
#~ "    ST_VoronoiPolygons(geom) As geom\n"
#~ "FROM (SELECT 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::"
#~ "geometry As geom ) As g;"

#~ msgid ""
#~ "-- ST_AsText output\n"
#~ "GEOMETRYCOLLECTION(POLYGON((-110 43.3333333333333,-110 270,100.5 "
#~ "270,59.3478260869565 132.826086956522,36.8181818181818 "
#~ "92.2727272727273,-110 43.3333333333333)),\n"
#~ "POLYGON((55 -90,-110 -90,-110 43.3333333333333,36.8181818181818 "
#~ "92.2727272727273,55 79.2857142857143,55 -90)),\n"
#~ "POLYGON((230 47.5,230 -20.7142857142857,55 "
#~ "79.2857142857143,36.8181818181818 92.2727272727273,59.3478260869565 "
#~ "132.826086956522,230 47.5)),POLYGON((230 -20.7142857142857,230 -90,55 "
#~ "-90,55 79.2857142857143,230 -20.7142857142857)),\n"
#~ "POLYGON((100.5 270,230 270,230 47.5,59.3478260869565 "
#~ "132.826086956522,100.5 270)))"
#~ msgstr ""
#~ "-- ST_AsText 出力 --\n"
#~ "GEOMETRYCOLLECTION(POLYGON((-110 43.3333333333333,-110 270,100.5 "
#~ "270,59.3478260869565 132.826086956522,36.8181818181818 "
#~ "92.2727272727273,-110 43.3333333333333)),\n"
#~ "POLYGON((55 -90,-110 -90,-110 43.3333333333333,36.8181818181818 "
#~ "92.2727272727273,55 79.2857142857143,55 -90)),\n"
#~ "POLYGON((230 47.5,230 -20.7142857142857,55 "
#~ "79.2857142857143,36.8181818181818 92.2727272727273,59.3478260869565 "
#~ "132.826086956522,230 47.5)),POLYGON((230 -20.7142857142857,230 -90,55 "
#~ "-90,55 79.2857142857143,230 -20.7142857142857)),\n"
#~ "POLYGON((100.5 270,230 270,230 47.5,59.3478260869565 "
#~ "132.826086956522,100.5 270)))"

#~ msgid "Voronoi with tolerance of 30 units"
#~ msgstr "許容範囲を30単位としたボロノイ図"

#~ msgid ""
#~ "SELECT ST_VoronoiPolygons(geom, 30) As geom\n"
#~ "FROM (SELECT 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::"
#~ "geometry As geom ) As g;"
#~ msgstr ""
#~ "SELECT ST_VoronoiPolygons(geom, 30) As geom\n"
#~ "FROM (SELECT 'MULTIPOINT (50 30, 60 30, 100 100,10 150, 110 120)'::"
#~ "geometry As geom ) As g;"

#~ msgid ""
#~ "-- ST_AsText output\n"
#~ "GEOMETRYCOLLECTION(POLYGON((-110 43.3333333333333,-110 270,100.5 "
#~ "270,59.3478260869565 132.826086956522,36.8181818181818 "
#~ "92.2727272727273,-110 43.3333333333333)),\n"
#~ "POLYGON((230 47.5,230 -45.7142857142858,36.8181818181818 "
#~ "92.2727272727273,59.3478260869565 132.826086956522,230 47.5)),"
#~ "POLYGON((230 -45.7142857142858,230 -90,-110 -90,-110 "
#~ "43.3333333333333,36.8181818181818 92.2727272727273,230 "
#~ "-45.7142857142858)),\n"
#~ "POLYGON((100.5 270,230 270,230 47.5,59.3478260869565 "
#~ "132.826086956522,100.5 270)))"
#~ msgstr ""
#~ "-- ST_AsText 出力\n"
#~ "GEOMETRYCOLLECTION(POLYGON((-110 43.3333333333333,-110 270,100.5 "
#~ "270,59.3478260869565 132.826086956522,36.8181818181818 "
#~ "92.2727272727273,-110 43.3333333333333)),\n"
#~ "POLYGON((230 47.5,230 -45.7142857142858,36.8181818181818 "
#~ "92.2727272727273,59.3478260869565 132.826086956522,230 47.5)),"
#~ "POLYGON((230 -45.7142857142858,230 -90,-110 -90,-110 "
#~ "43.3333333333333,36.8181818181818 92.2727272727273,230 "
#~ "-45.7142857142858)),\n"
#~ "POLYGON((100.5 270,230 270,230 47.5,59.3478260869565 "
#~ "132.826086956522,100.5 270)))"

#~ msgid "Voronoi with tolerance of 30 units as MultiLineString"
#~ msgstr "許容範囲を30単位とした、マルチラインストリングのボロノイ図"

#~ msgid ""
#~ ", <xref linkend=\"ST_VoronoiLines\"/>, <xref linkend=\"ST_Collect\"/>"
#~ msgstr ""
#~ ", <xref linkend=\"ST_VoronoiLines\"/>, <xref linkend=\"ST_Collect\"/>"
