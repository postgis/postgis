<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="Coverage">
  <sect1info>
    <abstract>
      <para>These functions operate on collections of polygonal geometry that form "implicit coverages" in which any edges shared by the polygons match exactly. These implicit coverages are fast to compute, and can be operated on with window functions, which retain the implicit topology inside the window partition while altering the edges.</para>
    </abstract>
  </sect1info>

  <title>Coverages</title>

  <refentry id="ST_CoverageIsValid">
    <refnamediv>
      <refname>ST_CoverageIsValid</refname>

      <refpurpose>Window function that evaluates a set of polygons in the window partition to determine if they form a valid polygonal coverage.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>geometry <function>ST_CoverageIsValid</function></funcdef>
          <paramdef><type>geometry winset </type>
            <parameter>geom</parameter></paramdef>
          <paramdef><type>float8 </type>
            <parameter>tolerance</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>Collects all the polygons in the window partition and then checks whether they form a "clean coverage", in which no polygons have any overlap, all vertices on shared edges are identical, and no gaps between polygons exist smaller than the tolerance value.</para>
      <para>If polygons are found that are not clean relative to their neighbors, the problematic edges will be returned as MULTILINESTRING. For clean polygons the return value will be a NULL. Any non-polygonal or empty geometries on the input will be generate NULL returns.</para>
      <para>Availability: 3.4.0 - requires GEOS &gt;= 3.12.0</para>
    </refsection>

    <refsection>
      <title>Examples</title>

      <programlisting>CREATE TABLE coverage (id integer, geom geometry);

INSERT INTO coverage VALUES
  (1, 'POLYGON((0 0, 10 0, 10.1 5, 10 10, 0 10, 0 0))'),
  (2, 'POLYGON((10 0, 20 0, 20 10, 10 10, 10.05 5, 10 0))'),
  (3, 'POLYGON((20 0, 30 0, 30 10, 20 10, 20 0))');

SELECT id, ST_AsText(ST_CoverageIsValid(geom) OVER ())
  FROM coverage;

 id |           st_astext
----+--------------------------------
  1 | LINESTRING(10 0,10.1 5,10 10)
  2 | LINESTRING(10 10,10.05 5,10 0)
  3 |
      </programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
        <xref linkend="ST_CoverageUnion" />,
        <xref linkend="ST_CoverageSimplify" />
      </para>
    </refsection>

  </refentry>


  <refentry id="ST_CoverageSimplify">
    <refnamediv>
      <refname>ST_CoverageSimplify</refname>

      <refpurpose>Window function that simplifies the edges of an implicit coverage formed by a set of polygons, applying the Visvalingam–Whyatt algorithm to the edges.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>geometry <function>ST_CoverageSimplify</function></funcdef>
          <paramdef><type>geometry winset </type>
            <parameter>geom</parameter></paramdef>
          <paramdef><type>float8 </type>
            <parameter>tolerance</parameter></paramdef>
          <paramdef choice="opt"><type>integer </type>
            <parameter>simplifyBoundary=0</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>Collects all the polygons in the window partition, and forms a polgyonal coverage by looking for shared edges between the polygons. Once coverage is formed, the shared edges are simplified using the <ulink url="https://en.wikipedia.org/wiki/Visvalingam%E2%80%93Whyatt_algorithm">Visvalingam–Whyatt algorithm</ulink>. For clean polygonal coverage inputs, this will result in a simplification that is consistent between polygons, and retains the coverage property for the outputs.</para>
      <para>For invalid coverage inputs, non-shared edges are ignored, and only shared edges are simplified.</para>
      <para>To only simplify the "internal" edges of the set of polygons (those that are shared by two polytons) set the "simplifyBoundary" parameter to 1.</para>
      <para>Availability: 3.4.0 - requires GEOS &gt;= 3.12.0</para>

    </refsection>

    <refsection>
      <title>Examples</title>

      <programlisting>CREATE TABLE coverage (id integer, geom geometry);

INSERT INTO coverage VALUES
  (1, 'POLYGON((0 0, 10 0, 10.1 5, 10 10, 0 10, 0 0))'),
  (2, 'POLYGON((10 0, 20 0, 20 10, 10 10, 10.1 5, 10 0))'),
  (3, 'POLYGON((20 0, 30 0, 30 10, 20 10, 20 0))');

SELECT id, ST_AsText(ST_CoverageSimplify(geom, 1.0) OVER ())
  FROM coverage;

 id |               st_astext
----+---------------------------------------
  1 | POLYGON((10 0,10 10,0 10,0 0,10 0))
  2 | POLYGON((10 0,20 0,20 10,10 10,10 0))
  3 | POLYGON((20 0,30 0,30 10,20 10,20 0))
      </programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
        <xref linkend="ST_CoverageUnion" />,
        <xref linkend="ST_CoverageIsValid" />
      </para>
    </refsection>

  </refentry>

  <refentry id="ST_CoverageUnion">
    <refnamediv>
      <refname>ST_CoverageUnion</refname>

      <refpurpose>Simplifies the edges of an implicit coverage formed by a set of polygons, applying the Visvalingam–Whyatt algorithm to the edges.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>geometry <function>ST_CoverageUnion</function></funcdef>
          <paramdef><type>geometry set</type>
            <parameter>geom</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>When the input are a polygonal coverage, the function will provide a high speed merge of adjacent polygons in the aggregation set. This function only works with inputs that are coverages: no overlaps, all shared edges identical down to the vertex level. See <xref linkend="ST_CoverageIsValid" /> for a way to test that a set of polygons are a valid polygonal coverage.</para>

      <para>Availability: 3.4.0 - requires GEOS &gt;= 3.12.0</para>
    </refsection>

    <refsection>
      <title>Examples</title>

      <programlisting>CREATE TABLE coverage (id integer, geom geometry);

INSERT INTO coverage VALUES
  (1, 'POLYGON((0 0, 10 0, 10.1 5, 10 10, 0 10, 0 0))'),
  (2, 'POLYGON((10 0, 20 0, 20 10, 10 10, 10.1 5, 10 0))'),
  (3, 'POLYGON((20 0, 30 0, 30 10, 20 10, 20 0))');

SELECT ST_AsText(ST_CoverageUnion(geom))
  FROM coverage;

                        st_astext
----------------------------------------------------------
 POLYGON((0 0,0 10,10 10,20 10,30 10,30 0,20 0,10 0,0 0))
      </programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
        <xref linkend="ST_CoverageSimplify" />,
        <xref linkend="ST_CoverageIsValid" />
      </para>
    </refsection>

  </refentry>
</sect1>
