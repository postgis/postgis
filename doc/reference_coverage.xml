<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="Coverage">
  <sect1info>
    <abstract>
      <para>These functions operate on collections of polygonal geometry that form "implicit coverages" in which any edges shared by the polygons match exactly. These implicit coverages are fast to process, and can be operated on with window functions, which retain the implicit topology inside the window partition while altering the edges.</para>
    </abstract>
  </sect1info>

  <title>Coverages</title>

  <refentry id="ST_CoverageInvalidLocations">
    <refnamediv>
      <refname>ST_CoverageInvalidLocations</refname>

      <refpurpose>Window function that evaluates a set of polygons in the window partition to determine if they form a valid polygonal coverage.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>geometry <function>ST_CoverageInvalidLocations</function></funcdef>
          <paramdef><type>geometry winset </type>
            <parameter>geom</parameter></paramdef>
          <paramdef><type>float8 </type>
            <parameter>tolerance</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>Collects all the polygons in the window partition and then checks whether they form a "clean coverage", in which no polygons have any overlap, all vertices on shared edges are identical, and no gaps between polygons exist smaller than the tolerance value.</para>
      <para>where polygons do not form a valid coverage, the problematic edges will be returned as MULTILINESTRING. For clean polygons the return value will be a NULL. Any non-polygonal or empty geometries on the input will be generate NULL returns.</para>
      <para>Availability: 3.4.0 - requires GEOS &gt;= 3.12.0</para>
    </refsection>

    <refsection>
      <title>Examples</title>

      <programlisting>CREATE TABLE coverage (id integer, geom geometry);

INSERT INTO coverage VALUES
  (1, 'POLYGON((0 0, 10 0, 10.1 5, 10 10, 0 10, 0 0))'),
  (2, 'POLYGON((10 0, 20 0, 20 10, 10 10, 10.05 5, 10 0))'),
  (3, 'POLYGON((20 0, 30 0, 30 10, 20 10, 20 0))');

SELECT id, ST_AsText(ST_CoverageInvalidLocations(geom) OVER ())
  FROM coverage;

 id |           st_astext
----+--------------------------------
  1 | LINESTRING(10 0,10.1 5,10 10)
  2 | LINESTRING(10 10,10.05 5,10 0)
  3 |
      </programlisting>

      <programlisting>-- Test entire table for validity
SELECT true = ALL (
    SELECT ST_CoverageInvalidLocations(geom) OVER () IS NULL
    FROM coverage
    );
      </programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
        <xref linkend="ST_CoverageUnion" />,
        <xref linkend="ST_CoverageSimplify" />
      </para>
    </refsection>

  </refentry>


  <refentry id="ST_CoverageSimplify">
    <refnamediv>
      <refname>ST_CoverageSimplify</refname>

      <refpurpose>Window function that simplifies the edges of an implicit coverage formed by a set of polygons, applying the Visvalingam–Whyatt algorithm to the edges.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>geometry <function>ST_CoverageSimplify</function></funcdef>
          <paramdef><type>geometry winset </type>
            <parameter>geom</parameter></paramdef>
          <paramdef><type>float8 </type>
            <parameter>tolerance</parameter></paramdef>
          <paramdef choice="opt"><type>boolean </type>
            <parameter>simplifyBoundary=true</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>Simplifies shared edges of a polygonal coverage using the <ulink url="https://en.wikipedia.org/wiki/Visvalingam%E2%80%93Whyatt_algorithm">Visvalingam–Whyatt algorithm</ulink>. For clean polygonal coverage inputs, this will result in a simplification that is consistent between polygons, and retains the coverage property for the outputs.</para>
      <para>For invalid coverage inputs, non-shared edges are ignored, and only shared edges are simplified.</para>
      <para>To only simplify the "internal" edges of the set of polygons (those that are shared by two polygons) set the "simplifyBoundary" parameter to false.</para>
      <note><para>You must ensure that your coverage is valid before running simplification or you may get unexpected results in the output, such as boundary intersections or non-shared boundaries where you thought there were shared boundaries.</para></note>
      <para>Availability: 3.4.0 - requires GEOS &gt;= 3.12.0</para>

    </refsection>

    <refsection>
      <title>Examples</title>

      <programlisting>CREATE TABLE coverage (id integer, geom geometry);

INSERT INTO coverage VALUES
  (1, 'POLYGON((0 0, 10 0, 10.1 5, 10 10, 0 10, 0 0))'),
  (2, 'POLYGON((10 0, 20 0, 20 10, 10 10, 10.1 5, 10 0))'),
  (3, 'POLYGON((20 0, 30 0, 30 10, 20 10, 20 0))');

SELECT id, ST_AsText(ST_CoverageSimplify(geom, 1.0) OVER ())
  FROM coverage;

 id |               st_astext
----+---------------------------------------
  1 | POLYGON((10 0,10 10,0 10,0 0,10 0))
  2 | POLYGON((10 0,20 0,20 10,10 10,10 0))
  3 | POLYGON((20 0,30 0,30 10,20 10,20 0))
      </programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
        <xref linkend="ST_CoverageUnion" />,
        <xref linkend="ST_CoverageInvalidLocations" />
      </para>
    </refsection>

  </refentry>

  <refentry id="ST_CoverageUnion">
    <refnamediv>
      <refname>ST_CoverageUnion</refname>

      <refpurpose>Removes adjacent edges in a polygonal coverage, thereby unioning neighboring polygons.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>geometry <function>ST_CoverageUnion</function></funcdef>
          <paramdef><type>geometry set</type>
            <parameter>geom</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>When the inputs are a polygonal coverage, the function will provide a high speed union of adjacent polygons in the aggregation set. This function only works with inputs that are coverages: no overlaps, all shared edges identical down to the vertex level. See <xref linkend="ST_CoverageInvalidLocations" /> for a way to test that a set of polygons are a valid polygonal coverage.</para>

      <note><para>You must ensure that your coverage is valid before running simplification or you may get unexpected results in the output, such as unmerged inputs returning as multipolygons.</para></note>

      <para>Availability: 3.4.0 - requires GEOS &gt;= 3.8.0</para>
    </refsection>

    <refsection>
      <title>Examples</title>

      <programlisting>CREATE TABLE coverage (id integer, geom geometry);

INSERT INTO coverage VALUES
  (1, 'POLYGON((0 0, 10 0, 10.1 5, 10 10, 0 10, 0 0))'),
  (2, 'POLYGON((10 0, 20 0, 20 10, 10 10, 10.1 5, 10 0))'),
  (3, 'POLYGON((20 0, 30 0, 30 10, 20 10, 20 0))');

SELECT ST_AsText(ST_CoverageUnion(geom))
  FROM coverage;

                        st_astext
----------------------------------------------------------
 POLYGON((0 0,0 10,10 10,20 10,30 10,30 0,20 0,10 0,0 0))
      </programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
        <xref linkend="ST_CoverageSimplify" />,
        <xref linkend="ST_CoverageInvalidLocations" />
      </para>
    </refsection>

  </refentry>
</sect1>
