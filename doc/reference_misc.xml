<?xml version="1.0" encoding="UTF-8"?>
  <sect1 id="Miscellaneous_Functions">
	<title>Miscellaneous Functions</title>

	<refentry id="ST_Accum">
	  <refnamediv>
		<refname>ST_Accum</refname>

		<refpurpose>Aggregate. Constructs an array of geometries.</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>geometry[] <function>ST_Accum</function></funcdef>
			<paramdef><type>geometry set</type> <parameter>geomfield</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Aggregate. Constructs an array of geometries.</para>
		<para>Enhanced: 2.0.0 support for Polyhedral surfaces, Triangles and TIN was introduced.</para>
		<para>&Z_support;</para>
		<para>&curve_support;</para>
		<para>&P_support;</para>
		<para>&T_support;</para>
	  </refsection>


	  <refsection>
		<title>Examples</title>

		<programlisting>SELECT (ST_Accum(the_geom)) As all_em, ST_AsText((ST_Accum(the_geom))[1]) As grabone,
(ST_Accum(the_geom))[2:4] as grab_rest
			FROM (SELECT ST_MakePoint(a*CAST(random()*10 As integer), a*CAST(random()*10 As integer), a*CAST(random()*10 As integer)) As the_geom
				FROM generate_series(1,4) a) As foo;

all_em|grabone   | grab_rest

-------------------------------------------------------------------------------+

 {0101000080000000000000144000000000000024400000000000001040:
 0101000080000000000
00018400000000000002C400000000000003040:
0101000080000000000000354000000000000038400000000000001840:
010100008000000000000040400000000000003C400000000000003040} |
 POINT(5 10) | {010100008000000000000018400000000000002C400000000000003040:
 0101000080000000000000354000000000000038400000000000001840:
 010100008000000000000040400000000000003C400000000000003040}
(1 row)
		</programlisting>
	  </refsection>

	  <!-- Optionally add a "See Also" section -->
	  <refsection>
		<title>See Also</title>

		<para><xref linkend="ST_Collect" /></para>
	  </refsection>
	</refentry>

	<refentry id="Find_SRID">
	  <refnamediv>
		<refname>Find_SRID</refname>

		<refpurpose>The syntax is find_srid(a_db_schema, a_table,
			a_column) and the function returns the integer SRID of the
			specified column by searching through the GEOMETRY_COLUMNS table.</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>integer <function>Find_SRID</function></funcdef>
			<paramdef><type>varchar </type> <parameter>a_schema_name</parameter></paramdef>
			<paramdef><type>varchar </type> <parameter>a_table_name</parameter></paramdef>
			 <paramdef><type>varchar </type> <parameter>a_geomfield_name</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>The syntax is find_srid(&lt;db/schema&gt;, &lt;table&gt;,
			&lt;column&gt;) and the function returns the integer SRID of the
			specified column by searching through the GEOMETRY_COLUMNS table.
			If the geometry column has not been properly added with the
			AddGeometryColumns() function, this function will not work
			either.</para>
	  </refsection>


	  <refsection>
		<title>Examples</title>

		<programlisting> SELECT Find_SRID('public', 'tiger_us_state_2007', 'the_geom_4269');
find_srid
----------
4269
</programlisting>
	  </refsection>

	  <!-- Optionally add a "See Also" section -->
	  <refsection>
		<title>See Also</title>

		<para><xref linkend="ST_SRID" /></para>
	  </refsection>
	</refentry>

	<refentry id="ST_MemSize">
	  <refnamediv>
		<refname>ST_MemSize</refname>

		<refpurpose>Returns the amount of space (in bytes) the geometry takes.</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>integer <function>ST_MemSize</function></funcdef>
			<paramdef><type>geometry </type> <parameter>geomA</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>Returns the amount of space (in bytes) the geometry takes. </para>
		<para>This is a nice compliment to PostgreSQL built in functions pg_column_size, pg_size_pretty, pg_relation_size, pg_total_relation_size.</para>
		<note><para>pg_relation_size which gives the byte size of a table may return byte size lower than ST_MemSize. This is because
		pg_relation_size does not add toasted table contribution and large geometries are stored in TOAST tables.</para>
		<para>pg_total_relation_size - includes, the table, the toasted tables, and the indexes.</para>
		<para>pg_column_size returns how much space a geometry would take in a column considering compression, so may be lower than ST_MemSize</para>
		</note>

		<para>&Z_support;</para>
		<para>&curve_support;</para>
		<para>&P_support;</para>
		<para>&T_support;</para>
		<para>Changed: 2.2.0 name changed to ST_MemSize to follow naming convention.  In prior versions this function was called ST_Mem_Size, old name deprecated though still available.</para>
	  </refsection>


	  <refsection>
		<title>Examples</title>

		<programlisting>
--Return how much byte space Boston takes up  in our Mass data set
SELECT pg_size_pretty(SUM(ST_MemSize(the_geom))) as totgeomsum,
pg_size_pretty(SUM(CASE WHEN town = 'BOSTON' THEN ST_MemSize(the_geom) ELSE 0 END)) As bossum,
CAST(SUM(CASE WHEN town = 'BOSTON' THEN ST_MemSize(the_geom) ELSE 0 END)*1.00 /
		SUM(ST_MemSize(the_geom))*100 As numeric(10,2)) As perbos
FROM towns;

totgeomsum	bossum	perbos
----------	------	------
1522 kB		30 kB	1.99


SELECT ST_MemSize(ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)'));

---
73

--What percentage of our table is taken up by just the geometry
SELECT pg_total_relation_size('public.neighborhoods') As fulltable_size, sum(ST_MemSize(the_geom)) As geomsize,
sum(ST_MemSize(the_geom))*1.00/pg_total_relation_size('public.neighborhoods')*100 As pergeom
FROM neighborhoods;
fulltable_size geomsize  pergeom
------------------------------------------------
262144         96238	 36.71188354492187500000
	</programlisting>
	  </refsection>

	  <!-- Optionally add a "See Also" section -->
	  <refsection>
		<title>See Also</title>

		<para></para>
	  </refsection>
	</refentry>

	<refentry id="ST_Point_Inside_Circle">
	  <refnamediv>
		<refname>ST_PointInsideCircle</refname>

		<refpurpose>Is the point geometry inside the circle defined by center_x, center_y, radius</refpurpose>
	  </refnamediv>

	  <refsynopsisdiv>
		<funcsynopsis>
		  <funcprototype>
			<funcdef>boolean <function>ST_PointInsideCircle</function></funcdef>
			<paramdef><type>geometry </type> <parameter>a_point</parameter></paramdef>
			<paramdef><type>float </type> <parameter>center_x</parameter></paramdef>
			<paramdef><type>float </type> <parameter>center_y</parameter></paramdef>
			<paramdef><type>float </type> <parameter>radius</parameter></paramdef>
		  </funcprototype>
		</funcsynopsis>
	  </refsynopsisdiv>

	  <refsection>
		<title>Description</title>

		<para>The syntax for this functions is
			ST_PointInsideCircle(&lt;geometry&gt;,&lt;circle_center_x&gt;,&lt;circle_center_y&gt;,&lt;radius&gt;).
			Returns the true if the geometry is a point and is inside the
			circle. Returns false otherwise.</para>
		<note><para>This only works for points as the name suggests</para></note>

		<para>Availability: 1.2</para>
		<para>Changed: 2.2.0 In prior versions this used to be called ST_Point_Inside_Circle</para>
	  </refsection>


	  <refsection>
		<title>Examples</title>

		<programlisting>SELECT ST_PointInsideCircle(ST_Point(1,2), 0.5, 2, 3);
 st_pointinsidecircle
------------------------
 t
</programlisting>
	  </refsection>

	  <!-- Optionally add a "See Also" section -->
	  <refsection>
		<title>See Also</title>

		<para><xref linkend="ST_DWithin" /></para>
	  </refsection>
	</refentry>


 </sect1>
