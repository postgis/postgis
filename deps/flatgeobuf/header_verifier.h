#ifndef HEADER_VERIFIER_H
#define HEADER_VERIFIER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef HEADER_READER_H
#include "header_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int FlatGeobuf_Column_verify_table(flatcc_table_verifier_descriptor_t *td);
static int FlatGeobuf_Crs_verify_table(flatcc_table_verifier_descriptor_t *td);
static int FlatGeobuf_Header_verify_table(flatcc_table_verifier_descriptor_t *td);

static int FlatGeobuf_Column_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 1) /* name */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* type */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* title */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* description */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* width */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* precision */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 4, 4) /* scale */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 1, 1) /* nullable */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 1, 1) /* unique */)) return ret;
    if ((ret = flatcc_verify_field(td, 9, 1, 1) /* primary_key */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 10, 0) /* metadata */)) return ret;
    return flatcc_verify_ok;
}

static inline int FlatGeobuf_Column_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, FlatGeobuf_Column_identifier, &FlatGeobuf_Column_verify_table);
}

static inline int FlatGeobuf_Column_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, FlatGeobuf_Column_type_identifier, &FlatGeobuf_Column_verify_table);
}

static inline int FlatGeobuf_Column_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &FlatGeobuf_Column_verify_table);
}

static inline int FlatGeobuf_Column_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &FlatGeobuf_Column_verify_table);
}

static int FlatGeobuf_Crs_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* org */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* code */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* description */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* wkt */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 5, 0) /* code_string */)) return ret;
    return flatcc_verify_ok;
}

static inline int FlatGeobuf_Crs_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, FlatGeobuf_Crs_identifier, &FlatGeobuf_Crs_verify_table);
}

static inline int FlatGeobuf_Crs_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, FlatGeobuf_Crs_type_identifier, &FlatGeobuf_Crs_verify_table);
}

static inline int FlatGeobuf_Crs_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &FlatGeobuf_Crs_verify_table);
}

static inline int FlatGeobuf_Crs_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &FlatGeobuf_Crs_verify_table);
}

static int FlatGeobuf_Header_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 8, 8, INT64_C(536870911)) /* envelope */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* geometry_type */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* has_z */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 1, 1) /* has_m */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 1, 1) /* has_t */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 1, 1) /* has_tm */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 7, 0, &FlatGeobuf_Column_verify_table) /* columns */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 8, 8) /* features_count */)) return ret;
    if ((ret = flatcc_verify_field(td, 9, 2, 2) /* index_node_size */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 10, 0, &FlatGeobuf_Crs_verify_table) /* crs */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 11, 0) /* title */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 12, 0) /* description */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 13, 0) /* metadata */)) return ret;
    return flatcc_verify_ok;
}

static inline int FlatGeobuf_Header_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, FlatGeobuf_Header_identifier, &FlatGeobuf_Header_verify_table);
}

static inline int FlatGeobuf_Header_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, FlatGeobuf_Header_type_identifier, &FlatGeobuf_Header_verify_table);
}

static inline int FlatGeobuf_Header_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &FlatGeobuf_Header_verify_table);
}

static inline int FlatGeobuf_Header_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &FlatGeobuf_Header_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* HEADER_VERIFIER_H */
