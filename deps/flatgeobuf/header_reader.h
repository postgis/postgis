#ifndef HEADER_READER_H
#define HEADER_READER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct Column_table *Column_table_t;
typedef struct Column_table *Column_mutable_table_t;
typedef const flatbuffers_uoffset_t *Column_vec_t;
typedef flatbuffers_uoffset_t *Column_mutable_vec_t;
typedef const struct Crs_table *Crs_table_t;
typedef struct Crs_table *Crs_mutable_table_t;
typedef const flatbuffers_uoffset_t *Crs_vec_t;
typedef flatbuffers_uoffset_t *Crs_mutable_vec_t;
typedef const struct Header_table *Header_table_t;
typedef struct Header_table *Header_mutable_table_t;
typedef const flatbuffers_uoffset_t *Header_vec_t;
typedef flatbuffers_uoffset_t *Header_mutable_vec_t;
#ifndef Column_file_identifier
#define Column_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Column_file_identifier */
#ifndef Column_identifier
#define Column_identifier flatbuffers_identifier
#endif
#define Column_type_hash ((flatbuffers_thash_t)0x22c12a47)
#define Column_type_identifier "\x47\x2a\xc1\x22"
#ifndef Crs_file_identifier
#define Crs_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Crs_file_identifier */
#ifndef Crs_identifier
#define Crs_identifier flatbuffers_identifier
#endif
#define Crs_type_hash ((flatbuffers_thash_t)0x55d10a89)
#define Crs_type_identifier "\x89\x0a\xd1\x55"
#ifndef Header_file_identifier
#define Header_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Header_file_identifier */
#ifndef Header_identifier
#define Header_identifier flatbuffers_identifier
#endif
#define Header_type_hash ((flatbuffers_thash_t)0x114f9980)
#define Header_type_identifier "\x80\x99\x4f\x11"

typedef uint8_t GeometryType_enum_t;
__flatbuffers_define_integer_type(GeometryType, GeometryType_enum_t, 8)
#define GeometryType_Unknown ((GeometryType_enum_t)UINT8_C(0))
#define GeometryType_Point ((GeometryType_enum_t)UINT8_C(1))
#define GeometryType_LineString ((GeometryType_enum_t)UINT8_C(2))
#define GeometryType_Polygon ((GeometryType_enum_t)UINT8_C(3))
#define GeometryType_MultiPoint ((GeometryType_enum_t)UINT8_C(4))
#define GeometryType_MultiLineString ((GeometryType_enum_t)UINT8_C(5))
#define GeometryType_MultiPolygon ((GeometryType_enum_t)UINT8_C(6))
#define GeometryType_GeometryCollection ((GeometryType_enum_t)UINT8_C(7))
#define GeometryType_CircularString ((GeometryType_enum_t)UINT8_C(8))
#define GeometryType_CompoundCurve ((GeometryType_enum_t)UINT8_C(9))
#define GeometryType_CurvePolygon ((GeometryType_enum_t)UINT8_C(10))
#define GeometryType_MultiCurve ((GeometryType_enum_t)UINT8_C(11))
#define GeometryType_MultiSurface ((GeometryType_enum_t)UINT8_C(12))
#define GeometryType_Curve ((GeometryType_enum_t)UINT8_C(13))
#define GeometryType_Surface ((GeometryType_enum_t)UINT8_C(14))
#define GeometryType_PolyhedralSurface ((GeometryType_enum_t)UINT8_C(15))
#define GeometryType_TIN ((GeometryType_enum_t)UINT8_C(16))
#define GeometryType_Triangle ((GeometryType_enum_t)UINT8_C(17))

static inline const char *GeometryType_name(GeometryType_enum_t value)
{
    switch (value) {
    case GeometryType_Unknown: return "Unknown";
    case GeometryType_Point: return "Point";
    case GeometryType_LineString: return "LineString";
    case GeometryType_Polygon: return "Polygon";
    case GeometryType_MultiPoint: return "MultiPoint";
    case GeometryType_MultiLineString: return "MultiLineString";
    case GeometryType_MultiPolygon: return "MultiPolygon";
    case GeometryType_GeometryCollection: return "GeometryCollection";
    case GeometryType_CircularString: return "CircularString";
    case GeometryType_CompoundCurve: return "CompoundCurve";
    case GeometryType_CurvePolygon: return "CurvePolygon";
    case GeometryType_MultiCurve: return "MultiCurve";
    case GeometryType_MultiSurface: return "MultiSurface";
    case GeometryType_Curve: return "Curve";
    case GeometryType_Surface: return "Surface";
    case GeometryType_PolyhedralSurface: return "PolyhedralSurface";
    case GeometryType_TIN: return "TIN";
    case GeometryType_Triangle: return "Triangle";
    default: return "";
    }
}

static inline int GeometryType_is_known_value(GeometryType_enum_t value)
{
    switch (value) {
    case GeometryType_Unknown: return 1;
    case GeometryType_Point: return 1;
    case GeometryType_LineString: return 1;
    case GeometryType_Polygon: return 1;
    case GeometryType_MultiPoint: return 1;
    case GeometryType_MultiLineString: return 1;
    case GeometryType_MultiPolygon: return 1;
    case GeometryType_GeometryCollection: return 1;
    case GeometryType_CircularString: return 1;
    case GeometryType_CompoundCurve: return 1;
    case GeometryType_CurvePolygon: return 1;
    case GeometryType_MultiCurve: return 1;
    case GeometryType_MultiSurface: return 1;
    case GeometryType_Curve: return 1;
    case GeometryType_Surface: return 1;
    case GeometryType_PolyhedralSurface: return 1;
    case GeometryType_TIN: return 1;
    case GeometryType_Triangle: return 1;
    default: return 0;
    }
}

typedef uint8_t ColumnType_enum_t;
__flatbuffers_define_integer_type(ColumnType, ColumnType_enum_t, 8)
#define ColumnType_Byte ((ColumnType_enum_t)UINT8_C(0))
#define ColumnType_UByte ((ColumnType_enum_t)UINT8_C(1))
#define ColumnType_Bool ((ColumnType_enum_t)UINT8_C(2))
#define ColumnType_Short ((ColumnType_enum_t)UINT8_C(3))
#define ColumnType_UShort ((ColumnType_enum_t)UINT8_C(4))
#define ColumnType_Int ((ColumnType_enum_t)UINT8_C(5))
#define ColumnType_UInt ((ColumnType_enum_t)UINT8_C(6))
#define ColumnType_Long ((ColumnType_enum_t)UINT8_C(7))
#define ColumnType_ULong ((ColumnType_enum_t)UINT8_C(8))
#define ColumnType_Float ((ColumnType_enum_t)UINT8_C(9))
#define ColumnType_Double ((ColumnType_enum_t)UINT8_C(10))
#define ColumnType_String ((ColumnType_enum_t)UINT8_C(11))
#define ColumnType_Json ((ColumnType_enum_t)UINT8_C(12))
#define ColumnType_DateTime ((ColumnType_enum_t)UINT8_C(13))
#define ColumnType_Binary ((ColumnType_enum_t)UINT8_C(14))

static inline const char *ColumnType_name(ColumnType_enum_t value)
{
    switch (value) {
    case ColumnType_Byte: return "Byte";
    case ColumnType_UByte: return "UByte";
    case ColumnType_Bool: return "Bool";
    case ColumnType_Short: return "Short";
    case ColumnType_UShort: return "UShort";
    case ColumnType_Int: return "Int";
    case ColumnType_UInt: return "UInt";
    case ColumnType_Long: return "Long";
    case ColumnType_ULong: return "ULong";
    case ColumnType_Float: return "Float";
    case ColumnType_Double: return "Double";
    case ColumnType_String: return "String";
    case ColumnType_Json: return "Json";
    case ColumnType_DateTime: return "DateTime";
    case ColumnType_Binary: return "Binary";
    default: return "";
    }
}

static inline int ColumnType_is_known_value(ColumnType_enum_t value)
{
    switch (value) {
    case ColumnType_Byte: return 1;
    case ColumnType_UByte: return 1;
    case ColumnType_Bool: return 1;
    case ColumnType_Short: return 1;
    case ColumnType_UShort: return 1;
    case ColumnType_Int: return 1;
    case ColumnType_UInt: return 1;
    case ColumnType_Long: return 1;
    case ColumnType_ULong: return 1;
    case ColumnType_Float: return 1;
    case ColumnType_Double: return 1;
    case ColumnType_String: return 1;
    case ColumnType_Json: return 1;
    case ColumnType_DateTime: return 1;
    case ColumnType_Binary: return 1;
    default: return 0;
    }
}



struct Column_table { uint8_t unused__; };

static inline size_t Column_vec_len(Column_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Column_table_t Column_vec_at(Column_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Column_table_t, vec, i, 0)
__flatbuffers_table_as_root(Column)

__flatbuffers_define_string_field(0, Column, name, 1)
__flatbuffers_define_scalar_field(1, Column, type, ColumnType, ColumnType_enum_t, UINT8_C(0))
__flatbuffers_define_string_field(2, Column, title, 0)
__flatbuffers_define_string_field(3, Column, description, 0)
__flatbuffers_define_scalar_field(4, Column, width, flatbuffers_int32, int32_t, INT32_C(-1))
__flatbuffers_define_scalar_field(5, Column, precision, flatbuffers_int32, int32_t, INT32_C(-1))
__flatbuffers_define_scalar_field(6, Column, scale, flatbuffers_int32, int32_t, INT32_C(-1))
__flatbuffers_define_scalar_field(7, Column, nullable, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(1))
__flatbuffers_define_scalar_field(8, Column, unique, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(9, Column, primary_key, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_string_field(10, Column, metadata, 0)

struct Crs_table { uint8_t unused__; };

static inline size_t Crs_vec_len(Crs_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Crs_table_t Crs_vec_at(Crs_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Crs_table_t, vec, i, 0)
__flatbuffers_table_as_root(Crs)

__flatbuffers_define_string_field(0, Crs, org, 0)
__flatbuffers_define_scalar_field(1, Crs, code, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_string_field(2, Crs, name, 0)
__flatbuffers_define_string_field(3, Crs, description, 0)
__flatbuffers_define_string_field(4, Crs, wkt, 0)
__flatbuffers_define_string_field(5, Crs, code_string, 0)

struct Header_table { uint8_t unused__; };

static inline size_t Header_vec_len(Header_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Header_table_t Header_vec_at(Header_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Header_table_t, vec, i, 0)
__flatbuffers_table_as_root(Header)

__flatbuffers_define_string_field(0, Header, name, 0)
__flatbuffers_define_vector_field(1, Header, envelope, flatbuffers_double_vec_t, 0)
__flatbuffers_define_scalar_field(2, Header, geometry_type, GeometryType, GeometryType_enum_t, UINT8_C(0))
__flatbuffers_define_scalar_field(3, Header, hasZ, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(4, Header, hasM, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(5, Header, hasT, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(6, Header, hasTM, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_vector_field(7, Header, columns, Column_vec_t, 0)
__flatbuffers_define_scalar_field(8, Header, features_count, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(9, Header, index_node_size, flatbuffers_uint16, uint16_t, UINT16_C(16))
__flatbuffers_define_table_field(10, Header, crs, Crs_table_t, 0)
__flatbuffers_define_string_field(11, Header, title, 0)
__flatbuffers_define_string_field(12, Header, description, 0)
__flatbuffers_define_string_field(13, Header, metadata, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* HEADER_READER_H */
