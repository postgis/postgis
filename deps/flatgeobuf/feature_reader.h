#ifndef FEATURE_READER_H
#define FEATURE_READER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef HEADER_READER_H
#include "header_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct Geometry_table *Geometry_table_t;
typedef struct Geometry_table *Geometry_mutable_table_t;
typedef const flatbuffers_uoffset_t *Geometry_vec_t;
typedef flatbuffers_uoffset_t *Geometry_mutable_vec_t;
typedef const struct Feature_table *Feature_table_t;
typedef struct Feature_table *Feature_mutable_table_t;
typedef const flatbuffers_uoffset_t *Feature_vec_t;
typedef flatbuffers_uoffset_t *Feature_mutable_vec_t;
#ifndef Geometry_file_identifier
#define Geometry_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Geometry_file_identifier */
#ifndef Geometry_identifier
#define Geometry_identifier flatbuffers_identifier
#endif
#define Geometry_type_hash ((flatbuffers_thash_t)0x243eddb1)
#define Geometry_type_identifier "\xb1\xdd\x3e\x24"
#ifndef Feature_file_identifier
#define Feature_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Feature_file_identifier */
#ifndef Feature_identifier
#define Feature_identifier flatbuffers_identifier
#endif
#define Feature_type_hash ((flatbuffers_thash_t)0xfe9102dd)
#define Feature_type_identifier "\xdd\x02\x91\xfe"



struct Geometry_table { uint8_t unused__; };

static inline size_t Geometry_vec_len(Geometry_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Geometry_table_t Geometry_vec_at(Geometry_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Geometry_table_t, vec, i, 0)
__flatbuffers_table_as_root(Geometry)

__flatbuffers_define_vector_field(0, Geometry, ends, flatbuffers_uint32_vec_t, 0)
__flatbuffers_define_vector_field(1, Geometry, xy, flatbuffers_double_vec_t, 0)
__flatbuffers_define_vector_field(2, Geometry, z, flatbuffers_double_vec_t, 0)
__flatbuffers_define_vector_field(3, Geometry, m, flatbuffers_double_vec_t, 0)
__flatbuffers_define_vector_field(4, Geometry, t, flatbuffers_double_vec_t, 0)
__flatbuffers_define_vector_field(5, Geometry, tm, flatbuffers_uint64_vec_t, 0)
__flatbuffers_define_scalar_field(6, Geometry, type, GeometryType, GeometryType_enum_t, UINT8_C(0))
__flatbuffers_define_vector_field(7, Geometry, parts, Geometry_vec_t, 0)

struct Feature_table { uint8_t unused__; };

static inline size_t Feature_vec_len(Feature_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Feature_table_t Feature_vec_at(Feature_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Feature_table_t, vec, i, 0)
__flatbuffers_table_as_root(Feature)

__flatbuffers_define_table_field(0, Feature, geometry, Geometry_table_t, 0)
__flatbuffers_define_vector_field(1, Feature, properties, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(2, Feature, columns, Column_vec_t, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* FEATURE_READER_H */
