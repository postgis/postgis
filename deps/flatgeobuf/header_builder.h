#ifndef HEADER_BUILDER_H
#define HEADER_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef HEADER_READER_H
#include "header_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __FlatGeobuf_GeometryType_formal_args , FlatGeobuf_GeometryType_enum_t v0
#define __FlatGeobuf_GeometryType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, FlatGeobuf_GeometryType, FlatGeobuf_GeometryType_enum_t)
#define __FlatGeobuf_ColumnType_formal_args , FlatGeobuf_ColumnType_enum_t v0
#define __FlatGeobuf_ColumnType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, FlatGeobuf_ColumnType, FlatGeobuf_ColumnType_enum_t)

static const flatbuffers_voffset_t __FlatGeobuf_Column_required[] = { 0, 0 };
typedef flatbuffers_ref_t FlatGeobuf_Column_ref_t;
static FlatGeobuf_Column_ref_t FlatGeobuf_Column_clone(flatbuffers_builder_t *B, FlatGeobuf_Column_table_t t);
__flatbuffers_build_table(flatbuffers_, FlatGeobuf_Column, 11)

static const flatbuffers_voffset_t __FlatGeobuf_Crs_required[] = { 0 };
typedef flatbuffers_ref_t FlatGeobuf_Crs_ref_t;
static FlatGeobuf_Crs_ref_t FlatGeobuf_Crs_clone(flatbuffers_builder_t *B, FlatGeobuf_Crs_table_t t);
__flatbuffers_build_table(flatbuffers_, FlatGeobuf_Crs, 6)

static const flatbuffers_voffset_t __FlatGeobuf_Header_required[] = { 0 };
typedef flatbuffers_ref_t FlatGeobuf_Header_ref_t;
static FlatGeobuf_Header_ref_t FlatGeobuf_Header_clone(flatbuffers_builder_t *B, FlatGeobuf_Header_table_t t);
__flatbuffers_build_table(flatbuffers_, FlatGeobuf_Header, 14)

#define __FlatGeobuf_Column_formal_args ,\
  flatbuffers_string_ref_t v0, FlatGeobuf_ColumnType_enum_t v1, flatbuffers_string_ref_t v2, flatbuffers_string_ref_t v3,\
  int32_t v4, int32_t v5, int32_t v6, flatbuffers_bool_t v7,\
  flatbuffers_bool_t v8, flatbuffers_bool_t v9, flatbuffers_string_ref_t v10
#define __FlatGeobuf_Column_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10
static inline FlatGeobuf_Column_ref_t FlatGeobuf_Column_create(flatbuffers_builder_t *B __FlatGeobuf_Column_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, FlatGeobuf_Column, FlatGeobuf_Column_file_identifier, FlatGeobuf_Column_type_identifier)

#define __FlatGeobuf_Crs_formal_args ,\
  flatbuffers_string_ref_t v0, int32_t v1, flatbuffers_string_ref_t v2, flatbuffers_string_ref_t v3, flatbuffers_string_ref_t v4, flatbuffers_string_ref_t v5
#define __FlatGeobuf_Crs_call_args ,\
  v0, v1, v2, v3, v4, v5
static inline FlatGeobuf_Crs_ref_t FlatGeobuf_Crs_create(flatbuffers_builder_t *B __FlatGeobuf_Crs_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, FlatGeobuf_Crs, FlatGeobuf_Crs_file_identifier, FlatGeobuf_Crs_type_identifier)

#define __FlatGeobuf_Header_formal_args ,\
  flatbuffers_string_ref_t v0, flatbuffers_double_vec_ref_t v1, FlatGeobuf_GeometryType_enum_t v2, flatbuffers_bool_t v3,\
  flatbuffers_bool_t v4, flatbuffers_bool_t v5, flatbuffers_bool_t v6, FlatGeobuf_Column_vec_ref_t v7,\
  uint64_t v8, uint16_t v9, FlatGeobuf_Crs_ref_t v10, flatbuffers_string_ref_t v11, flatbuffers_string_ref_t v12, flatbuffers_string_ref_t v13
#define __FlatGeobuf_Header_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10, v11, v12, v13
static inline FlatGeobuf_Header_ref_t FlatGeobuf_Header_create(flatbuffers_builder_t *B __FlatGeobuf_Header_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, FlatGeobuf_Header, FlatGeobuf_Header_file_identifier, FlatGeobuf_Header_type_identifier)

__flatbuffers_build_string_field(0, flatbuffers_, FlatGeobuf_Column_name, FlatGeobuf_Column)
__flatbuffers_build_scalar_field(1, flatbuffers_, FlatGeobuf_Column_type, FlatGeobuf_ColumnType, FlatGeobuf_ColumnType_enum_t, 1, 1, UINT8_C(0), FlatGeobuf_Column)
__flatbuffers_build_string_field(2, flatbuffers_, FlatGeobuf_Column_title, FlatGeobuf_Column)
__flatbuffers_build_string_field(3, flatbuffers_, FlatGeobuf_Column_description, FlatGeobuf_Column)
__flatbuffers_build_scalar_field(4, flatbuffers_, FlatGeobuf_Column_width, flatbuffers_int32, int32_t, 4, 4, INT32_C(-1), FlatGeobuf_Column)
__flatbuffers_build_scalar_field(5, flatbuffers_, FlatGeobuf_Column_precision, flatbuffers_int32, int32_t, 4, 4, INT32_C(-1), FlatGeobuf_Column)
__flatbuffers_build_scalar_field(6, flatbuffers_, FlatGeobuf_Column_scale, flatbuffers_int32, int32_t, 4, 4, INT32_C(-1), FlatGeobuf_Column)
__flatbuffers_build_scalar_field(7, flatbuffers_, FlatGeobuf_Column_nullable, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(1), FlatGeobuf_Column)
__flatbuffers_build_scalar_field(8, flatbuffers_, FlatGeobuf_Column_unique, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), FlatGeobuf_Column)
__flatbuffers_build_scalar_field(9, flatbuffers_, FlatGeobuf_Column_primary_key, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), FlatGeobuf_Column)
__flatbuffers_build_string_field(10, flatbuffers_, FlatGeobuf_Column_metadata, FlatGeobuf_Column)

static inline FlatGeobuf_Column_ref_t FlatGeobuf_Column_create(flatbuffers_builder_t *B __FlatGeobuf_Column_formal_args)
{
    if (FlatGeobuf_Column_start(B)
        || FlatGeobuf_Column_name_add(B, v0)
        || FlatGeobuf_Column_title_add(B, v2)
        || FlatGeobuf_Column_description_add(B, v3)
        || FlatGeobuf_Column_width_add(B, v4)
        || FlatGeobuf_Column_precision_add(B, v5)
        || FlatGeobuf_Column_scale_add(B, v6)
        || FlatGeobuf_Column_metadata_add(B, v10)
        || FlatGeobuf_Column_type_add(B, v1)
        || FlatGeobuf_Column_nullable_add(B, v7)
        || FlatGeobuf_Column_unique_add(B, v8)
        || FlatGeobuf_Column_primary_key_add(B, v9)) {
        return 0;
    }
    return FlatGeobuf_Column_end(B);
}

static FlatGeobuf_Column_ref_t FlatGeobuf_Column_clone(flatbuffers_builder_t *B, FlatGeobuf_Column_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (FlatGeobuf_Column_start(B)
        || FlatGeobuf_Column_name_pick(B, t)
        || FlatGeobuf_Column_title_pick(B, t)
        || FlatGeobuf_Column_description_pick(B, t)
        || FlatGeobuf_Column_width_pick(B, t)
        || FlatGeobuf_Column_precision_pick(B, t)
        || FlatGeobuf_Column_scale_pick(B, t)
        || FlatGeobuf_Column_metadata_pick(B, t)
        || FlatGeobuf_Column_type_pick(B, t)
        || FlatGeobuf_Column_nullable_pick(B, t)
        || FlatGeobuf_Column_unique_pick(B, t)
        || FlatGeobuf_Column_primary_key_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, FlatGeobuf_Column_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, FlatGeobuf_Crs_org, FlatGeobuf_Crs)
__flatbuffers_build_scalar_field(1, flatbuffers_, FlatGeobuf_Crs_code, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), FlatGeobuf_Crs)
__flatbuffers_build_string_field(2, flatbuffers_, FlatGeobuf_Crs_name, FlatGeobuf_Crs)
__flatbuffers_build_string_field(3, flatbuffers_, FlatGeobuf_Crs_description, FlatGeobuf_Crs)
__flatbuffers_build_string_field(4, flatbuffers_, FlatGeobuf_Crs_wkt, FlatGeobuf_Crs)
__flatbuffers_build_string_field(5, flatbuffers_, FlatGeobuf_Crs_code_string, FlatGeobuf_Crs)

static inline FlatGeobuf_Crs_ref_t FlatGeobuf_Crs_create(flatbuffers_builder_t *B __FlatGeobuf_Crs_formal_args)
{
    if (FlatGeobuf_Crs_start(B)
        || FlatGeobuf_Crs_org_add(B, v0)
        || FlatGeobuf_Crs_code_add(B, v1)
        || FlatGeobuf_Crs_name_add(B, v2)
        || FlatGeobuf_Crs_description_add(B, v3)
        || FlatGeobuf_Crs_wkt_add(B, v4)
        || FlatGeobuf_Crs_code_string_add(B, v5)) {
        return 0;
    }
    return FlatGeobuf_Crs_end(B);
}

static FlatGeobuf_Crs_ref_t FlatGeobuf_Crs_clone(flatbuffers_builder_t *B, FlatGeobuf_Crs_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (FlatGeobuf_Crs_start(B)
        || FlatGeobuf_Crs_org_pick(B, t)
        || FlatGeobuf_Crs_code_pick(B, t)
        || FlatGeobuf_Crs_name_pick(B, t)
        || FlatGeobuf_Crs_description_pick(B, t)
        || FlatGeobuf_Crs_wkt_pick(B, t)
        || FlatGeobuf_Crs_code_string_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, FlatGeobuf_Crs_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, FlatGeobuf_Header_name, FlatGeobuf_Header)
__flatbuffers_build_vector_field(1, flatbuffers_, FlatGeobuf_Header_envelope, flatbuffers_double, double, FlatGeobuf_Header)
__flatbuffers_build_scalar_field(2, flatbuffers_, FlatGeobuf_Header_geometry_type, FlatGeobuf_GeometryType, FlatGeobuf_GeometryType_enum_t, 1, 1, UINT8_C(0), FlatGeobuf_Header)
__flatbuffers_build_scalar_field(3, flatbuffers_, FlatGeobuf_Header_has_z, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), FlatGeobuf_Header)
__flatbuffers_build_scalar_field(4, flatbuffers_, FlatGeobuf_Header_has_m, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), FlatGeobuf_Header)
__flatbuffers_build_scalar_field(5, flatbuffers_, FlatGeobuf_Header_has_t, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), FlatGeobuf_Header)
__flatbuffers_build_scalar_field(6, flatbuffers_, FlatGeobuf_Header_has_tm, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), FlatGeobuf_Header)
__flatbuffers_build_table_vector_field(7, flatbuffers_, FlatGeobuf_Header_columns, FlatGeobuf_Column, FlatGeobuf_Header)
__flatbuffers_build_scalar_field(8, flatbuffers_, FlatGeobuf_Header_features_count, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), FlatGeobuf_Header)
__flatbuffers_build_scalar_field(9, flatbuffers_, FlatGeobuf_Header_index_node_size, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(16), FlatGeobuf_Header)
__flatbuffers_build_table_field(10, flatbuffers_, FlatGeobuf_Header_crs, FlatGeobuf_Crs, FlatGeobuf_Header)
__flatbuffers_build_string_field(11, flatbuffers_, FlatGeobuf_Header_title, FlatGeobuf_Header)
__flatbuffers_build_string_field(12, flatbuffers_, FlatGeobuf_Header_description, FlatGeobuf_Header)
__flatbuffers_build_string_field(13, flatbuffers_, FlatGeobuf_Header_metadata, FlatGeobuf_Header)

static inline FlatGeobuf_Header_ref_t FlatGeobuf_Header_create(flatbuffers_builder_t *B __FlatGeobuf_Header_formal_args)
{
    if (FlatGeobuf_Header_start(B)
        || FlatGeobuf_Header_features_count_add(B, v8)
        || FlatGeobuf_Header_name_add(B, v0)
        || FlatGeobuf_Header_envelope_add(B, v1)
        || FlatGeobuf_Header_columns_add(B, v7)
        || FlatGeobuf_Header_crs_add(B, v10)
        || FlatGeobuf_Header_title_add(B, v11)
        || FlatGeobuf_Header_description_add(B, v12)
        || FlatGeobuf_Header_metadata_add(B, v13)
        || FlatGeobuf_Header_index_node_size_add(B, v9)
        || FlatGeobuf_Header_geometry_type_add(B, v2)
        || FlatGeobuf_Header_has_z_add(B, v3)
        || FlatGeobuf_Header_has_m_add(B, v4)
        || FlatGeobuf_Header_has_t_add(B, v5)
        || FlatGeobuf_Header_has_tm_add(B, v6)) {
        return 0;
    }
    return FlatGeobuf_Header_end(B);
}

static FlatGeobuf_Header_ref_t FlatGeobuf_Header_clone(flatbuffers_builder_t *B, FlatGeobuf_Header_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (FlatGeobuf_Header_start(B)
        || FlatGeobuf_Header_features_count_pick(B, t)
        || FlatGeobuf_Header_name_pick(B, t)
        || FlatGeobuf_Header_envelope_pick(B, t)
        || FlatGeobuf_Header_columns_pick(B, t)
        || FlatGeobuf_Header_crs_pick(B, t)
        || FlatGeobuf_Header_title_pick(B, t)
        || FlatGeobuf_Header_description_pick(B, t)
        || FlatGeobuf_Header_metadata_pick(B, t)
        || FlatGeobuf_Header_index_node_size_pick(B, t)
        || FlatGeobuf_Header_geometry_type_pick(B, t)
        || FlatGeobuf_Header_has_z_pick(B, t)
        || FlatGeobuf_Header_has_m_pick(B, t)
        || FlatGeobuf_Header_has_t_pick(B, t)
        || FlatGeobuf_Header_has_tm_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, FlatGeobuf_Header_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* HEADER_BUILDER_H */
