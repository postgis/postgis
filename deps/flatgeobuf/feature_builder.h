#ifndef FEATURE_BUILDER_H
#define FEATURE_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FEATURE_READER_H
#include "feature_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#ifndef HEADER_BUILDER_H
#include "header_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

static const flatbuffers_voffset_t __FlatGeobuf_Geometry_required[] = { 0 };
typedef flatbuffers_ref_t FlatGeobuf_Geometry_ref_t;
static FlatGeobuf_Geometry_ref_t FlatGeobuf_Geometry_clone(flatbuffers_builder_t *B, FlatGeobuf_Geometry_table_t t);
__flatbuffers_build_table(flatbuffers_, FlatGeobuf_Geometry, 8)

static const flatbuffers_voffset_t __FlatGeobuf_Feature_required[] = { 0 };
typedef flatbuffers_ref_t FlatGeobuf_Feature_ref_t;
static FlatGeobuf_Feature_ref_t FlatGeobuf_Feature_clone(flatbuffers_builder_t *B, FlatGeobuf_Feature_table_t t);
__flatbuffers_build_table(flatbuffers_, FlatGeobuf_Feature, 3)

#define __FlatGeobuf_Geometry_formal_args ,\
  flatbuffers_uint32_vec_ref_t v0, flatbuffers_double_vec_ref_t v1, flatbuffers_double_vec_ref_t v2, flatbuffers_double_vec_ref_t v3,\
  flatbuffers_double_vec_ref_t v4, flatbuffers_uint64_vec_ref_t v5, FlatGeobuf_GeometryType_enum_t v6, FlatGeobuf_Geometry_vec_ref_t v7
#define __FlatGeobuf_Geometry_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7
static inline FlatGeobuf_Geometry_ref_t FlatGeobuf_Geometry_create(flatbuffers_builder_t *B __FlatGeobuf_Geometry_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, FlatGeobuf_Geometry, FlatGeobuf_Geometry_file_identifier, FlatGeobuf_Geometry_type_identifier)

#define __FlatGeobuf_Feature_formal_args , FlatGeobuf_Geometry_ref_t v0, flatbuffers_uint8_vec_ref_t v1, FlatGeobuf_Column_vec_ref_t v2
#define __FlatGeobuf_Feature_call_args , v0, v1, v2
static inline FlatGeobuf_Feature_ref_t FlatGeobuf_Feature_create(flatbuffers_builder_t *B __FlatGeobuf_Feature_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, FlatGeobuf_Feature, FlatGeobuf_Feature_file_identifier, FlatGeobuf_Feature_type_identifier)

__flatbuffers_build_vector_field(0, flatbuffers_, FlatGeobuf_Geometry_ends, flatbuffers_uint32, uint32_t, FlatGeobuf_Geometry)
__flatbuffers_build_vector_field(1, flatbuffers_, FlatGeobuf_Geometry_xy, flatbuffers_double, double, FlatGeobuf_Geometry)
__flatbuffers_build_vector_field(2, flatbuffers_, FlatGeobuf_Geometry_z, flatbuffers_double, double, FlatGeobuf_Geometry)
__flatbuffers_build_vector_field(3, flatbuffers_, FlatGeobuf_Geometry_m, flatbuffers_double, double, FlatGeobuf_Geometry)
__flatbuffers_build_vector_field(4, flatbuffers_, FlatGeobuf_Geometry_t, flatbuffers_double, double, FlatGeobuf_Geometry)
__flatbuffers_build_vector_field(5, flatbuffers_, FlatGeobuf_Geometry_tm, flatbuffers_uint64, uint64_t, FlatGeobuf_Geometry)
__flatbuffers_build_scalar_field(6, flatbuffers_, FlatGeobuf_Geometry_type, FlatGeobuf_GeometryType, FlatGeobuf_GeometryType_enum_t, 1, 1, UINT8_C(0), FlatGeobuf_Geometry)
__flatbuffers_build_table_vector_field(7, flatbuffers_, FlatGeobuf_Geometry_parts, FlatGeobuf_Geometry, FlatGeobuf_Geometry)

static inline FlatGeobuf_Geometry_ref_t FlatGeobuf_Geometry_create(flatbuffers_builder_t *B __FlatGeobuf_Geometry_formal_args)
{
    if (FlatGeobuf_Geometry_start(B)
        || FlatGeobuf_Geometry_ends_add(B, v0)
        || FlatGeobuf_Geometry_xy_add(B, v1)
        || FlatGeobuf_Geometry_z_add(B, v2)
        || FlatGeobuf_Geometry_m_add(B, v3)
        || FlatGeobuf_Geometry_t_add(B, v4)
        || FlatGeobuf_Geometry_tm_add(B, v5)
        || FlatGeobuf_Geometry_parts_add(B, v7)
        || FlatGeobuf_Geometry_type_add(B, v6)) {
        return 0;
    }
    return FlatGeobuf_Geometry_end(B);
}

static FlatGeobuf_Geometry_ref_t FlatGeobuf_Geometry_clone(flatbuffers_builder_t *B, FlatGeobuf_Geometry_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (FlatGeobuf_Geometry_start(B)
        || FlatGeobuf_Geometry_ends_pick(B, t)
        || FlatGeobuf_Geometry_xy_pick(B, t)
        || FlatGeobuf_Geometry_z_pick(B, t)
        || FlatGeobuf_Geometry_m_pick(B, t)
        || FlatGeobuf_Geometry_t_pick(B, t)
        || FlatGeobuf_Geometry_tm_pick(B, t)
        || FlatGeobuf_Geometry_parts_pick(B, t)
        || FlatGeobuf_Geometry_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, FlatGeobuf_Geometry_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, FlatGeobuf_Feature_geometry, FlatGeobuf_Geometry, FlatGeobuf_Feature)
__flatbuffers_build_vector_field(1, flatbuffers_, FlatGeobuf_Feature_properties, flatbuffers_uint8, uint8_t, FlatGeobuf_Feature)
__flatbuffers_build_table_vector_field(2, flatbuffers_, FlatGeobuf_Feature_columns, FlatGeobuf_Column, FlatGeobuf_Feature)

static inline FlatGeobuf_Feature_ref_t FlatGeobuf_Feature_create(flatbuffers_builder_t *B __FlatGeobuf_Feature_formal_args)
{
    if (FlatGeobuf_Feature_start(B)
        || FlatGeobuf_Feature_geometry_add(B, v0)
        || FlatGeobuf_Feature_properties_add(B, v1)
        || FlatGeobuf_Feature_columns_add(B, v2)) {
        return 0;
    }
    return FlatGeobuf_Feature_end(B);
}

static FlatGeobuf_Feature_ref_t FlatGeobuf_Feature_clone(flatbuffers_builder_t *B, FlatGeobuf_Feature_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (FlatGeobuf_Feature_start(B)
        || FlatGeobuf_Feature_geometry_pick(B, t)
        || FlatGeobuf_Feature_properties_pick(B, t)
        || FlatGeobuf_Feature_columns_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, FlatGeobuf_Feature_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* FEATURE_BUILDER_H */
