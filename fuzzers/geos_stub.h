/******************************************************************************
 *
 * Project:  PostGIS
 * Purpose:  Fuzzer
 * Author:   Even Rouault, even.rouault at spatialys.com
 *
 ******************************************************************************
 * Copyright (c) 2017, Even Rouault <even.rouault at spatialys.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ****************************************************************************/
#include <assert.h>
void
GEOSCoordSeq_destroy()
{
	assert(0);
}
void
GEOSClipByRect()
{
	assert(0);
}
void
GEOSUnion()
{
	assert(0);
}
void
GEOSCoordSeq_getDimensions()
{
	assert(0);
}
void
GEOSPreparedCovers()
{
	assert(0);
}
void
GEOSPreparedContains()
{
	assert(0);
}
void
GEOSSymDifference()
{
	assert(0);
}
void
GEOSUnionCascaded()
{
	assert(0);
}
void
GEOSGetExteriorRing()
{
	assert(0);
}
void
GEOSCoordSeq_setX()
{
	assert(0);
}
void
GEOSGeom_createLineString()
{
	assert(0);
}
void
GEOSCoordSeq_getY()
{
	assert(0);
}
void
GEOSEquals()
{
	assert(0);
}
void
GEOSRelatePatternMatch()
{
	assert(0);
}
void
GEOSGeom_createCollection()
{
	assert(0);
}
void
GEOSGeom_extractUniquePoints()
{
	assert(0);
}
void
GEOSNormalize()
{
	assert(0);
}
void
GEOSVoronoiDiagram()
{
	assert(0);
}
void
GEOSArea()
{
	assert(0);
}
void
GEOSLineMerge()
{
	assert(0);
}
void
GEOSGeom_createPolygon()
{
	assert(0);
}
void
GEOSGetCentroid()
{
	assert(0);
}
void
GEOSCoordSeq_create()
{
	assert(0);
}
void
GEOSFree()
{
	assert(0);
}
void
initGEOS()
{
	assert(0);
}
void
GEOSIntersection()
{
	assert(0);
}
void
GEOSEnvelope()
{
	assert(0);
}
void
GEOSGetGeometryN()
{
	assert(0);
}
void
GEOSSTRtree_insert()
{
	assert(0);
}
void
GEOSGeomTypeId()
{
	assert(0);
}
void
GEOSBoundary()
{
	assert(0);
}
void
GEOSversion()
{
	assert(0);
}
void
GEOSGetInteriorRingN()
{
	assert(0);
}
void
GEOSCoordSeq_setY()
{
	assert(0);
}
void
GEOSGetSRID()
{
	assert(0);
}
void
GEOSGeom_destroy()
{
	assert(0);
}
void
GEOSGeom_createEmptyPolygon()
{
	assert(0);
}
void
GEOSPolygonize()
{
	assert(0);
}
void
GEOSCoordSeq_getX()
{
	assert(0);
}
void
GEOSSharedPaths()
{
	assert(0);
}
void
GEOSSTRtree_create()
{
	assert(0);
}
void
GEOSGeom_clone()
{
	assert(0);
}
void
GEOSRelateBoundaryNodeRule()
{
	assert(0);
}
void
GEOSSnap()
{
	assert(0);
}
void
GEOSRelatePattern()
{
	assert(0);
}
void
GEOSSetSRID()
{
	assert(0);
}
void
GEOSisValid()
{
	assert(0);
}
void
GEOSContains()
{
	assert(0);
}
void
GEOSPreparedGeom_destroy()
{
	assert(0);
}
void
GEOSCoordSeq_setZ()
{
	assert(0);
}
void
GEOSOffsetCurve()
{
	assert(0);
}
void
GEOSUnaryUnion()
{
	assert(0);
}
void
GEOSPrepare()
{
	assert(0);
}
void
GEOSCoordSeq_getSize()
{
	assert(0);
}
void
GEOSGetNumInteriorRings()
{
	assert(0);
}
void
GEOSGetNumGeometries()
{
	assert(0);
}
void
GEOSisSimple()
{
	assert(0);
}
void
GEOSDifference()
{
	assert(0);
}
void
GEOSPreparedIntersects()
{
	assert(0);
}
void
GEOSisEmpty()
{
	assert(0);
}
void
GEOSPointOnSurface()
{
	assert(0);
}
void
GEOSSTRtree_query()
{
	assert(0);
}
void
GEOSGeom_createPoint()
{
	assert(0);
}
void
GEOSSTRtree_destroy()
{
	assert(0);
}
void
GEOSIntersects()
{
	assert(0);
}
void
GEOSHasZ()
{
	assert(0);
}
void
GEOSGeom_getCoordSeq()
{
	assert(0);
}
void
GEOSCoordSeq_getZ()
{
	assert(0);
}
void
GEOSGeom_createLinearRing()
{
	assert(0);
}
void
GEOSGeomType()
{
	assert(0);
}
void
GEOSDelaunayTriangulation()
{
	assert(0);
}
void
GEOSNode()
{
	assert(0);
}
void
GEOSGeom_createEmptyPoint()
{
	assert(0);
}
void
GEOSCoordSeq_setXY()
{
	assert(0);
}
void
GEOSCoordSeq_getXY()
{
	assert(0);
}
void
GEOSCoordSeq_setXYZ()
{
	assert(0);
}
void
GEOSCoordSeq_getXYZ()
{
	assert(0);
}
void GEOSGeom_getXY()
{
	assert(0);
}
void
GEOSBuildArea()
{
	assert(0);
}
void
GEOSMakeValid()
{
	assert(0);
}
void GEOSGeom_getXYZ()
{
	assert(0);
}

void GEOSGeom_setXY()
{
	assert(0);
}

void GEOSGeom_setXYZ()
{
	assert(0);
}

void GEOSGeom_createPointFromXY()
{
	assert(0);
}
