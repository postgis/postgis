The real folder is the home for tests involving real world data.
To run these tests:
cd regress/real
make check

It includes a download_data.sh script that downloads data from http://postgis.net/extra/test-data

Data in http://postgis.net/extra/test-data is currently sourced from Census Tiger and OSM data sources and is packaged
in a format suitable for load by psql.

If you want to control where the data is downloaded to, set env variable
export DOWNLOAD_DATADIR=/path/to_download_data

If path is not set, a download_data folder will created in this folder and removed with make distclean

The data sources available there are as follows:

tiger_national.sql.bz2 - this requires the postgis_tiger_geocoder extension to be loaded before hand as it inherits from the tables packaged with that. The data is from https://www2.census.gov/geo/tiger/TIGER2020/ (zcta5, state, county)

tiger_dc.sql.bz2 - this requires the postgis_tiger_geocoder extension.  Data sourced from https://www2.census.gov/geo/tiger/TIGER2020/*/tl_2020_11*_*.zip files

tiger_ma.sql.bz2 - this requires the postgis_tiger_geocoder extension.  Data sourced from https://www2.census.gov/geo/tiger/TIGER2020/*/tl_2020_25*_*.zip files

osm_belarus.sql.bz2 - this is sourced from https://download.geofabrik.de/europe/belarus-latest.osm.pbf dated 2021-06-28T20:21:42Z

osm_china.sql.bz2 - this is sourced from https://download.geofabrik.de/asia/china-140101-free.shp.zip dated 2018-05-03 16:26

Requirements for run_test.pl
----------------------------

run_test.pl requires the following Perl modules to be installed

 Text::Diff;
 File::Which;
 File::Basename;
 File::Temp 'tempdir';
 File::Copy;
 File::Path 'make_path';
 File::Path 'remove_tree';
 Cwd 'abs_path';
 Getopt::Long;

Most distributions of Perl will have everything except Text::Diff and File::Which.
To install them from the command-line, as root run

 cpan Text::Diff
 cpan File::Which


How to add a regression test
----------------------------

1. Add any needed data sources to download_data.sh (later we might break this up)
2. Add a psql load line to load_data.sql script and edit test.mk and add the script RUNTESTFLAGS_INTERNAL
3. Write a <testname>.sql file with data and sql queries for testing
4. Write a <testname>_expected or <testname>_expected.in file with
   expected results per query
   The expected results provided in the <testname>_expected file must be
   formatted using the following psql options:
      -a -- unaligned columns
      -f | -- use | (pipe) as the field separator between columns
      -t -- output rows only, ie. no table header

   cat file.sql | psql -F\| -t -A > file_expected

3. Edit tests.mk adding <testname> to the TESTS variable.
   Any _expected.in files need to be added to the PREPROC variable.

Optional:
   If your test has unusual setup or teardown requirements, you may create
   any of the following optional files (they will run in this order):
        <testname>-pre.sh
        <testname>-pre.sql   (run via psql)
                 (The test itself is run here.)
        <testname>-post.sql  (run via psql)
        <testname>-post.sh
